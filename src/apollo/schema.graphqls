type Comment {
  # mongoid
  id: ID!
  # тест комментария
  message: String
  # отправитель
  sender: User
  # id сущности к которой привязан комментарий
  parent: String
  # дата создания комментария, в формате ISO
  createdat: String
  # дата обновления комментария, в формате ISO
  updatedat: String
  # удален ли комментарий (?)
  isdelete: Boolean
}

type Block {
  # mongoid
  id: ID!
  # заголовок
  name: String
  # html контент фроалы
  content: String
  # номер ячейки в документе
  number: String
  # тип контента: таблица, картинка, текст
  contenttype: String
}

type Cell {
  # mongoid
  id: ID!
  # имя раздела
  name: String!
  # статус проверки ячейки
  verify: String!
  # id предыдущей ячейки, оно равно id в свойстве parent если ячейка дочерняя другой ячейке и первая по счету
  prevcell: String
  # id следующей ячейки
  nextcell: String
  # id родительской ячейки
  parent: String
  # id первой дочерней ячейки, от этой ячейки далее строятся запросы на получение всех дочерних ячеек
  childcell: String
  # говорит нам является ли ячейка названием раздела, а не блоком с контентом,
  # если равно false то id в поле childCell указывает не на дочернюю категорию, а на дочерний блок с контентом
  is_head: Boolean
  # контент раздела
  content: Block
  # массив комментариев ячейки
  comments: [Comment]
  # массив связанных объектов
  pull: [Cell]
}

type Document {
  # mongoid
  id: ID
  # название шаблона
  name: String
  # id корневого элемента от которого строится граф разделов
  cell: String
  # null, на согласовании, согласован, не согласован
  approvalstatus: String
}

type Project {
  # mongoid
  id: ID
  # название проекта
  name: String
  # пользователь создавший проект
  author: User
  # список участников
  partners: [User]
  # код документа ОКАН
  okancode: String
  # код документа заказчика
  customercode: String
  # mongoid документа проекта
  documents: [String]
  # дата создания
  createdate: String
  # дата обновления
  updatedate: String
  # массив ревизий проекта
  revisions: [Project]
  # archive or working
  status: String
}

type User {
  # mongoid
  id: String
  # имя пользователя
  firstname: String
  # фамилия пользователя
  lastname: String
  # отчество пользователя
  patronymic: String
  # дата рождения пользователя
  birthdate: String
  # номер телефона пользователя
  phone: String
  # адрес ел.почты пользователя
  email: String
  # подпись пользователя
  signature: String
  # роль пользователя
  role: String
}

type Notification {
  # mongoid
  id: String,
  # комментарий, содержит объект комментариф к ячейке
  comment: Comment,
  # сообщение уведомления
  message: String
  # отправитель
  sender: User
  # получатель
  recipient: User
  # дата создания в ISO
  createat: String
}

type Query {

  # список пользователей
  userlist: [User],

  # получить пользователя по id
  useritem(id: ID!): User,

  # получить пользователя по адресу эл.почты
  useremailitem(email: String!): User,

  # запросить ячейку по id
  cellitem(id: ID!): Cell

  # получить список документов
  documentlist: [Document]

  # получить документ по id
  documentitem(id: ID!) : Document

  # получит список проектов пользователя
  projectlist(user: ID!): [Project]
  # получит проект по id
  projectitem(id: ID!): Project

  # получит список ревизий проекта
  revisionlist(id: ID!): [Project]
  # получит ревизию проекта по id
  revisionitem(id: ID!): Project

  # получить список уведомлений по id пользователя получателя
  notificationlist(user:String): [Notification]
}

type Mutation {

  # создание пользователя
  createuser(
  id: String,
  firstName: String!,
  lastName: String!,
  patronymic: String!,
  birthdate: String!,
  position:String!,
  phone: String!,
  email: String!,
  signature: String!,
): User,

  # обновление пользователя
  updateuser(
  id: String,
  firstName: String,
  lastName: String,
  patronymic: String,
  birthdate: String,
  phone: String,
  email: String,
  signature: String,
  position:String,
): User,

  # смена пароля пользователя
  changepassword(user: ID!, password: String!, newPassword: String!, confirmNewPassword: String!): User,

  # смена пароля пользователя
  userregistration(email: String!, password: String!, retryPas: String): User,

  # создание ячейки,
  # name
  # prevcell - id предыдущей ячейки
  # content - содержимое ячейки
  createcell(name:String!,prevcell:ID, content: Block): Cell

  # обновление ячейки
  # id - mongoid ячейки
  # content - html содержимое ячейки
  # prevcell - id предыдущей ячейки
  # nextcell - id следующей ячейки
  updatecell(id: String!, content: Block, prevcell: ID, nextcell: String): Cell

  # создание комментария
  # sender - id отправителя комментария
  # message - сообщение комментария
  # cell - id комментаруемой ячейки
  createcomment(sender: ID!, message: String!, cell: ID!): Comment

  # обновление комментария
  # id - mongoid комментария
  # message - сообщение комментария
  # isdelete - удален ли комментарий из ячейки
  updatecomment(id: ID!,isdelete: Boolean, message: String): Comment

  # создание документа
  createdocument(name: String, cell: String!): Document

  # обновление документа
  updatedocument(name: String, cell: String!): Document

  # создание проекта
  # name - название проекта
  # document - id документа проекта, это (шаблон)(хз под вопросом)
  createproject(name:String!, document: ID!): Project

  updateproject(id: String, name: String,partner: String, okancode: String, customercode: String, partners: [String]): Project

  # создание ревизии документа
  # id - id документа для которого должна быть создана ревизия
  createrevision(id: String!): Document

  # метод для связывания ячеек
  # target - id ячейки с которой нужно создать связь, по сути дочерняя ячейка
  # parent - id ячейки которая образует связь, ячейка родитель
  bindingcell(target: [ID]!, parent: ID!): Cell

  # освобождает ячейки из пулла, не менняя из значения.
  unbindingcell(cell: [ID]!): Cell

  # Активация пользователя, на вход получаем логин пользователя и пароль
  activateuser(user:String, password: String): User

  # user - принимает login пользователя
  recoverypass(user:String): User
}
