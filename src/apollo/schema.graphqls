type Comment {
  # mongoid
  id: String!
  # тест комментария
  message: String
  # отправитель
  sender: User
  # id сущности к которой привязан комментарий
  cell: String
  # id документа, при создании комментария id документа добавляется автоматически
  document: String
  # дата создания комментария, в формате ISO
  createdat: String
  # дата обновления комментария, в формате ISO
  updatedat: String
  # удален ли комментарий (?)
  isdelete: Boolean
}
#  comment {
#      cell
#      createdat
#      id
#      isdelete
#      message
#      sender {
#        birthdate
#        email
#        firstname
#        id
#        lastname
#        patronymic
#        phone
#        position
#        role {
#          description
#          id
#          name
#          resolvers {
#            id
#            module
#            name
#          }
#        }
#        signature
#      }
#      updatedat
#    }
#  }

type Block {
  # mongoid
  id: String!
  # заголовок
  name: String
  # html контент фроалы
  content: String
  # номер ячейки в документе
  number: String
  # тип контента: таблица, картинка, текст
  contenttype: String
}
# block {
#   content
#   contenttype
#   id
#   name
#   number
# }



type Cell {
  # mongoid
  id: String!
  # имя раздела
  name: String!
  # статус проверки ячейки
  verify: String!
  # id предыдущей ячейки, оно равно id в свойстве parent если ячейка дочерняя другой ячейке и первая по счету
  prevcell: String
  # id следующей ячейки
  nextcell: String
  # id родительской ячейки
  parent: String
  # id первой дочерней ячейки, от этой ячейки далее строятся запросы на получение всех дочерних ячеек
  childcell: String
  # говорит нам является ли ячейка названием раздела, а не блоком с контентом,
  # если равно false то id в поле childCell указывает не на дочернюю категорию, а на дочерний блок с контентом
  is_head: Boolean
  # контент раздела
  content: Block
  # массив комментариев ячейки
  comments: [Comment]
  # массив связанных объектов
  pull: [Cell]
  # null, на согласовании, согласован, не согласован
  approvalstatus: String
}
#  cell {
#       children{
#        	cell
#       }
#       comments{
#         cell
#         createdat
#         id
#         isdelete
#         message
#         sender{
#           birthdate
#           email
#           firstname
#         id
#           lastname
#           patronymic
#           phone
#           position
#           role{
#             description
#             id
#             name
#             resolvers{
#               id
#               module
#               name
#             }

#           }
#           signature
#         }
#         updatedat

#       }
#       content{
#         content
#         contenttype
#         id
#         name
#         number
#       }
#       id
#       isHead
#       name
#       nextcell{
#         cell
#       }
#       parent{
#         cell
#       }
#       prevcell{
#         cell
#       }
#       verify
#       pull {
#         cell
#       }
#     }
#   }


type Document {
  # mongoid
  id: String
  # название шаблона
  name: String
  # id корневого элемента от которого строится граф разделов
  childcell: String
  # null, на согласовании, согласован, не согласован
  approvalstatus: String
}
# document{
#       approvalstatus
#       cell{
#         children{
#           cell
#         }
#         comments{
#           cell
#           createdat
#           id
#           isdelete
#           message
#           sender{
#             birthdate
#             email
#             firstname
#             id
#             lastname
#             patronymic
#             phone
#             position
#             role{
#               description
#               id
#               name
#               resolvers{
#                 id
#                 module
#                 name
#               }
#             }
#             signature
#           }
#           updatedat
#         }
#         content{
#           content
#           contenttype
#           id
#           name
#           number
#         }
#         id
#         isHead
#         name
#         nextcell{
#           cell
#         }
#         parent{
#           cell
#         }
#         prevcell{
#           cell
#         }
#         verify
#         pull{
#           cell
#         }
#       }
#       id
#       name
#     }


type Project {
  # mongoid
  id: String
  # название проекта
  name: String
  # пользователь создавший проект
  author: User
  # список участников
  partners: [User]
  # код документа ОКАН
  okancode: String
  # код документа заказчика
  customercode: String
  # mongoid документа проекта
  documents: [String]
  # дата создания
  createdate: String
  # дата обновления
  updatedate: String
  # массив ревизий проекта
  revisions: [String]
  # archive or working
  status: String
}

type User {
  # mongoid
  id: String
  # имя пользователя
  firstname: String
  # фамилия пользователя
  lastname: String
  # отчество пользователя
  patronymic: String
  # дата рождения пользователя
  birthdate: String
  # номер телефона пользователя
  phone: String
  # адрес ел.почты пользователя
  email: String
  # подпись пользователя
  signature: String
  # роль пользователя
  role: String
}
# user {
#       birthdate
#       email
#       firstname
#       id
#       lastname
#       patronymic
#       phone
#       position
#       role {
#         id
#       }
#       signature
#     }

type Notification {
  # mongoid
  id: String,
  # комментарий, содержит объект комментариф к ячейке
  comment: Comment,
  # сообщение уведомления
  message: String
  # отправитель
  sender: User
  # получатель
  recipient: User
  # дата создания в ISO
  createat: String
}

type Query {

  # список пользователей
  userlist: [User],
#   query{
#   userlist{
#     user
#   }
# }

  # получить пользователя по id
  useritem(id: String!): User,
#   query ($id: String) {
#   useritem(id: $id) {
#     birthdate
#   }
# }

  # получить пользователя по адресу эл.почты
  useremailitem(email: String!): User,
# ВОТ ЭТО КВЕРИ НАДО РЕАЛТЗОВАТЬ, ДЛЯ ВХОДА. НЕ МОГУ ЗАЙТИ ДАЖЕ АДМИНОМ (


  # запросить ячейку по id
  cellitem(id: String!): Cell
#   query ($id: String) {
#   cellitem(id: $id) {
#     cell
#   }
# }

  # получить список документов
  # projectid - id проекта по которому запрашиваются документы
  documentlist(projectid: String): [Document]

  # получить документ по id
  documentitem(id: String!) : Document
#   query ($id: String) {
#   documentitem(id: $id) {
#     document
#   }
# }

  # получит список проектов пользователя
  projectlist(user: String!): [Project]
  # получит проект по id
  projectitem(id: String!): Project

  # получит список ревизий проекта
  revisionlist(id: String!): [Project]
  # получит ревизию проекта по id
  revisionitem(id: String!): Project

  # получить список уведомлений по id пользователя получателя
  notificationlist(user:String): [Notification]
}

type Mutation {

  # создание пользователя
  createuser(
  id: String,
  firstName: String!,
  lastName: String!,
  patronymic: String!,
  birthdate: String!,
  position:String!,
  phone: String!,
  email: String!,
  signature: String!,
): User,
# mutation ($firstname: String, $lastname: String, $patronymic: String, $birthdate: String, $position: String, $phone: String, $email: String, $signature: String) {
#   createuser(firstname: $firstname, lastname: $lastname, patronymic: $patronymic, birthdate: $birthdate, position: $position, phone: $phone, email: $email, signature: $signature) {
#     User
# }

  # обновление пользователя
  updateuser(
  id: String,
  firstName: String,
  lastName: String,
  patronymic: String,
  birthdate: String,
  phone: String,
  email: String,
  signature: String,
  position:String,
): User,
# mutation ($id: String!, $firstname: String, $lastname: String, $patronymic: String, $birthdate: String, $position: String, $phone: String, $email: String, $signature: String, $role: String) {
#   updateuser(id: $id, role: $role, firstname: $firstname, lastname: $lastname, patronymic: $patronymic, birthdate: $birthdate, position: $position, phone: $phone, email: $email, signature: $signature) {
#     User
# }


  # смена пароля пользователя
  changepassword(user: String!, password: String!, newPassword: String!, confirmNewPassword: String!): User,
#   mutation ($newpassword: String!, $password: String!, $user: String) {
#   changepassword(newpassword: $newpassword, password: $password, user: $user) {
#     user 
#   }
# }

  # смена пароля пользователя
  userregistration(email: String!, password: String!, retryPas: String): User,
#   mutation ($email: String!, $key: String!, $password: String!) {
#   confirmeduser(email: $email, key: $key, password: $password) {
#     User
# }


  # создание ячейки,
  # name
  # prevcell - id предыдущей ячейки
  # parent - id родительской ячейки
  # content - содержимое ячейки
  createcell(name:String,prevcell:String, parent: String, content: String): Cell
  # mutation ($children: String, $comments: [String], $content: String!, $isHead: Boolean, $name: String, $nextcell: String, $parent: String, $prevcell: String, $verify: String) {
#   createcell(children: $children, comments: $comments, isHead: $isHead, name: $name, nextcell: $nextcell, parent: $parent, prevcell: $prevcell, verify: $verify, content: $content) {
#     cell
#   }
# }

  # обновление ячейки
  # id - mongoid ячейки
  # name - имя ячейки
  # content - html содержимое ячейки
  # prevcell - id предыдущей ячейки
  # nextcell - id следующей ячейки
  updatecell(id: String!, name: String, content: String, prevcell: String, nextcell: String): Cell
  # mutation ($children: String, $comments: [String], $content: String, $isHead: Boolean, $name: String, $nextcell: String, $parent: String, $prevcell: String, $verify: String, $id: String!) {
#   updatecell(id: $id, children: $children, comments: $comments, isHead: $isHead, name: $name, nextcell: $nextcell, parent: $parent, prevcell: $prevcell, verify: $verify, content: $content) {
#     cell
#   }
# }

  # создание комментария
  # sender - id отправителя комментария
  # message - сообщение комментария
  # cell - id комментаруемой ячейки
  createcomment(sender: String!, message: String!, cell: String!): Comment
  #   mutation ($sender: String!, $message: String!, $cell: String!) {
#   createcomment(sender: $sender, message: $message, cell: $cell) {
#     comment
# }
# }

  # обновление комментария
  # id - mongoid комментария
  # message - сообщение комментария
  # isdelete - удален ли комментарий из ячейки
  updatecomment(id: String!,isdelete: Boolean, message: String): Comment
  #   mutation ($sender: String, $id: String!, $isdelete: Boolean, $message: String, $cell: String) {
#   updatecomment(sender: $sender, id: $id, message: $message, isdelete: $isdelete, cell: $cell) {
#     comment
# }
# }

  # создание документа
  createdocument(name: String, cell: String): Document
#   mutation ($approvalstatus: String, $name: String!, $cell: String!) {
#   createdocument(approvalstatus: $approvalstatus, name: $name, cell: $cell) {
#     document
#   }
# }


  # обновление документа
  updatedocument(name: String, cell: String!): Document
#   mutation ($approvalstatus: String, $cell: String, $id: String!, $name: String) {
#   updatedocument(approvalstatus: $approvalstatus, cell: $cell, id: $id, name: $name) {
#     document
#   }
# }


  # создание проекта
  # name - название проекта
  # document - id документа проекта, это (шаблон)(хз под вопросом)
  createproject(name:String!, document: String!): Project

  updateproject(id: String, name: String,partner: String, okancode: String, customercode: String, partners: [String]): Project
  # создание ревизии документа
  # id - id документа для которого должна быть создана ревизия
  createrevision(id: String!): Document

  # метод для связывания ячеек
  # target - id ячейки с которой нужно создать связь, по сути дочерняя ячейка
  # parent - id ячейки которая образует связь, ячейка родитель
  bindingcell(target: [String]!, parent: String!): Cell
  # mutation ($target: [String]!, $parent: String!) {
#   bindingcell(target: $target, parent: $parent) {
#     cell {
#       id
#     }
#   }
# }

  # освобождает ячейки из пулла, не менняя из значения.
  unbindingcell(cell: [String]!): Cell
  # mutation ($cell: String!) {
#   unbindingcell(cell: $cell) {
#     cell {
#       id
#     }
#   }
# }

  # Активация пользователя, на вход получаем логин пользователя и пароль
  activateuser(user:String, password: String): User
# mutation ($email: String!, $key: String!, $password: String!) {
#   confirmeduser(email: $email, key: $key, password: $password) {
#     user
#   }
# }

  # user - принимает login пользователя
  recoverypass(user:String): User
}
