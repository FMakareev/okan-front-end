type Comment {
  # mongoid
  id: String!
  # тест комментария
  message: String
  # отправитель
  sender: User
  # id сущности к которой привязан комментарий
  cell: String
  # id документа, при создании комментария id документа добавляется автоматически
  document: String
  # дата создания комментария, в формате ISO
  createdate: String
  # дата обновления комментария, в формате ISO
  updatedate: String
  # удален ли комментарий (?)
  isdelete: Boolean
}
# https://okan.code-artel.com/graphql :
# comment {
  # cell: ID
  # createdat: DateTime
  # id: ID
  # isdelete: Boolean
  # message: String
  # sender: User
  # updatedat: DateTime
# }

type Block {
  # mongoid
  id: String!
  # заголовок
  name: String
  # html контент фроалы
  content: String
  # номер ячейки в документе
  number: Int
  # тип контента: таблица, картинка, текст
  contenttype: String
}
# https://okan.code-artel.com/graphql :
# Block{
#   content: String
#   contenttype: String
#   id: ID
#   name: String
#   number: Int
# }

type Cell {
  # mongoid
  id: String!
  # имя раздела
  name: String!
  # статус проверки ячейки
  verify: String
  # id предыдущей ячейки, оно равно id в свойстве parent если ячейка дочерняя другой ячейке и первая по счету
  prevcell: Cell
  # id следующей ячейки
  nextcell: Cell
  # id родительской ячейки
  parent: Cell
  # id первой дочерней ячейки, от этой ячейки далее строятся запросы на получение всех дочерних ячеек
  childcell: Cell
  # говорит нам является ли ячейка названием раздела, а не блоком с контентом,
  # если равно false то id в поле childCell указывает не на дочернюю категорию, а на дочерний блок с контентом
  isHead: Boolean
  # контент раздела
  content: Block
  # массив комментариев ячейки
  comments: [Comment]
  # массив связанных объектов
  pull: [Cell]
  # null, на согласовании, согласован, не согласован
  approvalstatus: String
}
# https://okan.code-artel.com/graphql :
# cell {
#   comments: [Comment]
#   content: Block
#   id: ID
#   isHead: Boolean
#   name: String
#   nextcell: Cell
#   parent: Cell
#   prevcell: Cell
#   verify: String
#   pull: [Cell]
# }


type Document {
  # mongoid
  id: String
  # название шаблона
  name: String
  # id корневого элемента от которого строится граф разделов
  childcell: Cell
  # null, на согласовании, согласован, не согласован
  approvalstatus: String
  partners: [User]
  okancode: String
  # код документа заказчика
  customercode: String
}
# https://okan.code-artel.com/graphql :
# Document{
#   approvalstatus: String
#   cell: Cell
#   childcell: Cell
#   customercode: String
#   documentnumber: String
#   id: ID
#   name: String
#   okancode: String
#   partners: [User]
# }

type Project {
  # mongoid
  id: String
  # название проекта
  name: String
  # пользователь создавший проект
  author: User
  # список участников
  partners: [User]
  # код документа ОКАН
  okancode: String
  # код документа заказчика
  customercode: String
  # mongoid документа проекта
  documents: [Document]
  # дата создания
  createdate: String
  # дата обновления
  updatedate: String
  # массив ревизий проекта
  revisions: [String]
  # archive or working
  status: String
}
# https://okan.code-artel.com/graphql :
# Project{
#   author: User
#   createdate: DateTime
#   customercode: String
#   documents: [Document]
#   id: ID
#   name: String
#   okancode: String
#   partners: [User]
#   status: String
#   updatedate: DateTime
#   revisions: [Project]
# }

type Resolver {
  id: ID
  module: String
  name: String
}
# https://okan.code-artel.com/graphql :  Также

type Role {
  description: String
  id: ID
  name: String
  resolvers: [Resolver]
}
# https://okan.code-artel.com/graphql : Также

type Marker {
  answer: Boolean
  id: ID
}

type User {
  # mongoid
  id: ID
  # имя пользователя
  firstname: String
  # фамилия пользователя
  lastname: String
  # отчество пользователя
  patronymic: String
  # дата рождения пользователя
  birthdate: String
  # Должность
  position: String
  # номер телефона пользователя
  phone: String
  # адрес ел.почты пользователя
  email: String
  # подпись пользователя
  signature: String
  # роль пользователя
  role: Role
}
# https://okan.code-artel.com/graphql :
# User{
#   birthdate: String
#   email: String
#   firstname: String
#   id: ID
#   lastname: String
#   patronymic: String
#   phone: String
#   position: String
#   role: Role
#   signature: String
# }

type Notification {
  # mongoid
  id: String,
  # комментарий, содержит объект комментариф к ячейке
  comment: Comment,
  # сообщение уведомления
  message: String
  # отправитель
  sender: User
  # получатель
  recipient: User
  # дата создания в ISO
  createat: String
}
# https://okan.code-artel.com/graphql :
# Notification{
#   cell: Cell
#   comment: Comment
#   createat: DateTime
#   id: ID
#   message: String
#   recipient: User
#   sender: User
# }




type Query {

# список пользователей
# https://okan.code-artel.com/graphql :
  userlist: [User],
  # query{
  #   userlist{
  #     user
  #   }
  # }

# получить пользователя по id
  # useritem(id: String!): User,
  # https://okan.code-artel.com/graphql :
  useritem(id: String): User,
  # query ($id: String) {
  #   useritem(id: $id) {
  #     id
  #   }
  # }

# Получить текущего авторизованного пользователя
# https://okan.code-artel.com/graphql :
  currentuseritem: User,
  # {
  #   currentuseritem {
  #     id
  #   }
  # }

# получить пользователя по адресу эл.почты
# https://okan.code-artel.com/graphql :
  useremailitem(email: String!): User,
  # Такого квери нет

# запросить ячейку по id
  # cellitem(id: String!): Cell
  # https://okan.code-artel.com/graphql :
  cellitem(id: String): Cell,
  # query ($id: String) {
  #   cellitem(id: $id) {
  #     id
  #   }
  # }
  celllist(parent: String): [Cell]


# метод возвращает тру если хотябы у одной дочки были изменения
  # cell_marker(cell: String): Boolean
  # https://okan.code-artel.com/graphql :
  cellMarker(id: String): Marker,
  # query ($id: String) {
  #   cellMarker(id: $id) {
  #     id
  #   }
  # }

# получить список документов
  # projectid - id проекта по которому запрашиваются документы
  # documentlist(projectid: String): [Document]
  # https://okan.code-artel.com/graphql :
  documentlist(approvalstatus: String, author: String!): [Document],
  # query ($approvalstatus: String, $author: String!) {
  #   documentlist(approvalstatus: $approvalstatus, author: $author) {
  #     id
  #   }
  # }

# получить документ по id
  # documentitem(id: String!) : Document
  # https://okan.code-artel.com/graphql :
  documentitem(id: String) : Document,
  # query ($id: String) {
  #   documentitem(id: $id) {
  #     id
  #   }
  # }

# получить список проектов пользователя
  # projectlist(user: String!): [Project]
  # https://okan.code-artel.com/graphql :
  projectList: [Project],
  # {
  #   projectList {
  #     id
  #   }
  # }

# получить проект по id
# https://okan.code-artel.com/graphql :
  projectitem(id: String!): Project,
  # query ($id: String!) {
  #   projectitem(id: $id) {
  #     id
  #   }
  # }


# получить список ревизий проекта
  # revisionlist(id: String!): [Project]
  # https://okan.code-artel.com/graphql :
  revisionList(id: String!): [Project],
  # query ($id: String!) {
  #   revisionList(id: $id) {
  #     id
  #   }
  # }

# получить ревизию проекта по id
  # revisionitem(id: String!): Project
  # https://okan.code-artel.com/graphql :
  revisionItem(id: String!): Project,
  # query ($id: String!) {
  #   revisionItem(id: $id) {
  #     id
  #   }
  # }

# получить список уведомлений по id пользователя получателя
  # notificationlist(user:String): [Notification]
  # https://okan.code-artel.com/graphql :
  notificationslist(user:String): [Notification],
  # query ($user: String) {
  #   notificationslist(user: $user) {
  #   id
  # }
}

type Mutation {

# создание пользователя
  # createuser(
  #   id: String,
  #   firstName: String!,
  #   lastName: String!,
  #   patronymic: String!,
  #   birthdate: String!,
  #   position:String!,
  #   phone: String!,
  #   email: String!,
  #   signature: String!,
  # ): User,
  # https://okan.code-artel.com/graphql :
  createuser (
    birthdate: String,
    email: String,
    firstname: String,
    lastname: String,
    patronymic: String,
    phone: String,
    position: String,
    signature: String) : User,


# обновление пользователя
  # updateuser(
  #   id: String,
  #   firstName: String,
  #   lastName: String,
  #   patronymic: String,
  #   birthdate: String,
  #   phone: String,
  #   email: String,
  #   signature: String,
  #   position:String,
  # ): User,
# https://okan.code-artel.com/graphql :
  updateuser (
    birthdate: String,
    email: String,
    firstname: String,
    id: String!,
    lastname: String,
    patronymic: String,
    phone: String,
    position: String,
    role: String,
    signature: String) : User,

# смена пароля пользователя
  # changepassword(user: String!, password: String!, newPassword: String!, confirmNewPassword: String!): User,
  # https://okan.code-artel.com/graphql :
  changepassword(newpassword: String!, password: String!, user: String) : User,

# # смена пароля пользователя
#   # userregistration(email: String!, password: String!, retryPas: String): User,
#   # https://okan.code-artel.com/graphql :
#   confirmeduser (email: String!, key: String!, password: String!) : User,

# создание ячейки,
  # name
  # prevcell - id предыдущей ячейки
  # parent - id родительской ячейки
  # content - содержимое ячейки
  # createcell(name:String,prevcell:String, parent: String, content: String): Cell
  # https://okan.code-artel.com/graphql :
  createcell (
    children: String,
    comments: [String],
    content: String!,
    isHead: Boolean,
    name: String,
    nextcell: String,
    parent: String,
    prevcell: String,
    verify: String) : Cell,

# обновление ячейки
  # id - mongoid ячейки
  # name - имя ячейки
  # content - html содержимое ячейки
  # prevcell - id предыдущей ячейки
  # nextcell - id следующей ячейки
  # updatecell(id: String!, name: String, content: String, prevcell: String, nextcell: String): Cell
  # https://okan.code-artel.com/graphql :
  updatecell (
    children: String,
    comments: [String],
    content: String,
    contentname: String,
    contenttype: String,
    id: String!,
    isHead: Boolean,
    name: String,
    nextcell: String,
    parent: String,
    prevcell: String,
    verify: String) : Cell,

# создание комментария
  # sender - id отправителя комментария
  # message - сообщение комментария
  # cell - id комментаруемой ячейки
  # createcomment(sender: String!, message: String!, cell: String!): Comment
  # https://okan.code-artel.com/graphql :
  createcomment (sender: String!, message: String!, cell: String!) : Comment,

# обновление комментария
  # id - mongoid комментария
  # message - сообщение комментария
  # isdelete - удален ли комментарий из ячейки
  # updatecomment(id: String!,isdelete: Boolean, message: String): Comment
  # https://okan.code-artel.com/graphql :
  updatecomment (sender: String, id: String!, isdelete: Boolean, message: String) : Comment,

# создание документа
  # createdocument(name: String, cell: String): Document
  # https://okan.code-artel.com/graphql :
  createdocument (
    approvalstatus: String,
    childcell: String,
    customercode: String,
    documentnumber: String,
    name: String!,
    okancode: String,
    partners: [String]!) : Document,

# обновление документа
  # updatedocument(name: String, cell: String!): Document
  # https://okan.code-artel.com/graphql :
  updatedocument (
    approvalstatus: String,
    childcell: String,
    customercode: String,
    documentnumber: String,
    id: String!,
    name: String!,
    okancode: String,
    partners: [String]) : Document,

# создание проекта
  # name - название проекта
  # document - id документа проекта, это (шаблон)(хз под вопросом)
  # createproject(projectname:String!, document: String!): Project
  # https://okan.code-artel.com/graphql :
  createproject (
    author: String,
    customercode: String,
    documents: [String],
    name: String!,
    okancode: String,
    partners: [String],
    revisions: [String],
    status: String) : Project,

# Обновление проекта
  # updateproject(id: String, name: String,partner: String, okancode: String, customercode: String, partners: [String]): Project
  # https://okan.code-artel.com/graphql :
  updateproject (
    author: String,
    customercode: String,
    documents: [String],
    id: String!, name: String!,
    okancode: String,
    partners: [String],
    revisions: [String],
    status: String) : Project,

# создание ревизии документа
  # id - id документа для которого должна быть создана ревизия
  # https://okan.code-artel.com/graphql :
  createrevision(id: String!): Document,

# метод для связывания ячеек
  # target - id ячейки с которой нужно создать связь, по сути дочерняя ячейка
  # parent - id ячейки которая образует связь, ячейка родитель
  # https://okan.code-artel.com/graphql :
  bindingcell(target: [String]!, parent: String!): Cell,

# освобождает ячейки из пулла, не менняя из значения.
  # unbindingcell(cell: String!): Cell
  # https://okan.code-artel.com/graphql :
  unbindingcell (cell: String!) : Cell,

# Активация пользователя, на вход получаем логин пользователя и пароль
  # activateuser(user:String, password: String): User
  # https://okan.code-artel.com/graphql :
  confirmeduser (email: String!, key: String!, password: String!) : User,

# user - принимает login пользователя
  # recoverypass(user:String): User
  # https://okan.code-artel.com/graphql :
  recoverypassword (email: String!) : User,
}
