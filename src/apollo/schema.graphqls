type Comment {
  id: ID!                     # mongoid
  message: String             # тест комментария
  sender: User                # отправитель
  parent: String              # id сущности к которой привязан комментарий
  createdat: String         # дата создания комментария, в формате ISO
  updatedat: String         # дата обновления комментария, в формате ISO
  isdelete: Boolean            # удален ли комментарий (?)
}
type Cell {
  # mongoid
  id: ID!
  # имя раздела
  name: String!
  # статус проверки ячейки
  verify: String!
  # id предыдущей ячейки, оно равно id в свойстве parent если ячейка дочерняя другой ячейке и первая по счету
  prevcell: String
  # id следующей ячейки
  nextcell: String
  # id родительской ячейки
  parent: String
  # id первой дочерней ячейки, от этой ячейки далее строятся запросы на получение всех дочерних ячеек
  childcell: String
  # говорит нам является ли ячейка названием раздела, а не блоком с контентом,
  # если равно false то id в поле childCell указывает не на дочернюю категорию, а на дочерний блок с контентом
  is_head: Boolean
  # контент раздела, по сути html строка
  content: String
  # массив комментариев ячейки
  comments: [Comment]
  # массив связанных объектов
  pull: [Cell]
}

type Document{
  id: ID                      # mongoid
  name: String                # название шаблона
  cell: String                # id корневого элемента от которого строится граф разделов
}

type Project {
  id: ID                      # mongoid
  name: String                # название проекта
  author: User                # пользователь создавший проект
  partners: [User]            # список участников
  okancode: String            # код документа ОКАН
  customercode: String        # код документа заказчика
  documents: [String]         # mongoid документа проекта
  createdate: String        # дата создания
  updatedate: String        # дата обновления
  revisions: [Project]        # массив ревизий проекта
  status: String              # archive or working
  approvalstatus: String      # null, на согласовании, согласован, не согласован
}

type Role {
  id: ID                      # mongoid
  name: String!               # название роли
}

type User {
  id: String                      # mongoid
  firstname: String           # имя пользователя
  lastname: String            # фамилия пользователя
  patronymic: String          # отчество пользователя
  birthdate: String           # дата рождения пользователя
  phone: String               # номер телефона пользователя
  email: String               # адрес ел.почты пользователя
  signature: String           # подпись пользователя
  role: Role                  # роль пользователя
}

type Query {

  # список пользователей
  userlist: [User],

  # получить пользователя по id
  useritem(id: ID!): User,

  # получить пользователя по адресу эл.почты
  useremailitem(email: String!): User,

  # запросить ячейку по id
  cellitem(id: ID!): Cell

  # получить список документов
  documentlist: [Document]

  # получить документ по id
  documentitem(id: ID!) : Document

  # получит список проектов пользователя
  projectlist(user: ID!): [Project]
  # получит проект по id
  projectitem(id: ID!): Project

  # получит список ревизий проекта
  revisionlist(id: ID!): [Project]
  # получит ревизию проекта по id
  revisionitem(id: ID!): Project

}

type Mutation {

  # создание пользователя
  createuser(
  id: String,
  firstName: String!,
  lastName: String!,
  patronymic: String!,
  birthdate: String!,
  position:String!,
  phone: String!,
  email: String!,
  signature: String!,
): User,

  # обновление пользователя
  updateuser(
  id: String,
  firstName: String,
  lastName: String,
  patronymic: String,
  birthdate: String,
  phone: String,
  email: String,
  signature: String,
  position:String,
): User,

  # смена пароля пользователя
  changepassword(user: ID!, password: String!, newPassword: String!, confirmNewPassword: String!): User,

  # смена пароля пользователя
  userregistration(email: String!, password: String!, retryPas: String): User,

  # создание ячейки,
  # prevcell - id предыдущей ячейки
  # content - содержимое ячейки
  createcell(name:String!,prevcell:ID, content: String): Cell

  # обновление ячейки
  # id - mongoid ячейки
  # content - html содержимое ячейки
  # prevcell - id предыдущей ячейки
  # nextcell - id следующей ячейки
  updatecell(id: String!, content: String, prevcell: ID, nextcell: String): Cell

  # создание комментария
  # sender - id отправителя комментария
  # message - сообщение комментария
  # cell - id комментаруемой ячейки
  createcomment(sender: ID!, message: String!, cell: ID!): Comment

  # обновление комментария
  # id - mongoid комментария
  # message - сообщение комментария
  # isdelete - удален ли комментарий из ячейки
  updatecomment(id: ID!,isdelete: Boolean, message: String): Comment


  createdocument(name: String, cell: String!): Document
  updatedocument(name: String, cell: String!): Document

  # создание проекта
  # name - название проекта
  # document - id документа проекта, это (шаблон)(хз под вопросом)
  createproject(name:String!, document: ID!): Project

  updateproject(id: String, name: String,partner: String, okancode: String, customercode: String, partners: [String]): Project

  # метод для связывания ячеек
  # target - id ячейки с которой нужно создать связь, по сути дочерняя ячейка
  # parent - id ячейки которая образует связь, ячейка родитель
  bindingcell(target: [ID]!, parent: ID!): Cell

  # освобождает ячейки из пулла, не менняя из значения.
  unbindingcell(cell: [ID]!): Cell



}
