6448b7fc3593a02331532b5af2aeecb3
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.DayPickerBase = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledSystem = require("styled-system");

var _ru = require("date-fns/locale/ru");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _reactAsyncComponent = require("react-async-component");

var _FormPropTypes = require("../../propTypes/Forms/FormPropTypes");

require("../../assets/style/react-datepicker-big.css");

var _Box = require("@lib/ui/Box/Box");

var _InputVariant = require("@lib/styles/variants/InputVariant");

var _InputSize = require("@lib/styles/variants/InputSize");

/** PropTypes */

/** Css */
var inputSize = (0, _styledSystem.variant)({
  key: 'variant.inputSize',
  prop: 'size'
});
var inputVariant = (0, _styledSystem.variant)({
  key: 'variant.inputVariant',
  prop: 'variant'
});

var DatePicker = function DatePicker() {
  return (0, _reactAsyncComponent.asyncComponent)({
    resolve: function resolve() {
      return import(
      /* webpackChunkName: 'chunk-name-react-datepicker'  */
      'react-datepicker');
    },
    ErrorComponent: function ErrorComponent(_ref) {
      var error = _ref.error;
      return _react["default"].createElement("div", null, error.message);
    },
    LoadingComponent: function LoadingComponent(_ref2) {
      var variant = _ref2.variant,
          size = _ref2.size;
      return _react["default"].createElement(_Box.Box, (0, _extends2["default"])({
        border: '1px solid #848484'
      }, _InputVariant.InputVariant[variant], _InputSize.InputSize[size]), "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430...");
    },
    serverMode: 'defer'
  });
};

var DayPickerBase =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(DayPickerBase, _Component);

  function DayPickerBase(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, DayPickerBase);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(DayPickerBase).call(this, props));
    _this.state = _this.initialState;
    _this.onChangeDatePicker = _this.onChangeDatePicker.bind((0, _assertThisInitialized2["default"])(_this));
    /** @desc это костыль нужен для того чтобы асинхронная загрузка компонентов работала нормально, потому что при
     * наличии двух одинаковых компонентов появившихся на стриницы +- в одно время рендерился только первый компонент,
     * а второй зависал на загрузке и отвисал только после ручного перерендера.
     * Работает так, для каждого инстанса компонента DayPickerBase мы создаем свой инстанс с асинхронной загрузкой датапикера
     * благодаря этому для каждого инстанса DayPickerBase загрузка компонента происходит по отдельности
     * */

    _this.DatePicker = DatePicker();
    _this.DatePickerStyled = (0, _styledComponents["default"])(_this.DatePicker).withConfig({
      componentId: "tbk8c7-0"
    })(["", ";", ";"], inputSize, inputVariant);
    return _this;
  }

  (0, _createClass2["default"])(DayPickerBase, [{
    key: "onChangeDatePicker",

    /**
     * @param {string} date
     * */
    value: function onChangeDatePicker(date) {
      try {
        console.log(date);
        this.setState({
          startDate: new Date(date).toISOString()
        });
        var onChange = this.props.input.onChange;
        onChange(new Date(date).toISOString());
      } catch (error) {
        console.error('Error : ', error);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          placeholder = _this$props.placeholder,
          input = _this$props.input;
      var startDate = this.state.startDate;
      return _react["default"].createElement(this.DatePickerStyled, (0, _extends2["default"])({
        selected: startDate,
        onChange: this.onChangeDatePicker,
        peekNextMonth: true,
        showMonthDropdown: true,
        showYearDropdown: true,
        dropdownMode: "select",
        placeholderText: placeholder,
        dateFormat: "dd / MM / yyyy",
        input: input,
        locale: 'ru',
        popperPlacement: "top-end",
        popperModifiers: {
          offset: {
            enabled: true,
            offset: '-130px, 0px'
          }
        }
      }, this.props));
    }
  }, {
    key: "initialState",
    get: function get() {
      var input = this.props.input;
      return {
        startDate: input.value
      };
    }
  }]);
  return DayPickerBase;
}(_react.Component);

exports.DayPickerBase = DayPickerBase;
(0, _defineProperty2["default"])(DayPickerBase, "propTypes", {
  /**placeholder */
  placeholder: _propTypes["default"].string
  /**input */
  // ...fieldInputPropTypes,

});
(0, _defineProperty2["default"])(DayPickerBase, "defaultProps", {
  input: {
    onChange: function onChange() {
      return null;
    },
    value: null
  },
  size: 'md',
  variant: 'default'
});
var _default = DayPickerBase;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,