{"version":3,"sources":["SelectBase.js"],"names":["getStyleVariant","theme","themeKey","component","has","call","e","console","error","SelectStyles","control","style","props","padding","border","minHeight","InputVariant","selectProps","variant","isFocused","menuIsOpen","borderRadius","borderBottom","selectContainer","valueContainer","dropdownIndicator","menu","margin","option","width","textAlign","isSelected","backgroundColor","color","indicatorSeparator","display","singleValue","top","left","transform","DropdownIndicator","SelectBase","nextProps","value","input","valueKey","options","setState","selectedOption","getSelectedValueFromOptions","forEach","item","Object","keys","length","onChange","state","initialState","nextState","isLoading","placeholder","prevProps","components","disabled","labelKey","optionsFilter","rest","name","Component","PropTypes","object","isRequired","oneOfType","array","bool","string","selectValue","loading","defaultOptions","func","mods"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Select, { components } from 'react-select';\r\nimport DeepEqual from 'fast-deep-equal';\r\n\r\n/** Component */\r\nimport { SvgTriangle } from '@lib/ui/Icons/SvgTriangle';\r\nimport { Text } from '@lib/ui/Text/Text';\r\nimport { InputVariant } from '../../styles/variants/InputVariant';\r\nimport has from '../../utils/has';\r\n\r\n/**\r\n * @param {object} theme - объект варианта из темы, импортируем напрямую из папки styles/variant\r\n * @param {string} themeKey - Название варианта который хотим использовать\r\n * @param {string} component - название компонета react-select который хотим стилизовать\r\n * @return {object} возвращает объект с css стилями\r\n * */\r\nconst getStyleVariant = (theme, themeKey, component) => {\r\n  try {\r\n    if (has.call(theme, themeKey)) {\r\n      if (has.call(theme[themeKey], 'rs') && has.call(theme[themeKey]['rs'], component)) {\r\n        return theme[themeKey]['rs'][component];\r\n      }\r\n    }\r\n    return {};\r\n  } catch (e) {\r\n    console.error('Error getStyleVariant: ', e);\r\n    return {};\r\n  }\r\n};\r\n\r\nexport const SelectStyles = {\r\n  control: (style, props) => {\r\n    return {\r\n      ...style,\r\n      padding: '0 0 0 10px',\r\n      border: '1px solid #848484',\r\n      minHeight: '30px',\r\n      ...getStyleVariant(InputVariant, props.selectProps.variant, 'control'),\r\n      ':hover': {\r\n        // border: \"none\",\r\n        // boxShadow: \"none\"\r\n      },\r\n      ...(props.isFocused\r\n        ? {\r\n            // border: \"none\",\r\n            // boxShadow: \"none\"\r\n          }\r\n        : {}),\r\n      ...(props.menuIsOpen\r\n        ? {\r\n            borderRadius: '5px 5px 0 0',\r\n            borderBottom: 'none',\r\n          }\r\n        : {}),\r\n    };\r\n  },\r\n  selectContainer: (style, props) => {\r\n    return {\r\n      ...style,\r\n      padding: 0,\r\n      ...getStyleVariant(InputVariant, props.selectProps.variant, 'selectContainer'),\r\n    };\r\n  },\r\n  valueContainer: (style, props) => {\r\n    return {\r\n      ...style,\r\n      padding: 0,\r\n      ...getStyleVariant(InputVariant, props.selectProps.variant, 'valueContainer'),\r\n    };\r\n  },\r\n  dropdownIndicator: (style, props) => {\r\n    return {\r\n      ...style,\r\n      padding: '0 10px',\r\n      ...getStyleVariant(InputVariant, props.selectProps.variant, 'dropdownIndicator'),\r\n    };\r\n  },\r\n  menu: (style, props) => {\r\n    return {\r\n      ...style,\r\n      margin: 0,\r\n      border: '1px solid #848484',\r\n      borderRadius: '0 0 5px 5px',\r\n      ...getStyleVariant(InputVariant, props.selectProps.variant, 'menu'),\r\n    };\r\n  },\r\n  option: (style, props) => {\r\n    return {\r\n      ...style,\r\n      width: 'calc(100% - 20px)',\r\n      margin: '0 10px',\r\n      borderBottom: '1px solid #00649C',\r\n      textAlign: 'center',\r\n      ...(props.isSelected\r\n        ? {\r\n            backgroundColor: 'rgba(0,127,175,.2)',\r\n            color: '#333333',\r\n          }\r\n        : null),\r\n      ...getStyleVariant(InputVariant, props.selectProps.variant, 'option'),\r\n    };\r\n  },\r\n  indicatorSeparator: (style, props) => {\r\n    return {\r\n      ...style,\r\n      display: 'none',\r\n      ...getStyleVariant(InputVariant, props.selectProps.variant, 'indicatorSeparator'),\r\n    };\r\n  },\r\n  singleValue: (style, props) => {\r\n    return {\r\n      ...style,\r\n      top: '50%',\r\n      left: '50%',\r\n      transform: 'translate(-50%, -50%)',\r\n      '-webkit-transform': 'translate(-50%, -50%)',\r\n      '-ms-transform': 'translate(-50%, -50%)',\r\n      ...getStyleVariant(InputVariant, props.selectProps.variant, 'singleValue'),\r\n    };\r\n  },\r\n};\r\n\r\nconst DropdownIndicator = props => {\r\n  return (\r\n    <components.DropdownIndicator {...props}>\r\n      <Text\r\n        style={{\r\n          transform: props.isFocused ? 'rotate(90deg)' : 'rotate(0)',\r\n        }}\r\n        fill={'#333333'}>\r\n        <SvgTriangle />\r\n      </Text>\r\n    </components.DropdownIndicator>\r\n  );\r\n};\r\n\r\n/**\r\n * Компонент селекта (SelectBase)\r\n * @example ./SelectBase.example.md\r\n */\r\n\r\nexport class SelectBase extends Component {\r\n  static propTypes = {\r\n    /** input */\r\n    input: PropTypes.object.isRequired,\r\n    options: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]),\r\n    labelKey: PropTypes.string /**  value key input */,\r\n    valueKey: PropTypes.string /** input value seelct */,\r\n    selectValue: PropTypes.string /** loading */,\r\n    loading: PropTypes.bool,\r\n    defaultOptions: PropTypes.object,\r\n    placeholder: PropTypes.string,\r\n    optionsFilter: PropTypes.func,\r\n  };\r\n\r\n  static defaultProps = {\r\n    mods: false,\r\n    options: [],\r\n    placeholder: '',\r\n    optionsFilter: options => options,\r\n  }; // valueKey: 'id', // labelKey: 'name',\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.initialState;\r\n  }\r\n\r\n  //перестраиваются элементы в вирт.доме\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    const {\r\n      input: { value },\r\n      isLoading,\r\n      options,\r\n    } = this.props;\r\n    const { selectedOption } = this.state;\r\n\r\n    if (\r\n      nextProps.input.value !== this.props.value ||\r\n      nextProps.placeholder !== this.props.placeholder ||\r\n      !DeepEqual(nextProps.options, options) ||\r\n      nextProps.isLoading !== isLoading ||\r\n      selectedOption !== nextState.selectedOption\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //Когда будет изменено вирт. дом (устаревший)\r\n  componentWillReceiveProps = nextProps => {\r\n    const {\r\n      input: { value },\r\n      valueKey,\r\n      options,\r\n    } = nextProps;\r\n\r\n    if (\r\n      nextProps.input.value !== this.props.input.value ||\r\n      !DeepEqual(nextProps.options, this.props.options)\r\n    ) {\r\n      this.setState({\r\n        selectedOption: this.getSelectedValueFromOptions(options, value, valueKey),\r\n      });\r\n    }\r\n  };\r\n\r\n  // Доступ к предыдущим пропсам\r\n  componentDidUpdate(prevProps) {\r\n    const {\r\n      // then options is update - we must update selectedOption at state\r\n      input: { value },\r\n      valueKey,\r\n      options,\r\n    } = this.props;\r\n    if (!DeepEqual(prevProps.options, options)) {\r\n      this.setState({\r\n        selectedOption: this.getSelectedValueFromOptions(options, value, valueKey),\r\n      });\r\n    }\r\n  }\r\n\r\n  get initialState() {\r\n    const {\r\n      input: { value },\r\n      valueKey,\r\n      options,\r\n    } = this.props;\r\n\r\n    if (value) {\r\n      return { selectedOption: this.getSelectedValueFromOptions(options, value, valueKey) };\r\n    }\r\n    return { selectedOption: null };\r\n  }\r\n\r\n  getSelectedValueFromOptions = (options, value, valueKey) => {\r\n    let selectedOption = {};\r\n    if (options) {\r\n      options.forEach(item => {\r\n        if (item[valueKey] === value) {\r\n          selectedOption = item;\r\n        }\r\n      });\r\n    }\r\n    if (!Object.keys(selectedOption).length) {\r\n      // if we return empty object (it means no selected value), placeholders not working\r\n      selectedOption = null;\r\n    }\r\n    return selectedOption;\r\n  };\r\n\r\n  onChange = selectedOption => {\r\n    const { input, valueKey } = this.props;\r\n    this.setState(\r\n      () => ({ selectedOption }),\r\n      () => {\r\n        input.onChange(this.state.selectedOption ? this.state.selectedOption[valueKey] : null);\r\n      },\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      input,\r\n      options,\r\n      components,\r\n      disabled,\r\n      labelKey,\r\n      valueKey,\r\n      placeholder,\r\n      isLoading,\r\n      optionsFilter,\r\n      ...rest\r\n    } = this.props;\r\n    const { selectedOption } = this.state;\r\n\r\n    return (\r\n      <Select\r\n        value={selectedOption}\r\n        name={input.name}\r\n        options={optionsFilter(options)}\r\n        isLoading={isLoading}\r\n        onChange={this.onChange}\r\n        disabled={disabled}\r\n        placeholder={placeholder}\r\n        blurInputOnSelect={true}\r\n        getOptionLabel={option => option[labelKey]}\r\n        getOptionValue={option => option[valueKey]}\r\n        styles={SelectStyles}\r\n        components={{ DropdownIndicator, ...components }}\r\n        {...rest}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectBase;\r\n"]}