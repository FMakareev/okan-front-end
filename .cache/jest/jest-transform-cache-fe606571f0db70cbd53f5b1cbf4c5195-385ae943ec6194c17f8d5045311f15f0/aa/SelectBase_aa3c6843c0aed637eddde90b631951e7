518b59ecaa077e3487e8bb1bf1068fed
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SelectBase = exports.SelectStyles = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactSelect = _interopRequireWildcard(require("react-select"));

var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));

var _SvgTriangle = require("@lib/ui/Icons/SvgTriangle");

var _Text = require("@lib/ui/Text/Text");

var _InputVariant = require("../../styles/variants/InputVariant");

var _has = _interopRequireDefault(require("../../utils/has"));

/** Component */

/**
 * @param {object} theme - объект варианта из темы, импортируем напрямую из папки styles/variant
 * @param {string} themeKey - Название варианта который хотим использовать
 * @param {string} component - название компонета react-select который хотим стилизовать
 * @return {object} возвращает объект с css стилями
 * */
var getStyleVariant = function getStyleVariant(theme, themeKey, component) {
  try {
    if (_has["default"].call(theme, themeKey)) {
      if (_has["default"].call(theme[themeKey], 'rs') && _has["default"].call(theme[themeKey]['rs'], component)) {
        return theme[themeKey]['rs'][component];
      }
    }

    return {};
  } catch (e) {
    console.error('Error getStyleVariant: ', e);
    return {};
  }
};

var SelectStyles = {
  control: function control(style, props) {
    return (0, _objectSpread2["default"])({}, style, {
      padding: '0 0 0 10px',
      border: '1px solid #848484',
      minHeight: '30px'
    }, getStyleVariant(_InputVariant.InputVariant, props.selectProps.variant, 'control'), {
      ':hover': {// border: "none",
        // boxShadow: "none"
      }
    }, props.isFocused ? {// border: "none",
      // boxShadow: "none"
    } : {}, props.menuIsOpen ? {
      borderRadius: '5px 5px 0 0',
      borderBottom: 'none'
    } : {});
  },
  selectContainer: function selectContainer(style, props) {
    return (0, _objectSpread2["default"])({}, style, {
      padding: 0
    }, getStyleVariant(_InputVariant.InputVariant, props.selectProps.variant, 'selectContainer'));
  },
  valueContainer: function valueContainer(style, props) {
    return (0, _objectSpread2["default"])({}, style, {
      padding: 0
    }, getStyleVariant(_InputVariant.InputVariant, props.selectProps.variant, 'valueContainer'));
  },
  dropdownIndicator: function dropdownIndicator(style, props) {
    return (0, _objectSpread2["default"])({}, style, {
      padding: '0 10px'
    }, getStyleVariant(_InputVariant.InputVariant, props.selectProps.variant, 'dropdownIndicator'));
  },
  menu: function menu(style, props) {
    return (0, _objectSpread2["default"])({}, style, {
      margin: 0,
      border: '1px solid #848484',
      borderRadius: '0 0 5px 5px'
    }, getStyleVariant(_InputVariant.InputVariant, props.selectProps.variant, 'menu'));
  },
  option: function option(style, props) {
    return (0, _objectSpread2["default"])({}, style, {
      width: 'calc(100% - 20px)',
      margin: '0 10px',
      borderBottom: '1px solid #00649C',
      textAlign: 'center'
    }, props.isSelected ? {
      backgroundColor: 'rgba(0,127,175,.2)',
      color: '#333333'
    } : null, getStyleVariant(_InputVariant.InputVariant, props.selectProps.variant, 'option'));
  },
  indicatorSeparator: function indicatorSeparator(style, props) {
    return (0, _objectSpread2["default"])({}, style, {
      display: 'none'
    }, getStyleVariant(_InputVariant.InputVariant, props.selectProps.variant, 'indicatorSeparator'));
  },
  singleValue: function singleValue(style, props) {
    return (0, _objectSpread2["default"])({}, style, {
      top: '50%',
      left: '50%',
      transform: 'translate(-50%, -50%)',
      '-webkit-transform': 'translate(-50%, -50%)',
      '-ms-transform': 'translate(-50%, -50%)'
    }, getStyleVariant(_InputVariant.InputVariant, props.selectProps.variant, 'singleValue'));
  }
};
exports.SelectStyles = SelectStyles;

var DropdownIndicator = function DropdownIndicator(props) {
  return _react["default"].createElement(_reactSelect.components.DropdownIndicator, props, _react["default"].createElement(_Text.Text, {
    style: {
      transform: props.isFocused ? 'rotate(90deg)' : 'rotate(0)'
    },
    fill: '#333333'
  }, _react["default"].createElement(_SvgTriangle.SvgTriangle, null)));
};
/**
 * Компонент селекта (SelectBase)
 * @example ./SelectBase.example.md
 */


var SelectBase =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(SelectBase, _Component);

  // valueKey: 'id', // labelKey: 'name',
  function SelectBase(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, SelectBase);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(SelectBase).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "componentWillReceiveProps", function (nextProps) {
      var value = nextProps.input.value,
          valueKey = nextProps.valueKey,
          options = nextProps.options;

      if (nextProps.input.value !== _this.props.input.value || !(0, _fastDeepEqual["default"])(nextProps.options, _this.props.options)) {
        _this.setState({
          selectedOption: _this.getSelectedValueFromOptions(options, value, valueKey)
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getSelectedValueFromOptions", function (options, value, valueKey) {
      var selectedOption = {};

      if (options) {
        options.forEach(function (item) {
          if (item[valueKey] === value) {
            selectedOption = item;
          }
        });
      }

      if (!Object.keys(selectedOption).length) {
        // if we return empty object (it means no selected value), placeholders not working
        selectedOption = null;
      }

      return selectedOption;
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onChange", function (selectedOption) {
      var _this$props = _this.props,
          input = _this$props.input,
          valueKey = _this$props.valueKey;

      _this.setState(function () {
        return {
          selectedOption: selectedOption
        };
      }, function () {
        input.onChange(_this.state.selectedOption ? _this.state.selectedOption[valueKey] : null);
      });
    });
    _this.state = _this.initialState;
    return _this;
  } //перестраиваются элементы в вирт.доме


  (0, _createClass2["default"])(SelectBase, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      var _this$props2 = this.props,
          value = _this$props2.input.value,
          isLoading = _this$props2.isLoading,
          options = _this$props2.options;
      var selectedOption = this.state.selectedOption;

      if (nextProps.input.value !== this.props.value || nextProps.placeholder !== this.props.placeholder || !(0, _fastDeepEqual["default"])(nextProps.options, options) || nextProps.isLoading !== isLoading || selectedOption !== nextState.selectedOption) {
        return true;
      }

      return false;
    } //Когда будет изменено вирт. дом (устаревший)

  }, {
    key: "componentDidUpdate",
    // Доступ к предыдущим пропсам
    value: function componentDidUpdate(prevProps) {
      var _this$props3 = this.props,
          value = _this$props3.input.value,
          valueKey = _this$props3.valueKey,
          options = _this$props3.options;

      if (!(0, _fastDeepEqual["default"])(prevProps.options, options)) {
        this.setState({
          selectedOption: this.getSelectedValueFromOptions(options, value, valueKey)
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
          input = _this$props4.input,
          options = _this$props4.options,
          components = _this$props4.components,
          disabled = _this$props4.disabled,
          labelKey = _this$props4.labelKey,
          valueKey = _this$props4.valueKey,
          placeholder = _this$props4.placeholder,
          isLoading = _this$props4.isLoading,
          optionsFilter = _this$props4.optionsFilter,
          rest = (0, _objectWithoutProperties2["default"])(_this$props4, ["input", "options", "components", "disabled", "labelKey", "valueKey", "placeholder", "isLoading", "optionsFilter"]);
      var selectedOption = this.state.selectedOption;
      return _react["default"].createElement(_reactSelect["default"], (0, _extends2["default"])({
        value: selectedOption,
        name: input.name,
        options: optionsFilter(options),
        isLoading: isLoading,
        onChange: this.onChange,
        disabled: disabled,
        placeholder: placeholder,
        blurInputOnSelect: true,
        getOptionLabel: function getOptionLabel(option) {
          return option[labelKey];
        },
        getOptionValue: function getOptionValue(option) {
          return option[valueKey];
        },
        styles: SelectStyles,
        components: (0, _objectSpread2["default"])({
          DropdownIndicator: DropdownIndicator
        }, components)
      }, rest));
    }
  }, {
    key: "initialState",
    get: function get() {
      var _this$props5 = this.props,
          value = _this$props5.input.value,
          valueKey = _this$props5.valueKey,
          options = _this$props5.options;

      if (value) {
        return {
          selectedOption: this.getSelectedValueFromOptions(options, value, valueKey)
        };
      }

      return {
        selectedOption: null
      };
    }
  }]);
  return SelectBase;
}(_react.Component);

exports.SelectBase = SelectBase;
(0, _defineProperty2["default"])(SelectBase, "propTypes", {
  /** input */
  input: _propTypes["default"].object.isRequired,
  options: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].bool]),
  labelKey: _propTypes["default"].string
  /**  value key input */
  ,
  valueKey: _propTypes["default"].string
  /** input value seelct */
  ,
  selectValue: _propTypes["default"].string
  /** loading */
  ,
  loading: _propTypes["default"].bool,
  defaultOptions: _propTypes["default"].object,
  placeholder: _propTypes["default"].string,
  optionsFilter: _propTypes["default"].func
});
(0, _defineProperty2["default"])(SelectBase, "defaultProps", {
  mods: false,
  options: [],
  placeholder: '',
  optionsFilter: function optionsFilter(options) {
    return options;
  }
});
var _default = SelectBase;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,