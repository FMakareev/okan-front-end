82f7a1e4d89499e6c274627fd0a50c8f
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactRouterDom = require("react-router-dom");

var _reactRouter = require("react-router");

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _CheckAuthorization = _interopRequireDefault(require("./CheckAuthorization"));

var ChildrenComponent = function ChildrenComponent() {
  return _react["default"].createElement("div", null, "Component");
};

test('CheckAuthorization: объекта пользователя нет редирект на выход из приложения', function () {
  var ComponentConnect = (0, _CheckAuthorization["default"])()(ChildrenComponent);

  var wrapper = _reactTestRenderer["default"].create(_react["default"].createElement(_reactRouter.MemoryRouter, {
    initialEntries: ['/profile']
  }, _react["default"].createElement(ComponentConnect, null)));

  expect(wrapper.root.findByType(_reactRouterDom.Redirect).props.to).toBe('/');
});
test('CheckAuthorization: объекта пользователя содержит ошибку', function () {
  var ComponentConnect = (0, _CheckAuthorization["default"])()(ChildrenComponent);

  var wrapper = _reactTestRenderer["default"].create(_react["default"].createElement(_reactRouter.MemoryRouter, {
    initialEntries: ['/profile']
  }, _react["default"].createElement(ComponentConnect, {
    user: {
      error: 'Error!',
      initLoading: false,
      updateLoading: false
    }
  })));

  expect(wrapper.root.findByType(_reactRouterDom.Redirect).props.to).toBe('/');
});
test('CheckAuthorization: пользователь в состоянии загрузки в редакс', function () {
  var ComponentConnect = (0, _CheckAuthorization["default"])()(ChildrenComponent);

  var wrapper = _reactTestRenderer["default"].create(_react["default"].createElement(_reactRouter.MemoryRouter, {
    initialEntries: ['/']
  }, _react["default"].createElement(ComponentConnect, {
    user: {
      error: null,
      initLoading: true,
      updateLoading: false
    }
  })));

  expect(wrapper.toJSON()).toBeNull();
});
test('CheckAuthorization: пользователь с валидной ролью, в ответ получаем компонент', function () {
  var Roles = ['Role1', 'Role2', 'Role3'];
  var ComponentConnect = (0, _CheckAuthorization["default"])(Roles)(ChildrenComponent);

  var wrapper = _reactTestRenderer["default"].create(_react["default"].createElement(_reactRouter.MemoryRouter, {
    initialEntries: ['/']
  }, _react["default"].createElement(ComponentConnect, {
    user: {
      error: null,
      initLoading: false,
      updateLoading: false,
      role: 'Role1'
    }
  })));

  expect(wrapper.toJSON().children[0]).toBe('Component');
});
test('CheckAuthorization: пользователь с не валидной ролью', function () {
  var Roles = ['Role1', 'Role2', 'Role3'];

  var AccessDeniedCallback = function AccessDeniedCallback() {
    return _react["default"].createElement("div", null, "AccessDeniedCallback");
  };

  var ComponentConnect = (0, _CheckAuthorization["default"])(Roles, _react["default"].createElement(AccessDeniedCallback, null))(ChildrenComponent);

  var wrapper = _reactTestRenderer["default"].create(_react["default"].createElement(_reactRouter.MemoryRouter, {
    initialEntries: ['/']
  }, _react["default"].createElement(ComponentConnect, {
    user: {
      error: null,
      initLoading: false,
      updateLoading: false,
      role: 'Role5'
    }
  })));

  expect(wrapper.toJSON().children[0]).toBe('AccessDeniedCallback');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrQXV0aG9yaXphdGlvbi50ZXN0LmpzIl0sIm5hbWVzIjpbIkNoaWxkcmVuQ29tcG9uZW50IiwidGVzdCIsIkNvbXBvbmVudENvbm5lY3QiLCJ3cmFwcGVyIiwicmVuZGVyZXIiLCJjcmVhdGUiLCJleHBlY3QiLCJyb290IiwiZmluZEJ5VHlwZSIsIlJlZGlyZWN0IiwicHJvcHMiLCJ0byIsInRvQmUiLCJlcnJvciIsImluaXRMb2FkaW5nIiwidXBkYXRlTG9hZGluZyIsInRvSlNPTiIsInRvQmVOdWxsIiwiUm9sZXMiLCJyb2xlIiwiY2hpbGRyZW4iLCJBY2Nlc3NEZW5pZWRDYWxsYmFjayJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUVBLElBQU1BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0I7QUFBQSxTQUFNLHlEQUFOO0FBQUEsQ0FBMUI7O0FBRUFDLElBQUksQ0FBQyw4RUFBRCxFQUFpRixZQUFNO0FBQ3pGLE1BQU1DLGdCQUFnQixHQUFHLHNDQUFxQkYsaUJBQXJCLENBQXpCOztBQUNBLE1BQU1HLE9BQU8sR0FBR0MsOEJBQVNDLE1BQVQsQ0FDZCxnQ0FBQyx5QkFBRDtBQUFjLElBQUEsY0FBYyxFQUFFLENBQUMsVUFBRDtBQUE5QixLQUNFLGdDQUFDLGdCQUFELE9BREYsQ0FEYyxDQUFoQjs7QUFLQUMsRUFBQUEsTUFBTSxDQUFDSCxPQUFPLENBQUNJLElBQVIsQ0FBYUMsVUFBYixDQUF3QkMsd0JBQXhCLEVBQWtDQyxLQUFsQyxDQUF3Q0MsRUFBekMsQ0FBTixDQUFtREMsSUFBbkQsQ0FBd0QsR0FBeEQ7QUFDRCxDQVJHLENBQUo7QUFVQVgsSUFBSSxDQUFDLDBEQUFELEVBQTZELFlBQU07QUFDckUsTUFBTUMsZ0JBQWdCLEdBQUcsc0NBQXFCRixpQkFBckIsQ0FBekI7O0FBQ0EsTUFBTUcsT0FBTyxHQUFHQyw4QkFBU0MsTUFBVCxDQUNkLGdDQUFDLHlCQUFEO0FBQWMsSUFBQSxjQUFjLEVB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QztBQUNELENBbkJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBNZW1vcnlSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XHJcblxyXG5pbXBvcnQgQ2hlY2tBdXRob3JpemF0aW9uIGZyb20gJy4vQ2hlY2tBdXRob3JpemF0aW9uJztcclxuXHJcbmNvbnN0IENoaWxkcmVuQ29tcG9uZW50ID0gKCkgPT4gPGRpdj5Db21wb25lbnQ8L2Rpdj47XHJcblxyXG50ZXN0KCdDaGVja0F1dGhvcml6YXRpb246INC+0LHRitC10LrRgtCwINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvdC10YIg0YDQtdC00LjRgNC10LrRgiDQvdCwINCy0YvRhdC+0LQg0LjQtyDQv9GA0LjQu9C+0LbQtdC90LjRjycsICgpID0+IHtcclxuICBjb25zdCBDb21wb25lbnRDb25uZWN0ID0gQ2hlY2tBdXRob3JpemF0aW9uKCkoQ2hpbGRyZW5Db21wb25lbnQpO1xyXG4gIGNvbnN0IHdyYXBwZXIgPSByZW5kZXJlci5jcmVhdGUoXHJcbiAgICA8TWVtb3J5Um91dGVyIGluaXRpYWxFbnRyaWVzPXtbJy9wcm9maWxlJ119PlxyXG4gICAgICA8Q29tcG9uZW50Q29ubmVjdCAvPlxyXG4gICAgPC9NZW1vcnlSb3V0ZXI+LFxyXG4gICk7XHJcbiAgZXhwZWN0KHdyYXBwZXIucm9vdC5maW5kQnlUeXBlKFJlZGlyZWN0KS5wcm9wcy50bykudG9CZSgnLycpO1xyXG59KTtcclxuXHJcbnRlc3QoJ0NoZWNrQXV0aG9yaXphdGlvbjog0L7QsdGK0LXQutGC0LAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINGB0L7QtNC10YDQttC40YIg0L7RiNC40LHQutGDJywgKCkgPT4ge1xyXG4gIGNvbnN0IENvbXBvbmVudENvbm5lY3QgPSBDaGVja0F1dGhvcml6YXRpb24oKShDaGlsZHJlbkNvbXBvbmVudCk7XHJcbiAgY29uc3Qgd3JhcHBlciA9IHJlbmRlcmVyLmNyZWF0ZShcclxuICAgIDxNZW1vcnlSb3V0ZXIgaW5pdGlhbEVudHJpZXM9e1snL3Byb2ZpbGUnXX0+XHJcbiAgICAgIDxDb21wb25lbnRDb25uZWN0XHJcbiAgICAgICAgdXNlcj17e1xyXG4gICAgICAgICAgZXJyb3I6ICdFcnJvciEnLFxyXG4gICAgICAgICAgaW5pdExvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgdXBkYXRlTG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgfX1cclxuICAgICAgLz5cclxuICAgIDwvTWVtb3J5Um91dGVyPixcclxuICApO1xyXG4gIGV4cGVjdCh3cmFwcGVyLnJvb3QuZmluZEJ5VHlwZShSZWRpcmVjdCkucHJvcHMudG8pLnRvQmUoJy8nKTtcclxufSk7XHJcblxyXG50ZXN0KCdDaGVja0F1dGhvcml6YXRpb246INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjCDQsiDRgdC+0YHRgtC+0Y/QvdC40Lgg0LfQsNCz0YDRg9C30LrQuCDQsiDRgNC10LTQsNC60YEnLCAoKSA9PiB7XHJcbiAgY29uc3QgQ29tcG9uZW50Q29ubmVjdCA9IENoZWNrQXV0aG9yaXphdGlvbigpKENoaWxkcmVuQ29tcG9uZW50KTtcclxuICBjb25zdCB3cmFwcGVyID0gcmVuZGVyZXIuY3JlYXRlKFxyXG4gICAgPE1lbW9yeVJvdXRlciBpbml0aWFsRW50cmllcz17WycvJ119PlxyXG4gICAgICA8Q29tcG9uZW50Q29ubmVjdFxyXG4gICAgICAgIHVzZXI9e3tcclxuICAgICAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICAgICAgaW5pdExvYWRpbmc6IHRydWUsXHJcbiAgICAgICAgICB1cGRhdGVMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICB9fVxyXG4gICAgICAvPlxyXG4gICAgPC9NZW1vcnlSb3V0ZXI+LFxyXG4gICk7XHJcbiAgZXhwZWN0KHdyYXBwZXIudG9KU09OKCkpLnRvQmVOdWxsKCk7XHJcbn0pO1xyXG5cclxudGVzdCgnQ2hlY2tBdXRob3JpemF0aW9uOiDQv9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0YEg0LLQsNC70LjQtNC90L7QuSDRgNC+0LvRjNGOLCDQsiDQvtGC0LLQtdGCINC/0L7Qu9GD0YfQsNC10Lwg0LrQvtC80L/QvtC90LXQvdGCJywgKCkgPT4ge1xyXG4gIGNvbnN0IFJvbGVzID0gWydSb2xlMScsICdSb2xlMicsICdSb2xlMyddO1xyXG4gIGNvbnN0IENvbXBvbmVudENvbm5lY3QgPSBDaGVja0F1dGhvcml6YXRpb24oUm9sZXMpKENoaWxkcmVuQ29tcG9uZW50KTtcclxuXHJcbiAgY29uc3Qgd3JhcHBlciA9IHJlbmRlcmVyLmNyZWF0ZShcclxuICAgIDxNZW1vcnlSb3V0ZXIgaW5pdGlhbEVudHJpZXM9e1snLyddfT5cclxuICAgICAgPENvbXBvbmVudENvbm5lY3RcclxuICAgICAgICB1c2VyPXt7XHJcbiAgICAgICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgICAgIGluaXRMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgIHVwZGF0ZUxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgcm9sZTogJ1JvbGUxJyxcclxuICAgICAgICB9fVxyXG4gICAgICAvPlxyXG4gICAgPC9NZW1vcnlSb3V0ZXI+LFxyXG4gICk7XHJcbiAgZXhwZWN0KHdyYXBwZXIudG9KU09OKCkuY2hpbGRyZW5bMF0pLnRvQmUoJ0NvbXBvbmVudCcpO1xyXG59KTtcclxuXHJcbnRlc3QoJ0NoZWNrQXV0aG9yaXphdGlvbjog0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINGBINC90LUg0LLQsNC70LjQtNC90L7QuSDRgNC+0LvRjNGOJywgKCkgPT4ge1xyXG4gIGNvbnN0IFJvbGVzID0gWydSb2xlMScsICdSb2xlMicsICdSb2xlMyddO1xyXG4gIGNvbnN0IEFjY2Vzc0RlbmllZENhbGxiYWNrID0gKCkgPT4gPGRpdj5BY2Nlc3NEZW5pZWRDYWxsYmFjazwvZGl2PjtcclxuXHJcbiAgY29uc3QgQ29tcG9uZW50Q29ubmVjdCA9IENoZWNrQXV0aG9yaXphdGlvbihSb2xlcywgPEFjY2Vzc0RlbmllZENhbGxiYWNrIC8+KShDaGlsZHJlbkNvbXBvbmVudCk7XHJcblxyXG4gIGNvbnN0IHdyYXBwZXIgPSByZW5kZXJlci5jcmVhdGUoXHJcbiAgICA8TWVtb3J5Um91dGVyIGluaXRpYWxFbnRyaWVzPXtbJy8nXX0+XHJcbiAgICAgIDxDb21wb25lbnRDb25uZWN0XHJcbiAgICAgICAgdXNlcj17e1xyXG4gICAgICAgICAgZXJyb3I6IG51bGwsXHJcbiAgICAgICAgICBpbml0TG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgICB1cGRhdGVMb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICAgIHJvbGU6ICdSb2xlNScsXHJcbiAgICAgICAgfX1cclxuICAgICAgLz5cclxuICAgIDwvTWVtb3J5Um91dGVyPixcclxuICApO1xyXG4gIGV4cGVjdCh3cmFwcGVyLnRvSlNPTigpLmNoaWxkcmVuWzBdKS50b0JlKCdBY2Nlc3NEZW5pZWRDYWxsYmFjaycpO1xyXG59KTtcclxuIl19