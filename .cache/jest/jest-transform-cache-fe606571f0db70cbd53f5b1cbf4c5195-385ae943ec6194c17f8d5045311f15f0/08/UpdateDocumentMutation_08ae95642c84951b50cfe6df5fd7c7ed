5ffe5a81d29810f7408867d199b73e5e

    var doc = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"equipmentname"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"approvalstatus"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"children"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"customercode"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"documentnumber"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"okancode"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"internalMatching"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"externalAndInternalApprove"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"externalMatching"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},"directives":[]}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updatedocument"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"equipmentname"},"value":{"kind":"Variable","name":{"kind":"Name","value":"equipmentname"}}},{"kind":"Argument","name":{"kind":"Name","value":"approvalstatus"},"value":{"kind":"Variable","name":{"kind":"Name","value":"approvalstatus"}}},{"kind":"Argument","name":{"kind":"Name","value":"children"},"value":{"kind":"Variable","name":{"kind":"Name","value":"children"}}},{"kind":"Argument","name":{"kind":"Name","value":"customercode"},"value":{"kind":"Variable","name":{"kind":"Name","value":"customercode"}}},{"kind":"Argument","name":{"kind":"Name","value":"documentnumber"},"value":{"kind":"Variable","name":{"kind":"Name","value":"documentnumber"}}},{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"okancode"},"value":{"kind":"Variable","name":{"kind":"Name","value":"okancode"}}},{"kind":"Argument","name":{"kind":"Name","value":"partners"},"value":{"kind":"Variable","name":{"kind":"Name","value":"internalMatching"}}},{"kind":"Argument","name":{"kind":"Name","value":"externalapprove"},"value":{"kind":"Variable","name":{"kind":"Name","value":"externalAndInternalApprove"}}},{"kind":"Argument","name":{"kind":"Name","value":"externalconform"},"value":{"kind":"Variable","name":{"kind":"Name","value":"externalMatching"}}}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"document"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"name"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"okancode"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"customercode"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"equipmentname"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"project"},"arguments":[],"directives":[]},{"kind":"Field","alias":{"kind":"Name","value":"internalMatching"},"name":{"kind":"Name","value":"partners"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"firstname"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"lastname"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"patronymic"},"arguments":[],"directives":[]}]}},{"kind":"Field","alias":{"kind":"Name","value":"externalAndInternalApprove"},"name":{"kind":"Name","value":"externalapprove"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"firstname"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"lastname"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"patronymic"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"position"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"organizationname"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"signature"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"role"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"approvaldate"},"arguments":[],"directives":[]}]}},{"kind":"Field","alias":{"kind":"Name","value":"externalMatching"},"name":{"kind":"Name","value":"externalconform"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"firstname"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"lastname"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"patronymic"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"position"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"organizationname"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"signature"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"role"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"approvaldate"},"arguments":[],"directives":[]}]}}]}}]}}]}}],"loc":{"start":0,"end":1489}};
    doc.loc.source = {"body":"mutation ($equipmentname: String, $approvalstatus: String, $children: String, $customercode: String, $documentnumber: String, $id: String!, $name: String, $okancode: String, $internalMatching: [String], $externalAndInternalApprove: [String], $externalMatching: [String]) {\r\n  updatedocument(equipmentname: $equipmentname, approvalstatus: $approvalstatus, children: $children, customercode: $customercode, documentnumber: $documentnumber, id: $id, name: $name, okancode: $okancode, partners: $internalMatching, externalapprove: $externalAndInternalApprove,externalconform: $externalMatching) {\r\n    document {\r\n      id\r\n      name\r\n      okancode\r\n      customercode\r\n      equipmentname\r\n      project\r\n      internalMatching: partners {\r\n        id\r\n        firstname\r\n        lastname\r\n        patronymic\r\n      }\r\n      externalAndInternalApprove: externalapprove {\r\n        id\r\n        user {\r\n          id\r\n          firstname\r\n          lastname\r\n          patronymic\r\n          position\r\n          organizationname\r\n          signature\r\n          role{\r\n            name\r\n            id\r\n          }\r\n        }\r\n        approvaldate\r\n      }\r\n      externalMatching: externalconform {\r\n        id\r\n        user {\r\n          id\r\n          firstname\r\n          lastname\r\n          patronymic\r\n          position\r\n          organizationname\r\n          signature\r\n          role{\r\n            name\r\n            id\r\n          }\r\n        }\r\n        approvaldate\r\n      }\r\n    }\r\n  }\r\n}\r\n","name":"GraphQL request","locationOffset":{"line":1,"column":1}};
  

    var names = {};
    function unique(defs) {
      return defs.filter(
        function(def) {
          if (def.kind !== 'FragmentDefinition') return true;
          var name = def.name.value
          if (names[name]) {
            return false;
          } else {
            names[name] = true;
            return true;
          }
        }
      )
    }
  

    // Collect any fragment/type references from a node, adding them to the refs Set
    function collectFragmentReferences(node, refs) {
      if (node.kind === "FragmentSpread") {
        refs.add(node.name.value);
      } else if (node.kind === "VariableDefinition") {
        var type = node.type;
        if (type.kind === "NamedType") {
          refs.add(type.name.value);
        }
      }

      if (node.selectionSet) {
        node.selectionSet.selections.forEach(function(selection) {
          collectFragmentReferences(selection, refs);
        });
      }

      if (node.variableDefinitions) {
        node.variableDefinitions.forEach(function(def) {
          collectFragmentReferences(def, refs);
        });
      }

      if (node.definitions) {
        node.definitions.forEach(function(def) {
          collectFragmentReferences(def, refs);
        });
      }
    }

    var definitionRefs = {};
    (function extractReferences() {
      doc.definitions.forEach(function(def) {
        if (def.name) {
          var refs = new Set();
          collectFragmentReferences(def, refs);
          definitionRefs[def.name.value] = refs;
        }
      });
    })();

    function findOperation(doc, name) {
      for (var i = 0; i < doc.definitions.length; i++) {
        var element = doc.definitions[i];
        if (element.name && element.name.value == name) {
          return element;
        }
      }
    }

    function oneQuery(doc, operationName) {
      // Copy the DocumentNode, but clear out the definitions
      var newDoc = {
        kind: doc.kind,
        definitions: [findOperation(doc, operationName)]
      };
      if (doc.hasOwnProperty("loc")) {
        newDoc.loc = doc.loc;
      }

      // Now, for the operation we're running, find any fragments referenced by
      // it or the fragments it references
      var opRefs = definitionRefs[operationName] || new Set();
      var allRefs = new Set();
      var newRefs = new Set();

      // IE 11 doesn't support "new Set(iterable)", so we add the members of opRefs to newRefs one by one
      opRefs.forEach(function(refName) {
        newRefs.add(refName);
      });

      while (newRefs.size > 0) {
        var prevRefs = newRefs;
        newRefs = new Set();

        prevRefs.forEach(function(refName) {
          if (!allRefs.has(refName)) {
            allRefs.add(refName);
            var childRefs = definitionRefs[refName] || new Set();
            childRefs.forEach(function(childRef) {
              newRefs.add(childRef);
            });
          }
        });
      }

      allRefs.forEach(function(refName) {
        var op = findOperation(doc, refName);
        if (op) {
          newDoc.definitions.push(op);
        }
      });

      return newDoc;
    }

    module.exports = doc;
    
