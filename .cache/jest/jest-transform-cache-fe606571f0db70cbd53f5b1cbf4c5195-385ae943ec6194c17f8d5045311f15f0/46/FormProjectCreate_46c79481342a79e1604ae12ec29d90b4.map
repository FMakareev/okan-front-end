{"version":3,"sources":["FormProjectCreate.js"],"names":["BoxStyled","Box","props","borderRadius","fontSize","lineHeight","borderColor","notificationOpts","success","title","message","position","autoDismiss","error","FormProjectCreate","state","submit","bind","value","data","variables","Object","assign","update","store","response","createproject","readQuery","query","ProjectListQuery","projectList","push","project","writeQuery","console","then","setNotificationSuccess","history","id","setNotificationError","SubmissionError","_error","handleSubmit","pristine","submitting","invalid","client","TextFieldWithTooltip","TemplateListQuery","fetchPolicy","loading","SelectBase","templatelist","Component","PropTypes","object","func","bool","CreateProjectMutation","name","values","dispatch","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { graphql, Query, withApollo } from 'react-apollo';\r\nimport styled from 'styled-components';\r\nimport { success, error } from 'react-notification-system-redux';\r\nimport { Field, reduxForm, SubmissionError, Form, getFormValues } from 'redux-form';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n/**View */\r\nimport TextFieldWithTooltip from '@lib/ui/TextFieldWithTooltip/TextFieldWithTooltip';\r\nimport ButtonWithImage from '@lib/ui/ButtonWithImage/ButtonWithImage';\r\nimport Text from '@lib/ui/Text/Text';\r\nimport Box from '@lib/ui/Box/Box';\r\nimport SelectBase from '@lib/ui/SelectBase/SelectBase';\r\n\r\n/**Image */\r\nimport { SvgPlay } from '@lib/ui/Icons/SvgPlay';\r\n\r\n/** Styles property */\r\nimport BorderColorProperty from '../../../../styles/styleProperty/BorderColorProperty';\r\nimport BorderRadiusProperty from '../../../../styles/styleProperty/BorderRadiusProperty';\r\nimport FontSizeProperty from '../../../../styles/styleProperty/FontSizeProperty';\r\nimport LineHeightProperty from '../../../../styles/styleProperty/LineHeightProperty';\r\n\r\n/** Graphql schema */\r\nimport TemplateListQuery from './TemplateListQuery.graphql';\r\nimport CreateProjectMutation from './CreateProjectMutation.graphql';\r\nimport ProjectListQuery from '../../view/projectList/ProjectListQuery.graphql';\r\nimport { captureException } from '../../../../hocs/withSentry/withSentry';\r\n\r\nexport const BoxStyled = styled(Box)`\r\n  input {\r\n    padding: 3px 7px;\r\n    border: 0;\r\n    text-align: center;\r\n    ${props => BorderRadiusProperty({ ...props, borderRadius: '5px' })};\r\n    ${props => FontSizeProperty({ ...props, fontSize: 6 })};\r\n    ${props => LineHeightProperty({ ...props, lineHeight: 8 })};\r\n  }\r\n  border: 1px solid;\r\n  ${props => BorderColorProperty({ ...props, borderColor: 'color4' })};\r\n  ${props => BorderRadiusProperty({ ...props, borderRadius: '5px' })};\r\n`;\r\n\r\nconst notificationOpts = () => ({\r\n  success: {\r\n    title: 'Проект создан',\r\n    message: 'Проект создан',\r\n    position: 'tr',\r\n    autoDismiss: 2,\r\n  },\r\n  error: {\r\n    title: 'Проект не создан',\r\n    message: 'Проект не создан',\r\n    position: 'tr',\r\n    autoDismiss: 2,\r\n  },\r\n});\r\n\r\nexport class FormProjectCreate extends Component {\r\n  static propTypes = {\r\n    client: PropTypes.object,\r\n    handleSubmit: PropTypes.func,\r\n    history: PropTypes.object,\r\n    invalid: PropTypes.bool,\r\n    pristine: PropTypes.bool,\r\n    setNotificationError: PropTypes.func,\r\n    setNotificationSuccess: PropTypes.func,\r\n    submitting: PropTypes.bool,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n\r\n    this.submit = this.submit.bind(this);\r\n  }\r\n\r\n  submit(value) {\r\n    const data = {\r\n      variables: Object.assign({}, value),\r\n      update: (store, response) => {\r\n        try {\r\n          const {\r\n            data: { createproject },\r\n          } = response;\r\n\r\n          const data = store.readQuery({ query: ProjectListQuery });\r\n\r\n          data.projectList.push(createproject.project);\r\n\r\n          store.writeQuery({ query: ProjectListQuery, data });\r\n        } catch (error) {\r\n          console.error('Error in FormProjectCreate, method submit : ', error);\r\n          captureException(error);\r\n        }\r\n      },\r\n    };\r\n\r\n    return this.props['@apollo/create'](data)\r\n      .then(response => {\r\n        const { data, error } = response;\r\n        if (data && data.createproject && data.createproject.project) {\r\n          this.props.setNotificationSuccess(notificationOpts().success);\r\n          this.props.history.push(`/app/project-settings/${data.createproject.project.id}`);\r\n          return response;\r\n        } else if (error) {\r\n          throw error;\r\n        }\r\n      })\r\n      .catch(error => {\r\n        const { message } = error;\r\n        this.props.setNotificationError(notificationOpts().error);\r\n        captureException(error);\r\n\r\n        throw new SubmissionError({ _error: message });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { handleSubmit, pristine, submitting, invalid, client } = this.props;\r\n\r\n    return (\r\n      <Form onSubmit={handleSubmit(this.submit)}>\r\n        <Text\r\n          fontSize={6}\r\n          lineHeight={8}\r\n          color={'color7'}\r\n          textAlign={'center'}\r\n          mb={6}\r\n          fontFamily={'primary500'}>\r\n          Номер проекта\r\n        </Text>\r\n\r\n        <BoxStyled mb={16}>\r\n          <Field\r\n            name={'name'}\r\n            component={TextFieldWithTooltip}\r\n            placeholder={'Введите название проекта ...'}\r\n            type={'text'}\r\n            fontSize={5}\r\n            lineHeight={6}\r\n            fontFamily={'secondary'}\r\n          />\r\n        </BoxStyled>\r\n\r\n        <Text variant={'documentTitle'} mb={6}>\r\n          Список шаблонов\r\n        </Text>\r\n\r\n        <Box mb={'180px'}>\r\n          <Query query={TemplateListQuery} options={{ fetchPolicy: 'no-cache' }}>\r\n            {({ data, loading, error }) => {\r\n              return (\r\n                <Field\r\n                  name={'template'}\r\n                  component={SelectBase}\r\n                  disabled={loading}\r\n                  placeholder={'Выберите шаблон для проекта ...'}\r\n                  type={'text'}\r\n                  fontSize={5}\r\n                  lineHeight={6}\r\n                  options={data && data.templatelist}\r\n                  labelKey={'name'}\r\n                  valueKey={'id'}\r\n                />\r\n              );\r\n            }}\r\n          </Query>\r\n        </Box>\r\n\r\n        <ButtonWithImage\r\n          type=\"submit\"\r\n          variant={'large'}\r\n          size={'medium'}\r\n          children={'Создать'}\r\n          rightIcon={SvgPlay()}\r\n          ml={9}\r\n          disabled={pristine || submitting || invalid}\r\n          width={'100%'}\r\n          widthIcon={'10px'}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nFormProjectCreate = graphql(CreateProjectMutation, {\r\n  name: '@apollo/create',\r\n})(FormProjectCreate);\r\n\r\nFormProjectCreate = connect(\r\n  state => ({\r\n    values: getFormValues('FormProjectCreate')(state),\r\n  }),\r\n  dispatch => ({\r\n    setNotificationSuccess: message => dispatch(success(message)),\r\n    setNotificationError: message => dispatch(error(message)),\r\n  }),\r\n)(FormProjectCreate);\r\n\r\nFormProjectCreate = reduxForm({\r\n  form: 'FormProjectCreate',\r\n})(FormProjectCreate);\r\n\r\nFormProjectCreate = withApollo(FormProjectCreate);\r\n\r\nFormProjectCreate = withRouter(FormProjectCreate);\r\n\r\nexport default FormProjectCreate;\r\n"]}