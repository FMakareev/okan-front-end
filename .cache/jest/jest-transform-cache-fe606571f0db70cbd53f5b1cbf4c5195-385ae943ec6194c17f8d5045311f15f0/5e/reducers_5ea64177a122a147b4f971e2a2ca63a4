2fde865a23743d97573beda0bd9c9220
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ReducerUser = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _actionTypes = require("./actionTypes");

var _resetUserToken = require("./resetUserToken");

/** isBrowser */
var initialState = {
  error: null,
  initLoading: false,
  updateLoading: false,
  isAuth: false
};

var ReducerUser = function ReducerUser() {
  var prevState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;

  var _ref = arguments.length > 1 ? arguments[1] : undefined,
      type = _ref.type,
      user = _ref.user,
      rest = (0, _objectWithoutProperties2["default"])(_ref, ["type", "user"]);

  switch (type) {
    case _actionTypes.USER_INIT_LOADING_START:
      return Object.assign({}, prevState, (0, _objectSpread2["default"])({
        initLoading: true
      }, user));

    case _actionTypes.USER_INIT_LOADING_SUCCESS:
      return Object.assign({}, prevState, (0, _objectSpread2["default"])({}, initialState, user, {
        isAuth: true
      }));

    case _actionTypes.USER_INIT_LOADING_ERROR:
      return Object.assign({}, prevState, (0, _objectSpread2["default"])({
        initLoading: false,
        isAuth: false
      }, user));

    /** экшены обновления пользователя */

    case _actionTypes.USER_UPDATE_LOADING_START:
      return Object.assign({}, prevState, (0, _objectSpread2["default"])({
        updateLoading: true
      }, user));

    case _actionTypes.USER_UPDATE_LOADING_SUCCESS:
      return Object.assign({}, prevState, (0, _objectSpread2["default"])({}, initialState, {
        isAuth: true
      }, user));

    case _actionTypes.USER_UPDATE_LOADING_ERROR:
      return Object.assign({}, prevState, (0, _objectSpread2["default"])({}, initialState, {
        isAuth: false
      }, user));

    case _actionTypes.USER_ADD:
      return Object.assign({}, prevState, (0, _objectSpread2["default"])({}, initialState, {
        isAuth: true
      }, user));

    case _actionTypes.USER_REMOVE:
      if (isBrowser) {
        // window.localStorage.clear();
        // const cookies = document.cookie.split(';');
        // for (let i = 0; i < cookies.length; i += 1) {
        //   const cookie = cookies[i];
        //   const eqPos = cookie.indexOf('=');
        //   const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
        //   document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT`;
        // }
        (0, _resetUserToken.resetUserToken)();
      }

      return initialState;

    default:
      return prevState;
  }
};

exports.ReducerUser = ReducerUser;
var _default = ReducerUser;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHVjZXJzLmpzIl0sIm5hbWVzIjpbImluaXRpYWxTdGF0ZSIsImVycm9yIiwiaW5pdExvYWRpbmciLCJ1cGRhdGVMb2FkaW5nIiwiaXNBdXRoIiwiUmVkdWNlclVzZXIiLCJwcmV2U3RhdGUiLCJ0eXBlIiwidXNlciIsInJlc3QiLCJVU0VSX0lOSVRfTE9BRElOR19TVEFSVCIsIk9iamVjdCIsImFzc2lnbiIsIlVTRVJfSU5JVF9MT0FESU5HX1NVQ0NFU1MiLCJVU0VSX0lOSVRfTE9BRElOR19FUlJPUiIsIlVTRVJfVVBEQVRFX0xPQURJTkdfU1RBUlQiLCJVU0VSX1VQREFURV9MT0FESU5HX1NVQ0NFU1MiLCJVU0VSX1VQREFURV9MT0FESU5HX0VSUk9SIiwiVVNFUl9BREQiLCJVU0VSX1JFTU9WRSIsImlzQnJvd3NlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBOztBQVVBOztBQVhBO0FBYUEsSUFBTUEsWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxLQUFLLEVBQUUsSUFEWTtBQUVuQkMsRUFBQUEsV0FBVyxFQUFFLEtBRk07QUFHbkJDLEVBQUFBLGFBQWEsRUFBRSxLQUhJO0FBSW5CQyxFQUFBQSxNQUFNLEVBQUU7QUFKVyxDQUFyQjs7QUFPTyxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxHQUF1RDtBQUFBLE1BQXREQyxTQUFzRCx1RUFBMUNOLFlBQTBDOztBQUFBO0FBQUEsTUFBMUJPLElBQTBCLFFBQTFCQSxJQUEwQjtBQUFBLE1BQXBCQyxJQUFvQixRQUFwQkEsSUFBb0I7QUFBQSxNQUFYQyxJQUFXOztBQUNoRixVQUFRRixJQUFSO0FBQ0UsU0FBS0csb0NBQUw7QUFDRSxhQUFPQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTixTQUFsQjtBQUNMSixRQUFBQSxXQUFXLEVBQUU7QUFEUixTQUVGTSxJQUZFLEVBQVA7O0FBSUYsU0FBS0ssc0NBQUw7QUFDRSxhQUFPRixNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTixTQUFsQixxQ0FDRk4sWUFERSxFQUVGUSxJQUZFO0FBR0xKLFFBQUFBLE1BQU0sRUFBRTtBQUhILFNBQVA7O0FBS0YsU0FBS1Usb0NBQUw7QUFDRSxhQUFPSCxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTixTQUFsQjtBQUNMSixRQUFBQSxXQUFXLEVBQUUsS0FEUjtBQUVMRSxRQUFBQSxNQUFNLEVBQUU7QUFGSCxTQUdGSSxJQUhFLEVBQVA7O0FBS0Y7O0FBQ0EsU0FBS08sc0NBQUw7QUFDRSxhQUFPSixNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTixTQUFsQjtBQUNMSCxRQUFBQSxhQUFhLEVBQUU7QUFEVixTQUVGSyxJQUZFLEVBQVA7O0FBSUYsU0FBS1Esd0NBQUw7QUFDRSxhQUFPTCxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTixTQUFsQixxQ0FDRk4sWUFERTtBQUVMSSxRQUFBQSxNQUFNLEVBQUU7QUFGSCxTQUdGSSxJQUhFLEVBQVA7O0FBS0YsU0FBS1Msc0NBQUw7QUFDRSxhQUFPTixNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTixTQUFsQixxQ0FDRk4sWUFERTtBQUVMSSxRQUFBQSxNQUFNLEVBQUU7QUFGSCxTQUdGSSxJQUhFLEVBQVA7O0FBS0YsU0FBS1UscUJBQUw7QUFDRSxhQUFPUCxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTixTQUFsQixxQ0FDRk4sWUFERTtBQUVMSSxRQUFBQSxNQUFNLEVBQUU7QUFGSCxTQUdGSSxJQUhFLEVBQVA7O0FBS0YsU0FBS1csd0JBQUw7QUFDRSxVQUFJQyxTQUFKLEVBQWU7QUFDYjtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRDs7QUFFRCxhQUFPcEIsWUFBUDs7QUFDRjtBQUNFLGFBQU9NLFNBQVA7QUEzREo7QUE2REQsQ0E5RE07OztlQWdFUUQsVyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBpc0Jyb3dzZXIgKi9cclxuaW1wb3J0IHtcclxuICBVU0VSX0FERCxcclxuICBVU0VSX0lOSVRfTE9BRElOR19FUlJPUixcclxuICBVU0VSX0lOSVRfTE9BRElOR19TVEFSVCxcclxuICBVU0VSX0lOSVRfTE9BRElOR19TVUNDRVNTLFxyXG4gIFVTRVJfUkVNT1ZFLFxyXG4gIFVTRVJfVVBEQVRFX0xPQURJTkdfRVJST1IsXHJcbiAgVVNFUl9VUERBVEVfTE9BRElOR19TVEFSVCxcclxuICBVU0VSX1VQREFURV9MT0FESU5HX1NVQ0NFU1MsXHJcbn0gZnJvbSAnLi9hY3Rpb25UeXBlcyc7XHJcbmltcG9ydCB7IHJlc2V0VXNlclRva2VuIH0gZnJvbSAnLi9yZXNldFVzZXJUb2tlbic7XHJcblxyXG5jb25zdCBpbml0aWFsU3RhdGUgPSB7XHJcbiAgZXJyb3I6IG51bGwsXHJcbiAgaW5pdExvYWRpbmc6IGZhbHNlLFxyXG4gIHVwZGF0ZUxvYWRpbmc6IGZhbHNlLFxyXG4gIGlzQXV0aDogZmFsc2UsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUmVkdWNlclVzZXIgPSAocHJldlN0YXRlID0gaW5pdGlhbFN0YXRlLCB7IHR5cGUsIHVzZXIsIC4uLnJlc3QgfSkgPT4ge1xyXG4gIHN3aXRjaCAodHlwZSkge1xyXG4gICAgY2FzZSBVU0VSX0lOSVRfTE9BRElOR19TVEFSVDpcclxuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZTdGF0ZSwge1xyXG4gICAgICAgIGluaXRMb2FkaW5nOiB0cnVlLFxyXG4gICAgICAgIC4uLnVzZXIsXHJcbiAgICAgIH0pO1xyXG4gICAgY2FzZSBVU0VSX0lOSVRfTE9BRElOR19TVUNDRVNTOlxyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7XHJcbiAgICAgICAgLi4uaW5pdGlhbFN0YXRlLFxyXG4gICAgICAgIC4uLnVzZXIsXHJcbiAgICAgICAgaXNBdXRoOiB0cnVlLFxyXG4gICAgICB9KTtcclxuICAgIGNhc2UgVVNFUl9JTklUX0xPQURJTkdfRVJST1I6XHJcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcclxuICAgICAgICBpbml0TG9hZGluZzogZmFsc2UsXHJcbiAgICAgICAgaXNBdXRoOiBmYWxzZSxcclxuICAgICAgICAuLi51c2VyLFxyXG4gICAgICB9KTtcclxuICAgIC8qKiDRjdC60YjQtdC90Ysg0L7QsdC90L7QstC70LXQvdC40Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPICovXHJcbiAgICBjYXNlIFVTRVJfVVBEQVRFX0xPQURJTkdfU1RBUlQ6XHJcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcclxuICAgICAgICB1cGRhdGVMb2FkaW5nOiB0cnVlLFxyXG4gICAgICAgIC4uLnVzZXIsXHJcbiAgICAgIH0pO1xyXG4gICAgY2FzZSBVU0VSX1VQREFURV9MT0FESU5HX1NVQ0NFU1M6XHJcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2U3RhdGUsIHtcclxuICAgICAgICAuLi5pbml0aWFsU3RhdGUsXHJcbiAgICAgICAgaXNBdXRoOiB0cnVlLFxyXG4gICAgICAgIC4uLnVzZXIsXHJcbiAgICAgIH0pO1xyXG4gICAgY2FzZSBVU0VSX1VQREFURV9MT0FESU5HX0VSUk9SOlxyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7XHJcbiAgICAgICAgLi4uaW5pdGlhbFN0YXRlLFxyXG4gICAgICAgIGlzQXV0aDogZmFsc2UsXHJcbiAgICAgICAgLi4udXNlcixcclxuICAgICAgfSk7XHJcbiAgICBjYXNlIFVTRVJfQUREOlxyXG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJldlN0YXRlLCB7XHJcbiAgICAgICAgLi4uaW5pdGlhbFN0YXRlLFxyXG4gICAgICAgIGlzQXV0aDogdHJ1ZSxcclxuICAgICAgICAuLi51c2VyLFxyXG4gICAgICB9KTtcclxuICAgIGNhc2UgVVNFUl9SRU1PVkU6XHJcbiAgICAgIGlmIChpc0Jyb3dzZXIpIHtcclxuICAgICAgICAvLyB3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIC8vIGNvbnN0IGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsnKTtcclxuXHJcbiAgICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgLy8gICBjb25zdCBjb29raWUgPSBjb29raWVzW2ldO1xyXG4gICAgICAgIC8vICAgY29uc3QgZXFQb3MgPSBjb29raWUuaW5kZXhPZignPScpO1xyXG4gICAgICAgIC8vICAgY29uc3QgbmFtZSA9IGVxUG9zID4gLTEgPyBjb29raWUuc3Vic3RyKDAsIGVxUG9zKSA6IGNvb2tpZTtcclxuICAgICAgICAvLyAgIGRvY3VtZW50LmNvb2tpZSA9IGAke25hbWV9PTtleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UYDtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgcmVzZXRVc2VyVG9rZW4oKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGluaXRpYWxTdGF0ZTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBwcmV2U3RhdGU7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVkdWNlclVzZXI7XHJcbiJdfQ==