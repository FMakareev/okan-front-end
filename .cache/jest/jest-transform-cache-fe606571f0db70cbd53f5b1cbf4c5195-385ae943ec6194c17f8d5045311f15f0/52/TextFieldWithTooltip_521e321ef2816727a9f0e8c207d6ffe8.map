{"version":3,"sources":["TextFieldWithTooltip.js"],"names":["TextFieldWithTooltip","props","meta","input","onChangeHOC","tooltipPosition","rest","position","event","onChange","touched","error","PureComponent","className","PropTypes","string","classNameTextField","label","placeholder","required","type","disabled","bool","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAGA;;AACA;;AAFA;;AAIA;;;;IAIaA,oB;;;;;;;;;;;;6BAuBF;AAAA,wBACsD,KAAKC,KAD3D;AAAA,UACAC,IADA,eACAA,IADA;AAAA,UACMC,KADN,eACMA,KADN;AAAA,UACaC,WADb,eACaA,WADb;AAAA,UAC0BC,eAD1B,eAC0BA,eAD1B;AAAA,UAC8CC,IAD9C;AAEP,aACE;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE;AADL;AADT,SAKE,gCAAC,4BAAD,gCACMD,IADN,EAEMH,KAFN;AAGE,QAAA,YAAY,EAAE,KAHhB;AAIE,QAAA,QAAQ,EAAE,kBAACK,KAAD,EAAW;AACnB,cAAIJ,WAAJ,EAAiB;AACfD,YAAAA,KAAK,CAACM,QAAN,CAAeL,WAAW,CAACI,KAAD,CAA1B;AACD,WAFD,MAEO;AACLL,YAAAA,KAAK,CAACM,QAAN,CAAeD,KAAf;AACD;AACF;AAVH,SALF,EAiBE,gCAAC,wBAAD;AACE,QAAA,QAAQ,EAAEH,eADZ;AAEE,QAAA,QAAQ,EAAEH,IAAI,CAACQ,OAAL,IAAgBR,IAAI,CAACS,KAFjC;AAGE,QAAA,OAAO,EAAET,IAAI,CAACS;AAHhB,QAjBF,CADF;AAyBD;;;EAlDuCC,oB;;;iCAA7BZ,oB,eACQ;AACjB;AACAa,EAAAA,SAAS,EAAEC,sBAAUC,MAFJ;;AAGjB;AACAC,EAAAA,kBAAkB,EAAEF,sBAAUC,MAJb;;AAKjB;AACAE,EAAAA,KAAK,EAAEH,sBAAUC,MANA;;AAOjB;AACAG,EAAAA,WAAW,EAAEJ,sBAAUC,MARN;;AASjB;AACAI,EAAAA,QAAQ,EAAEL,sBAAUC,MAVH;;AAWjB;AACAK,EAAAA,IAAI,EAAEN,sBAAUC,MAZC;;AAajB;AACAM,EAAAA,QAAQ,EAAEP,sBAAUQ,IAdH;AAejBlB,EAAAA,WAAW,EAAEU,sBAAUS;AAfN,C;iCADRvB,oB,kBAmBW;AACpBI,EAAAA,WAAW,EAAE;AADO,C;eAkCTJ,oB","sourcesContent":["import React, {PureComponent} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** View */\r\nimport {TooltipBase} from '../TooltipBase/TooltipBase';\r\nimport {TextFieldBase} from '../TextFieldBase/TextFieldBase';\r\n\r\n/**\r\n * Компонент инпута с тултипом (Text Field With Tooltip)\r\n * @example ./TextFieldWithTooltip.example.md\r\n */\r\nexport class TextFieldWithTooltip extends PureComponent {\r\n  static propTypes = {\r\n    /** class */\r\n    className: PropTypes.string,\r\n    /** class */\r\n    classNameTextField: PropTypes.string,\r\n    /** input */\r\n    label: PropTypes.string,\r\n    /** input */\r\n    placeholder: PropTypes.string,\r\n    /** input */\r\n    required: PropTypes.string,\r\n    /** input */\r\n    type: PropTypes.string,\r\n    /** input */\r\n    disabled: PropTypes.bool,\r\n    onChangeHOC: PropTypes.func,\r\n  };\r\n\r\n  static defaultProps = {\r\n    onChangeHOC: null,\r\n  };\r\n\r\n  render() {\r\n    const {meta, input, onChangeHOC, tooltipPosition, ...rest} = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          position: 'relative'\r\n        }}\r\n      >\r\n        <TextFieldBase\r\n          {...rest}\r\n          {...input}\r\n          autoComplete={'off'}\r\n          onChange={(event) => {\r\n            if (onChangeHOC) {\r\n              input.onChange(onChangeHOC(event))\r\n            } else {\r\n              input.onChange(event)\r\n            }\r\n          }}\r\n        />\r\n        <TooltipBase\r\n          position={tooltipPosition}\r\n          isActive={meta.touched && meta.error}\r\n          warning={meta.error}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextFieldWithTooltip;\r\n"]}