619b45a894d66ff09bd4b30f410f4d09
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FormDocumentSettings = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactApollo = require("react-apollo");

var _reactNotificationSystemRedux = require("react-notification-system-redux");

var _reduxForm = require("redux-form");

var _reactRouterDom = require("react-router-dom");

var _has = require("../../../../utils/has");

var _ReactRoutePropTypes = require("../../../../propTypes/ReactRoutePropTypes");

var _Box = _interopRequireDefault(require("@lib/ui/Box/Box"));

var _Flex = _interopRequireDefault(require("@lib/ui/Flex/Flex"));

var _Text = _interopRequireDefault(require("@lib/ui/Text/Text"));

var _Container = _interopRequireDefault(require("@lib/ui/Container/Container"));

var _ButtonWithImage = _interopRequireDefault(require("@lib/ui/ButtonWithImage/ButtonWithImage"));

var _BasicDocumentSettings = _interopRequireDefault(require("../BasicDocumentSettings/BasicDocumentSettings"));

var _FieldArrayInternalUserWithTitle = _interopRequireDefault(require("./FieldArrayInternalUserWithTitle"));

var _SvgSave = require("@lib/ui/Icons/SvgSave");

var _UpdateDocumentMutation = _interopRequireDefault(require("../../graphql/UpdateDocumentMutation.graphql"));

var _DocumentItemQuery = _interopRequireDefault(require("../../graphql/DocumentItemQuery.graphql"));

var _CreateContractorApprovalMutation = _interopRequireDefault(require("../../graphql/CreateContractorApprovalMutation.graphql"));

var _UpdateContractorApprovalMutation = _interopRequireDefault(require("../../graphql/UpdateContractorApprovalMutation.graphql"));

var _DeleteContractorMutation = _interopRequireDefault(require("../../graphql/DeleteContractorMutation.graphql"));

var _withSentry = require("../../../../hocs/withSentry/withSentry");

/**PropTypes */

/** View */

/** Components */

/** Image */

/** Graphql schema */
var notificationOpts = function notificationOpts() {
  return {
    success: {
      title: 'Настройки проекта успешно обновлены',
      position: 'tr',
      autoDismiss: 2
    },
    error: {
      title: 'Настройки проекта не обновлены',
      message: 'Во время обновления настроек возникла ошибка, попробуйте перезагрузит страницу если это не поможет обратитесь в поддержку.',
      position: 'tr',
      autoDismiss: 5
    }
  };
};

var FormDocumentSettings =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(FormDocumentSettings, _Component);

  function FormDocumentSettings() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, FormDocumentSettings);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(FormDocumentSettings)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", _this.initialState);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "loadingToggle", function () {
      _this.setState(function (state) {
        return {
          isLoading: !state.isLoading
        };
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "submitCreateContractorApproval", function (value) {
      var variables = (0, _objectSpread2["default"])({
        approvaldate: value.approvaldate,
        userid: value.user.id
      }, value.user, {
        role: value.user.role.name
      });
      return _this.props.client.mutate({
        mutation: _CreateContractorApprovalMutation["default"],
        variables: variables
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "removeContractorApprovalMutation", function (id) {
      var client = _this.props.client;
      return client.mutate({
        mutation: _DeleteContractorMutation["default"],
        fetchPolicy: 'no-cache',
        variables: {
          id: id
        }
      })["catch"](function (error) {
        (0, _withSentry.captureException)(error, 'Error removeContractorApprovalMutation: ');
        return error;
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getDeletedContractor", function (nextContractors, prevContractors) {
      try {
        var differenceBetweenThePreviousAndTheNext = [];
        prevContractors.forEach(function (prevContractor) {
          var result = nextContractors.find(function (nextContractor) {
            return prevContractor.id === nextContractor.id;
          });

          if (!result) {
            differenceBetweenThePreviousAndTheNext.push(prevContractor);
          }
        });
        return differenceBetweenThePreviousAndTheNext;
      } catch (error) {
        (0, _withSentry.captureException)(error, 'Error transformDocumentApproval: ');
        return error;
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "createRequestListForRemoveContractorApproval",
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee2(value) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return value.map(
                /*#__PURE__*/
                function () {
                  var _ref2 = (0, _asyncToGenerator2["default"])(
                  /*#__PURE__*/
                  _regenerator["default"].mark(function _callee(item) {
                    var _ref3, deleteContractorApproval;

                    return _regenerator["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return _this.removeContractorApprovalMutation(item.id);

                          case 2:
                            _ref3 = _context.sent;
                            deleteContractorApproval = _ref3.data.deleteContractorApproval;
                            return _context.abrupt("return", deleteContractorApproval);

                          case 5:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x2) {
                    return _ref2.apply(this, arguments);
                  };
                }());

              case 3:
                return _context2.abrupt("return", _context2.sent);

              case 6:
                _context2.prev = 6;
                _context2.t0 = _context2["catch"](0);
                (0, _withSentry.captureException)(_context2.t0, 'Error createContractorApprovalList: ');

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 6]]);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "removeContractorApproval",
    /*#__PURE__*/
    function () {
      var _ref4 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee3(value) {
        var newDate, promiseLists;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                newDate = {
                  externalAndInternalApprove: [],
                  externalMatching: []
                };
                promiseLists = {
                  externalAndInternalApprove: [],
                  externalMatching: []
                };

                if (!(_has.has.call(value, 'externalAndInternalApprove') && Array.isArray(value.externalAndInternalApprove))) {
                  _context3.next = 8;
                  break;
                }

                newDate.externalAndInternalApprove = _this.getDeletedContractor(value.externalAndInternalApprove, _this.props.initialValues.externalAndInternalApprove);
                _context3.next = 7;
                return _this.createRequestListForRemoveContractorApproval(newDate.externalAndInternalApprove);

              case 7:
                promiseLists.externalAndInternalApprove = _context3.sent;

              case 8:
                if (!(_has.has.call(value, 'externalMatching') && Array.isArray(value.externalMatching))) {
                  _context3.next = 13;
                  break;
                }

                newDate.externalMatching = _this.getDeletedContractor(value.externalMatching, _this.props.initialValues.externalMatching);
                _context3.next = 12;
                return _this.createRequestListForRemoveContractorApproval(newDate.externalMatching);

              case 12:
                promiseLists.externalMatching = _context3.sent;

              case 13:
                if (!promiseLists.externalAndInternalApprove.length) {
                  _context3.next = 17;
                  break;
                }

                _context3.next = 16;
                return Promise.all(promiseLists.externalAndInternalApprove);

              case 16:
                newDate.externalAndInternalApprove = _context3.sent;

              case 17:
                if (!promiseLists.externalMatching.length) {
                  _context3.next = 21;
                  break;
                }

                _context3.next = 20;
                return Promise.all(promiseLists.externalMatching);

              case 20:
                newDate.externalMatching = _context3.sent;

              case 21:
                return _context3.abrupt("return", newDate);

              case 24:
                _context3.prev = 24;
                _context3.t0 = _context3["catch"](0);
                (0, _withSentry.captureException)(_context3.t0, 'Error removeContractorApproval: ');
                return _context3.abrupt("return", _context3.t0);

              case 28:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[0, 24]]);
      }));

      return function (_x3) {
        return _ref4.apply(this, arguments);
      };
    }());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "submitUpdateContractorApproval", function (value) {
      var variables = (0, _objectSpread2["default"])({}, value.user, {
        id: value.id,
        approvaldate: value.approvaldate,
        userid: value.user.id
      }); // TODO: заменить заглушку на мутацию

      return _this.props.client.mutate({
        mutation: _UpdateContractorApprovalMutation["default"],
        variables: variables
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "createContractorApprovalList",
    /*#__PURE__*/
    function () {
      var _ref5 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee5(value) {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.prev = 0;
                _context5.next = 3;
                return value.map(
                /*#__PURE__*/
                function () {
                  var _ref6 = (0, _asyncToGenerator2["default"])(
                  /*#__PURE__*/
                  _regenerator["default"].mark(function _callee4(item) {
                    var contractorapproval, _ref7, updatecontractorapproval, _ref8, createcontractorapproval;

                    return _regenerator["default"].wrap(function _callee4$(_context4) {
                      while (1) {
                        switch (_context4.prev = _context4.next) {
                          case 0:
                            contractorapproval = {};
                            /** создаем/обновляем объект ContractorApproval */

                            if (!_has.has.call(item, 'id')) {
                              _context4.next = 9;
                              break;
                            }

                            _context4.next = 4;
                            return _this.submitUpdateContractorApproval(item);

                          case 4:
                            _ref7 = _context4.sent;
                            updatecontractorapproval = _ref7.data.updatecontractorapproval;
                            contractorapproval = updatecontractorapproval.contractorapproval;
                            _context4.next = 14;
                            break;

                          case 9:
                            _context4.next = 11;
                            return _this.submitCreateContractorApproval(item);

                          case 11:
                            _ref8 = _context4.sent;
                            createcontractorapproval = _ref8.data.createcontractorapproval;
                            contractorapproval = createcontractorapproval.contractorapproval;

                          case 14:
                            return _context4.abrupt("return", contractorapproval.id);

                          case 15:
                          case "end":
                            return _context4.stop();
                        }
                      }
                    }, _callee4);
                  }));

                  return function (_x5) {
                    return _ref6.apply(this, arguments);
                  };
                }());

              case 3:
                return _context5.abrupt("return", _context5.sent);

              case 6:
                _context5.prev = 6;
                _context5.t0 = _context5["catch"](0);
                (0, _withSentry.captureException)(_context5.t0, 'Error createContractorApprovalList: ');

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[0, 6]]);
      }));

      return function (_x4) {
        return _ref5.apply(this, arguments);
      };
    }());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "transformDocumentApproval",
    /*#__PURE__*/
    function () {
      var _ref9 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee6(value) {
        var newDate;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.prev = 0;
                newDate = {
                  externalAndInternalApprove: [],
                  externalMatching: []
                };

                if (!(_has.has.call(value, 'externalAndInternalApprove') && Array.isArray(value.externalAndInternalApprove))) {
                  _context6.next = 6;
                  break;
                }

                _context6.next = 5;
                return _this.createContractorApprovalList(value.externalAndInternalApprove);

              case 5:
                newDate.externalAndInternalApprove = _context6.sent;

              case 6:
                if (!(_has.has.call(value, 'externalMatching') && Array.isArray(value.externalMatching))) {
                  _context6.next = 10;
                  break;
                }

                _context6.next = 9;
                return _this.createContractorApprovalList(value.externalMatching);

              case 9:
                newDate.externalMatching = _context6.sent;

              case 10:
                if (!newDate.externalAndInternalApprove.length) {
                  _context6.next = 14;
                  break;
                }

                _context6.next = 13;
                return Promise.all(newDate.externalAndInternalApprove);

              case 13:
                newDate.externalAndInternalApprove = _context6.sent;

              case 14:
                if (!newDate.externalMatching.length) {
                  _context6.next = 18;
                  break;
                }

                _context6.next = 17;
                return Promise.all(newDate.externalMatching);

              case 17:
                newDate.externalMatching = _context6.sent;

              case 18:
                return _context6.abrupt("return", newDate);

              case 21:
                _context6.prev = 21;
                _context6.t0 = _context6["catch"](0);
                (0, _withSentry.captureException)(_context6.t0, 'Error transformDocumentApproval: ');
                return _context6.abrupt("return", _context6.t0);

              case 25:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, null, [[0, 21]]);
      }));

      return function (_x6) {
        return _ref9.apply(this, arguments);
      };
    }());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "updateDocument",
    /*#__PURE__*/
    function () {
      var _ref10 = (0, _asyncToGenerator2["default"])(
      /*#__PURE__*/
      _regenerator["default"].mark(function _callee7(value) {
        var _this$props, setNotificationError, setNotificationSuccess, history, removeContractorApproval, documentApproval, options;

        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _this$props = _this.props, setNotificationError = _this$props.setNotificationError, setNotificationSuccess = _this$props.setNotificationSuccess, history = _this$props.history;

                _this.loadingToggle();

                _context7.next = 4;
                return _this.removeContractorApproval(value);

              case 4:
                removeContractorApproval = _context7.sent;

                if (!removeContractorApproval.message) {
                  _context7.next = 8;
                  break;
                }

                setNotificationError(notificationOpts().error);
                throw new _reduxForm.SubmissionError({
                  _error: removeContractorApproval.message
                });

              case 8:
                _context7.next = 10;
                return _this.transformDocumentApproval(value);

              case 10:
                documentApproval = _context7.sent;

                if (!documentApproval.message) {
                  _context7.next = 14;
                  break;
                }

                setNotificationError(notificationOpts().error);
                throw new _reduxForm.SubmissionError({
                  _error: documentApproval.message
                });

              case 14:
                options = {
                  variables: Object.assign({}, value, documentApproval),
                  update: function update(store, response) {
                    try {
                      var updatedocument = response.data.updatedocument;
                      var documentItemOptions = {
                        query: _DocumentItemQuery["default"],
                        variables: {
                          id: updatedocument.document.id
                        }
                      };
                      var documentItem = store.readQuery(documentItemOptions);
                      documentItem.documentitem = updatedocument.document;
                      store.writeQuery((0, _objectSpread2["default"])({}, documentItemOptions, {
                        data: documentItem
                      }));
                    } catch (e) {
                      (0, _withSentry.captureException)(e, 'Error in FormProjectCreate, method updateDocument : ');
                    }
                  }
                };
                return _context7.abrupt("return", _this.props['@apollo/update'](options).then(function (response) {
                  _this.loadingToggle();

                  setNotificationSuccess(notificationOpts().success);
                  history.push("/app/project/".concat(options.variables.project));
                  return response;
                })["catch"](function (error) {
                  var message = error.message;

                  _this.loadingToggle();

                  setNotificationError(notificationOpts().error);
                  (0, _withSentry.captureException)(error);
                  throw new _reduxForm.SubmissionError({
                    _error: message
                  });
                }));

              case 16:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      return function (_x7) {
        return _ref10.apply(this, arguments);
      };
    }());
    return _this;
  }

  (0, _createClass2["default"])(FormDocumentSettings, [{
    key: "render",
    value: function render() {
      var handleSubmit = this.props.handleSubmit;
      return _react["default"].createElement(_reduxForm.Form, {
        onSubmit: handleSubmit(this.updateDocument)
      }, _react["default"].createElement(_Flex["default"], {
        mt: 9,
        mb: '100px',
        justifyContent: 'space-around'
      }, _react["default"].createElement(_Box["default"], {
        px: 5,
        width: '50%'
      }, _react["default"].createElement(_Container["default"], {
        mb: 9,
        maxWidth: '500px',
        width: '100%'
      }, _react["default"].createElement(_reduxForm.Fields, {
        names: ['name', 'customercode', 'okancode', 'equipmentname'],
        component: _BasicDocumentSettings["default"]
      })), _react["default"].createElement(_FieldArrayInternalUserWithTitle["default"], {
        name: 'internalMatching',
        title: 'Внутренние согласующие ОКАН'
      })), _react["default"].createElement(_Box["default"], {
        px: 5,
        width: '50%'
      }, _react["default"].createElement(_FieldArrayInternalUserWithTitle["default"], {
        name: 'externalAndInternalApprove',
        title: 'Утверждающие внешние и внутренние'
      }), _react["default"].createElement(_FieldArrayInternalUserWithTitle["default"], {
        name: 'externalMatching',
        title: 'Внешние согласующие'
      }))), _react["default"].createElement(_Flex["default"], {
        justifyContent: 'center',
        mb: '200px'
      }, _react["default"].createElement(_ButtonWithImage["default"], {
        isLoading: this.state.isLoading,
        type: 'submit',
        variant: 'large',
        size: 'medium',
        children: 'Сохранить настройки',
        leftIcon: (0, _SvgSave.SvgSave)(),
        mr: 9,
        width: '500px',
        widthIcon: '16px'
      })));
    }
  }, {
    key: "initialState",
    get: function get() {
      return {
        isLoading: false
      };
    }
    /**
     * @desc метод для изменения статуса прелоатера
     * */

  }]);
  return FormDocumentSettings;
}(_react.Component);

exports.FormDocumentSettings = FormDocumentSettings;
(0, _defineProperty2["default"])(FormDocumentSettings, "propTypes", (0, _objectSpread2["default"])({}, _ReactRoutePropTypes.ReactRoutePropTypes));
exports.FormDocumentSettings = FormDocumentSettings = (0, _reactApollo.graphql)(_UpdateDocumentMutation["default"], {
  name: '@apollo/update'
})(FormDocumentSettings);
exports.FormDocumentSettings = FormDocumentSettings = (0, _reactRedux.connect)(function (state) {
  return {
    values: (0, _reduxForm.getFormValues)('FormDocumentSettings')(state)
  };
}, function (dispatch) {
  return {
    setNotificationSuccess: function setNotificationSuccess(message) {
      return dispatch((0, _reactNotificationSystemRedux.success)(message));
    },
    setNotificationError: function setNotificationError(message) {
      return dispatch((0, _reactNotificationSystemRedux.error)(message));
    }
  };
})(FormDocumentSettings);
exports.FormDocumentSettings = FormDocumentSettings = (0, _reduxForm.reduxForm)({
  form: 'FormDocumentSettings'
})(FormDocumentSettings);
exports.FormDocumentSettings = FormDocumentSettings = (0, _reactRouterDom.withRouter)(FormDocumentSettings);
exports.FormDocumentSettings = FormDocumentSettings = (0, _reactApollo.withApollo)(FormDocumentSettings);
var _default = FormDocumentSettings;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,