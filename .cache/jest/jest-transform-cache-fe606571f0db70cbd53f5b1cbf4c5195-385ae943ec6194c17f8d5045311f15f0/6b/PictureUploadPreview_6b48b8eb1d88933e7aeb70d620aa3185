728d5cb740b6b63a0c5e8e4a28c20aa4
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.PictureUploadPreview = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactIconsKit = _interopRequireDefault(require("react-icons-kit"));

var _reactRedux = require("react-redux");

var _ic_add = require("react-icons-kit/md/ic_add");

var _SvgDownload = require("../../components/Icons/SvgDownload");

var _Image = _interopRequireDefault(require("../Image/Image"));

var _TooltipBase = _interopRequireDefault(require("../TooltipBase/TooltipBase"));

var _PictureUploadPreviewStyled = require("./PictureUploadPreviewStyled");

/** Icons */

/** Image */

/** Image */

/** Css value */
var handleDropRejected = function handleDropRejected() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return console.log('reject', args);
};
/**
 * @example ./PictureUploadPreview.example.md
 */


var PictureUploadPreview =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(PictureUploadPreview, _Component);

  function PictureUploadPreview() {
    var _this;

    (0, _classCallCheck2["default"])(this, PictureUploadPreview);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(PictureUploadPreview).call(this));
    _this.state = {
      preview: null,
      files: [],
      error: null
    };
    _this.handleDrop = _this.handleDrop.bind((0, _assertThisInitialized2["default"])(_this));
    _this.getBase64 = _this.getBase64.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(PictureUploadPreview, [{
    key: "handleDrop",
    value: function handleDrop(files) {
      if (!files.length && !files[0].preview) {
        return null;
      }

      if (files[0].size > 600000) {
        this.setState(function () {
          return {
            error: 'Размер картинки не должен превышать : 600КВ'
          };
        });
        return null;
      } else if (files[0].size < 600000) {
        this.setState(function () {
          return {
            error: null
          };
        });
      }

      this.setState(function (_ref) {
        var files = _ref.files;

        files: files;
      });
      console.log(11, this.state.files);
      var preview = files[0].preview;
      this.setState({// this.state.preview: preview,
      }); // console.log(11, this.state.preview);

      this.getBase64(files[0]);
    }
  }, {
    key: "getBase64",
    value: function getBase64(file) {
      var onChange = this.props.input.onChange;
      var reader = new FileReader();
      reader.readAsDataURL(file);

      reader.onload = function () {
        // console.log(reader.result);
        onChange(reader.result);
      };

      reader.onerror = function (error) {
        console.log('Error: ', error);
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.input.value,
          styles = _this$props.styles,
          disabled = _this$props.disabled,
          mb = _this$props.mb,
          br = _this$props.br,
          placeholder = _this$props.placeholder,
          meta = _this$props.meta;
      var _this$state = this.state,
          preview = _this$state.preview,
          error = _this$state.error;
      return _react["default"].createElement(_TooltipBase["default"], {
        isActive: error,
        warning: error,
        left: '40%'
      }, _react["default"].createElement(_PictureUploadPreviewStyled.DropZoneStyled, {
        disabled: disabled,
        br: br,
        onDrop: this.handleDrop,
        accept: "image/*",
        multiple: false
      }, preview && _react["default"].createElement(_PictureUploadPreviewStyled.Img, {
        src: preview,
        alt: "image preview"
      }), !preview && value && _react["default"].createElement(_PictureUploadPreviewStyled.Img, {
        src: value,
        alt: "logo",
        className: styles && styles.img
      }), !preview && !value && _react["default"].createElement(_PictureUploadPreviewStyled.DropZoneIconWrapper, {
        disabled: disabled
      }, _react["default"].createElement("div", null, " ", placeholder), _react["default"].createElement("div", null, (0, _SvgDownload.SvgDownload)()))));
    }
  }]);
  return PictureUploadPreview;
}(_react.Component);

exports.PictureUploadPreview = PictureUploadPreview;
(0, _defineProperty2["default"])(PictureUploadPreview, "propTypes", {
  /** className */
  styles: _propTypes["default"].string,

  /** CSS: margin - bottom */
  mb: _propTypes["default"].number,

  /** CSS: border-radius */
  br: _propTypes["default"].number,

  /** property of input */
  value: _propTypes["default"].string,
  placeholderImage: _propTypes["default"].string,

  /** loading files or picture */
  files: _propTypes["default"].object,

  /** input value */
  disabled: _propTypes["default"].bool
});
var _default = PictureUploadPreview;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,