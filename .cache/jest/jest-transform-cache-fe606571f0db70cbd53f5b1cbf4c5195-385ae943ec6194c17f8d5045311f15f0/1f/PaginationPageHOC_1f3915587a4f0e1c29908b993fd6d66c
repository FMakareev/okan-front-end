ff9813db40d0d3ef5fc3d0022d0f0e2a
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.PaginationPageHOC = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactApollo = require("react-apollo");

/**View */
var PaginationPageHOC =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(PaginationPageHOC, _Component);

  function PaginationPageHOC(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, PaginationPageHOC);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(PaginationPageHOC).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "reFetchAfterSetState", function (fetchMore) {
      return function () {
        var _this$state = _this.state,
            pageSize = _this$state.pageSize,
            pageNumber = _this$state.pageNumber;
        var _this$props = _this.props,
            queryName = _this$props.queryName,
            query = _this$props.query,
            queryVariables = _this$props.queryVariables;
        fetchMore({
          query: query,
          variables: (0, _objectSpread2["default"])({}, queryVariables, {
            pageSize: pageSize,
            pageNumber: pageNumber
          }),
          updateQuery: function updateQuery(previousResult, _ref) {
            var fetchMoreResult = _ref.fetchMoreResult;
            if (!fetchMoreResult) return (0, _defineProperty2["default"])({}, queryName, []);
            return fetchMoreResult;
          }
        });
      };
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "prevPage", function (fetchMore) {
      var pageNumber = _this.state.pageNumber;

      try {
        if (pageNumber >= 1) {
          _this.setState(function (state) {
            return (0, _objectSpread2["default"])({}, state, {
              pageNumber: pageNumber - 1
            });
          }, _this.reFetchAfterSetState(fetchMore));
        }
      } catch (error) {
        console.log(error);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "nextPage", function (fetchMore) {
      var pageNumber = _this.state.pageNumber;

      try {
        _this.setState(function (state) {
          return (0, _objectSpread2["default"])({}, state, {
            pageNumber: pageNumber + 1
          });
        }, _this.reFetchAfterSetState(fetchMore));
      } catch (error) {
        console.log(error);
      }
    });
    _this.state = _this.initialState;
    return _this;
  }

  (0, _createClass2["default"])(PaginationPageHOC, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          query = _this$props2.query,
          queryVariables = _this$props2.queryVariables,
          queryName = _this$props2.queryName;
      var _this$state2 = this.state,
          pageNumber = _this$state2.pageNumber,
          pageSize = _this$state2.pageSize;
      return _react["default"].createElement(_reactApollo.Query, {
        skip: !query,
        variables: (0, _objectSpread2["default"])({}, queryVariables, {
          pageSize: pageSize,
          pageNumber: pageNumber
        }),
        query: query
      }, function (_ref3) {
        var loading = _ref3.loading,
            error = _ref3.error,
            data = _ref3.data,
            fetchMore = _ref3.fetchMore;
        var Children = _this2.props.children;
        return _react["default"].createElement(Children, {
          data: data,
          loading: loading,
          error: error,
          pagination: {
            pageSize: pageSize,
            pageNumber: pageNumber,
            nextPage: function nextPage() {
              _this2.nextPage(fetchMore, data);
            },
            disabledToNextPage: loading || data[queryName] && data[queryName].length === 0 || data[queryName] && data[queryName].length < pageSize,
            prevPage: function prevPage() {
              _this2.prevPage(fetchMore, data);
            },
            disabledToPrevPage: pageNumber - 1 < 1
          }
        });
      });
    }
  }, {
    key: "initialState",
    get: function get() {
      var _this$props3 = this.props,
          pageNumber = _this$props3.pageNumber,
          pageSize = _this$props3.pageSize;
      return {
        pageNumber: pageNumber,
        pageSize: pageSize
      };
    }
  }]);
  return PaginationPageHOC;
}(_react.Component);

exports.PaginationPageHOC = PaginationPageHOC;
(0, _defineProperty2["default"])(PaginationPageHOC, "propTypes", {
  queryName: _propTypes["default"].string,
  pageSize: _propTypes["default"].number,
  pageNumber: _propTypes["default"].number,
  query: _propTypes["default"].any,
  queryVariables: _propTypes["default"].any
});
(0, _defineProperty2["default"])(PaginationPageHOC, "defaultProps", {
  pageSize: 10,
  pageNumber: 1
});
var _default = PaginationPageHOC;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,