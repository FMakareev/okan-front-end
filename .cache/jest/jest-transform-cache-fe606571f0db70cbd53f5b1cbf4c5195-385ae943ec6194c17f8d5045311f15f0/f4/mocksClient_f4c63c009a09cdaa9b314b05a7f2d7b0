0733f637dff09ba3ac91962419948b88
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.mocksClient = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _faker = _interopRequireDefault(require("faker"));

var _graphql = require("graphql");

var _apolloClientMock = _interopRequireDefault(require("./helpers/apolloClientMock"));

var _roles = require("../shared/roles");

var _schema = _interopRequireDefault(require("./schema.graphqls"));

var _userlist2 = require("./graphql/query/userlist");

var _userItem = require("./graphql/query/userItem");

var _celItem = require("./graphql/query/celItem");

var _cellTree = _interopRequireDefault(require("./graphql/query/cellTree"));

var _celllist2 = require("./graphql/query/celllist");

var _documentItem = require("./graphql/query/documentItem");

var _documentlist2 = require("./graphql/query/documentlist");

var _projectitem2 = require("./graphql/query/projectitem");

var _notificationList2 = require("./graphql/query/notificationList");

var _notificationItem = require("./graphql/query/notificationItem");

var _projectlist = require("./graphql/query/projectlist");

var _revisionitem = require("./graphql/query/revisionitem");

var _revisionList2 = require("./graphql/query/revisionList");

var _blockitem2 = require("./graphql/query/blockitem");

/** Apollo Client Mock */

/** Constants */

/** Schema */

/** Mock query */
var defaultMocks = {
  Query: function Query() {
    return {
      userlist: function userlist() {
        return (0, _userlist2.userlist)(_faker["default"].random.number(5));
      },
      useritem: _userItem.useritem,
      documentitem: function documentitem() {
        return (0, _documentItem.documentitem)();
      },
      currentuseritem: function currentuseritem() {
        var result = (0, _userItem.useritem)();
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve(result);
          }, _faker["default"].random.number(0));
        });
      },
      templatelist: function templatelist() {
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve((0, _projectlist.projectlist)(10, {
              isTemplate: true
            }));
          }, _faker["default"].random.number(2000));
        });
      },
      projectitem: function projectitem(query, _ref) {
        var id = _ref.id;
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve((0, _objectSpread2["default"])({}, (0, _projectitem2.projectitem)(), {
              id: id
            }));
          }, _faker["default"].random.number(0));
        });
      },
      projectList: function projectList(query, _ref2) {
        var id = _ref2.id;
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve((0, _projectlist.projectlist)(4));
          }, _faker["default"].random.number(0));
        });
      },
      revisionitem: function revisionitem() {
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve(revisionItem());
          }, _faker["default"].random.number(0));
        });
      },
      revisionList: function revisionList() {
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve((0, _revisionList2.revisionList)(2));
          }, _faker["default"].random.number(0));
        });
      },
      documentlist: function documentlist() {
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve((0, _documentlist2.documentlist)(1));
          }, _faker["default"].random.number(0));
        });
      },
      notificationList: function notificationList() {
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve((0, _notificationList2.notificationList)(1));
          }, _faker["default"].random.number(0));
        });
      },
      celllist: function celllist(query, props) {
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve((0, _celllist2.celllist)());
          }, _faker["default"].random.number(0));
        });
      },
      cellitem: function cellitem(query, props) {
        var id = props.id;
        return new Promise(function (resolve) {
          setTimeout(function () {
            var result = _cellTree["default"].find(function (item) {
              return item.id === id;
            });

            resolve(result);
          }, _faker["default"].random.number(0));
        });
      },
      blockitem: function blockitem(query, props) {
        var id = props.id;
        return new Promise(function (resolve) {
          setTimeout(function () {
            resolve((0, _blockitem2.blockitem)());
          }, _faker["default"].random.number(0));
        });
      }
    };
  },
  Mutation: function Mutation() {
    var _ref3;

    return _ref3 = {
      /**
       * @params {func} mutation - этот же запрос
       * @params {object} props - аргументы которые были переданы
       * */
      createuser: function createuser(mutation, props) {
        // TODO review: добавить рандомную задержку от 500 до 3000
        return setTimeout(function () {
          if (props.email === 'error@okan.su') {
            throw new _graphql.GraphQLError('already registered');
          } else {
            return props;
          }
        }, 10000);
      },
      activateuser: function activateuser(mutation, props) {
        // TODO review: добавить рандомную задержку от 500 до 3000
        return setTimeout(function () {
          if (props.email === 'error@okan.su') {
            throw new _graphql.GraphQLError('already registered');
          } else {
            return props;
          }
        }, 5000);
      },
      updateuser: function updateuser(mutation, props) {
        return (// для имитации запроса к серверу с рандомной задержкой и результатом.
          new Promise(function (resolve, reject) {
            setTimeout(function () {
              _faker["default"].random.number(1) ? resolve((0, _objectSpread2["default"])({}, (0, _userItem.useritem)())) : reject(JSON.stringify({
                errors: [{
                  message: 'error!'
                }]
              }));
            }, _faker["default"].random.number(2000));
          })
        );
      },
      changepassword: function changepassword(mutation, props) {
        return props;
      },
      createdocument: function createdocument(mutation, props) {
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            _faker["default"].random.number(1) ? resolve((0, _objectSpread2["default"])({}, (0, _documentItem.documentitem)(), {
              children: null,
              name: props.name
            })) : reject(JSON.stringify({
              errors: [{
                message: 'error!'
              }]
            }));
          }, _faker["default"].random.number(2000));
        });
      },
      createrevision: function createrevision(mutation, props) {
        console.log('createrevision: ', props);
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            _faker["default"].random.number(1) ? resolve((0, _objectSpread2["default"])({}, (0, _documentItem.documentitem)(), {
              childcell: null,
              name: props.name
            })) : reject(JSON.stringify({
              errors: [{
                message: 'error!'
              }]
            }));
          }, _faker["default"].random.number(2000));
        });
      },
      createcell: function createcell(mutation, props) {
        console.log('cellitem: ', props);
        var prevcell = props.prevcell,
            parent = props.parent;
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve({
              cell: (0, _objectSpread2["default"])({}, (0, _celItem.celItem)({
                prevcell: prevcell,
                parent: parent
              }))
            });
          }, _faker["default"].random.number(2000));
        });
      },
      bindingcell: function bindingcell(mutation, props) {
        var parent = props.parent;
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve({
              cell: (0, _objectSpread2["default"])({}, (0, _celItem.celItem)({
                parent: parent
              }))
            });
          }, _faker["default"].random.number(2000));
        });
      },
      unbindingcell: function unbindingcell(mutation, props) {
        var cell = props.cell;
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve({
              cell: (0, _objectSpread2["default"])({}, (0, _celItem.celItem)({
                cell: cell
              }))
            });
          }, _faker["default"].random.number(2000));
        });
      },
      createproject: function createproject(mutation, props) {
        console.log('createproject: ', props);
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve({
              project: (0, _objectSpread2["default"])({}, (0, _projectitem2.projectitem)(), props)
            });
          }, _faker["default"].random.number(2000));
        });
      },
      updateproject: function updateproject(mutation, props) {
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve({
              project: (0, _objectSpread2["default"])({}, (0, _projectitem2.projectitem)(), props)
            });
          }, _faker["default"].random.number(2000));
        });
      },
      updatedocument: function updatedocument(mutation, props) {
        return new Promise(function (resolve, reject) {
          setTimeout(function () {
            resolve({
              document: (0, _objectSpread2["default"])({}, (0, _documentItem.documentitem)(), props)
            });
          }, _faker["default"].random.number(2000));
        });
      }
    }, (0, _defineProperty2["default"])(_ref3, "createdocument", function createdocument(mutation, props) {
      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          var document = (0, _objectSpread2["default"])({}, (0, _documentItem.documentitem)(), props);
          console.log('documentitem(): ', (0, _documentItem.documentitem)());
          console.log('document: ', document);
          console.log('document: ', props);
          resolve({
            document: document
          });
        }, _faker["default"].random.number(2000));
      });
    }), (0, _defineProperty2["default"])(_ref3, "createblock", function createblock(mutation, props) {
      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          resolve({
            block: (0, _objectSpread2["default"])({}, (0, _blockitem2.blockitem)(props))
          });
        }, _faker["default"].random.number(2000));
      });
    }), _ref3;
  }
};
var mocksClient = (0, _apolloClientMock["default"])(defaultMocks, _schema["default"])();
exports.mocksClient = mocksClient;
var _default = mocksClient;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,