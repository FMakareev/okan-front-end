{"version":3,"sources":["FormProjectSettings.js"],"names":["notificationOpts","success","title","message","position","autoDismiss","error","FormProjectSettings","initialState","value","data","variables","Object","assign","props","then","response","setNotificationSuccess","setState","redirect","graphQLErrors","setNotificationError","SubmissionError","_error","handleSubmit","submitting","invalid","state","submit","TextFieldWithTooltip","UserListQuery","loading","TextFieldArray","userlist","map","item","id","name","firstname","lastname","patronymic","CheckboxBase","Component","PropTypes","func","bool","mb","string","formPropTypes","ProjectSettingsMutation","values","dispatch","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { graphql, Query } from 'react-apollo';\r\nimport { success, error } from 'react-notification-system-redux';\r\nimport { Field, reduxForm, SubmissionError, Form, FieldArray, getFormValues } from 'redux-form';\r\nimport UserListQuery from './UserListQuery.graphql';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n/**View */\r\nimport TextFieldWithTooltip from '@lib/ui/TextFieldWithTooltip/TextFieldWithTooltip';\r\nimport ButtonWithImage from '@lib/ui/ButtonWithImage/ButtonWithImage';\r\nimport Text from '@lib/ui/Text/Text';\r\nimport Box from '@lib/ui/Box/Box';\r\nimport TextFieldArray from '@lib/ui/TextFieldArray/TextFieldArray';\r\nimport { CheckboxBase } from '@lib/ui/CheckboxBase/CheckboxBase';\r\n\r\n/**Image */\r\nimport { SvgSave } from '@lib/ui/Icons/SvgSave';\r\n\r\n/**PropTypes */\r\nimport { formPropTypes } from '../../../../propTypes/Forms/FormPropTypes';\r\n\r\n/** Graphql schema */\r\nimport ProjectSettingsMutation from './ProjectSettingsMutation.graphql';\r\nimport { captureException } from '../../../../hocs/withSentry/withSentry';\r\n\r\n/** CSS style in other Component */\r\nimport { BoxStyled } from '../FormProjectCreate/FormProjectCreate';\r\n\r\nconst notificationOpts = () => ({\r\n  success: {\r\n    title: 'Настройки проекта успешно обновлены',\r\n    message: 'Настройки проекта успешно обновлены',\r\n    position: 'tr',\r\n    autoDismiss: 2,\r\n  },\r\n  error: {\r\n    title: 'Настройки проекта не обновлены',\r\n    message: 'Настройки проекта не обновлены',\r\n    position: 'tr',\r\n    autoDismiss: 2,\r\n  },\r\n});\r\n\r\nexport class FormProjectSettings extends Component {\r\n  static propTypes = {\r\n    handleSubmit: PropTypes.func,\r\n    invalid: PropTypes.bool,\r\n    mb: PropTypes.string,\r\n    setNotificationError: PropTypes.func,\r\n    setNotificationSuccess: PropTypes.func,\r\n    submitting: PropTypes.bool,\r\n    ...formPropTypes,\r\n  };\r\n\r\n  state = this.initialState;\r\n\r\n  get initialState() {\r\n    return { redirect: null };\r\n  }\r\n\r\n  submit = value => {\r\n    const data = { variables: Object.assign({}, value) };\r\n\r\n    return this.props['@apollo/update'](data)\r\n      .then(response => {\r\n        this.props.setNotificationSuccess(notificationOpts().success);\r\n        this.setState(() => ({ redirect: '/app/project-list' }));\r\n\r\n        return response;\r\n      })\r\n      .catch(({ graphQLErrors, message }) => {\r\n        this.props.setNotificationError(notificationOpts().error);\r\n\r\n        captureException(error);\r\n        throw new SubmissionError({ _error: message });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { handleSubmit, submitting, invalid } = this.props;\r\n    const { redirect } = this.state;\r\n\r\n    if (redirect) {\r\n      return <Redirect to={redirect} />;\r\n    }\r\n\r\n    return (\r\n      <Form onSubmit={handleSubmit(this.submit)}>\r\n        <BoxStyled mb={16}>\r\n          <Field\r\n            name=\"name\"\r\n            component={TextFieldWithTooltip}\r\n            placeholder={'Название документа'}\r\n            type=\"text\"\r\n            fontSize={6}\r\n            lineHeight={8}\r\n            fontFamily={'secondary'}\r\n          />\r\n        </BoxStyled>\r\n\r\n        <Text variant={'documentTitle'} mb={4}>\r\n          Согласующие\r\n        </Text>\r\n\r\n        <Box mb={'45px'}>\r\n          <Query query={UserListQuery}>\r\n            {({ loading, data }) => {\r\n              return (\r\n                <Field\r\n                  isLoading={loading}\r\n                  name={'partners'}\r\n                  component={TextFieldArray}\r\n                  type={'text'}\r\n                  labelKey={'name'}\r\n                  valueKey={'id'}\r\n                  options={\r\n                    data &&\r\n                    data.userlist &&\r\n                    data.userlist.map(item => ({\r\n                      id: item.id,\r\n                      name: `${item.firstname} ${item.lastname} ${item.patronymic}`,\r\n                    }))\r\n                  }\r\n                />\r\n              );\r\n            }}\r\n          </Query>\r\n        </Box>\r\n\r\n        <Box mb={'90px'}>\r\n          <Field component={CheckboxBase} name={'isTemplate'}>\r\n            <Text fontFamily={'primary300'} fontSize={6} lineHeight={8} color={'color11'} ml={20}>\r\n              Сделать проект шаблоном\r\n            </Text>\r\n          </Field>\r\n        </Box>\r\n\r\n        <ButtonWithImage\r\n          type=\"submit\"\r\n          variant={'large'}\r\n          size={'medium'}\r\n          children={'Сохранить настройки'}\r\n          leftIcon={SvgSave()}\r\n          mr={9}\r\n          disabled={submitting || invalid}\r\n          width={'100%'}\r\n          widthIcon={'16px'}\r\n        />\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nFormProjectSettings = graphql(ProjectSettingsMutation, {\r\n  name: '@apollo/update',\r\n})(FormProjectSettings);\r\n\r\nFormProjectSettings = connect(\r\n  state => ({\r\n    values: getFormValues('FormProjectSettings')(state),\r\n  }),\r\n  dispatch => ({\r\n    setNotificationSuccess: message => dispatch(success(message)),\r\n    setNotificationError: message => dispatch(error(message)),\r\n  }),\r\n)(FormProjectSettings);\r\n\r\nFormProjectSettings = reduxForm({\r\n  form: 'FormProjectSettings',\r\n})(FormProjectSettings);\r\n\r\nexport default FormProjectSettings;\r\n"]}