{"version":3,"sources":["TooltipBase.js"],"names":["RelativeStyled","Relative","TooltipBase","nextProps","isActive","props","warning","position","children","Component","PropTypes","string","top","any","left","bool","element"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA;;AADA;AAGA,IAAMA,cAAc;AAAA;AAAG,kCAAOC,gBAAP,CAAH;AAAA;AAAA,mBAApB;AAIA;;;;;IAKaC,W;;;;;;;;;;;;0CAsBWC,S,EAAW;AAC/B,UAAIA,SAAS,CAACC,QAAV,KAAuB,KAAKC,KAAL,CAAWD,QAAtC,EAAgD;AAC9C,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;;;6BAEQ;AAAA,wBAC2C,KAAKC,KADhD;AAAA,UACCC,OADD,eACCA,OADD;AAAA,UACUC,QADV,eACUA,QADV;AAAA,UACoBH,QADpB,eACoBA,QADpB;AAAA,UAC8BI,QAD9B,eAC8BA,QAD9B;AAEP,aACE,gCAAC,cAAD,QACGJ,QAAQ,IACP,gCAAC,0BAAD;AAAS,QAAA,QAAQ,EAAEG;AAAnB,SACE,gCAAC,kCAAD;AAAiB,QAAA,QAAQ,EAAEA;AAA3B,QADF,EAEE,gCAAC,iCAAD;AAAgB,QAAA,QAAQ,EAAEA;AAA1B,QAFF,EAGE,gCAAC,0BAAD,QAAUD,OAAV,CAHF,CAFJ,EAQGE,QARH,CADF;AAYD;;;EA3C8BC,gB;;;iCAApBP,W,eACQ;AACjB;AACAI,EAAAA,OAAO,EAAEI,sBAAUC,MAFF;;AAGjB;AACAJ,EAAAA,QAAQ,EAAEG,sBAAUC,MAJH;;AAKjB;AACAC,EAAAA,GAAG,EAAEF,sBAAUG,GANE;;AAOjB;AACAC,EAAAA,IAAI,EAAEJ,sBAAUG,GARC;;AASjB;AACAT,EAAAA,QAAQ,EAAEM,sBAAUK,IAVH;;AAWjB;AACAP,EAAAA,QAAQ,EAAEE,sBAAUM;AAZH,C;iCADRd,W,kBAgBW;AACpBI,EAAAA,OAAO,EAAE,wBADW;AAEpBC,EAAAA,QAAQ,EAAE,QAFU;AAGpBH,EAAAA,QAAQ,EAAE;AAHU,C;eA8BTF,W","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Relative } from 'rebass';\r\nimport styled from 'styled-components';\r\n\r\n/** Css value */\r\nimport { Wrapper, OutsideTriangle, InsideTriangle, Warning } from './TooltipBaseStyled';\r\n\r\nconst RelativeStyled = styled(Relative)`\r\n  width: 100%;\r\n`;\r\n\r\n/**\r\n * Компонент тултипа (Tooltip)\r\n * @example ./TooltipBase.example.md\r\n */\r\n\r\nexport class TooltipBase extends Component {\r\n  static propTypes = {\r\n    /** message text */\r\n    warning: PropTypes.string,\r\n    /** tooltip position */\r\n    position: PropTypes.string,\r\n    /** top position % */\r\n    top: PropTypes.any,\r\n    /** right position % */\r\n    left: PropTypes.any,\r\n    /** active or not */\r\n    isActive: PropTypes.bool,\r\n    /** the element whose tooltip is displayed */\r\n    children: PropTypes.element,\r\n  };\r\n\r\n  static defaultProps = {\r\n    warning: 'Информация не доступна',\r\n    position: 'bottom',\r\n    isActive: false,\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    if (nextProps.isActive !== this.props.isActive) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    const { warning, position, isActive, children } = this.props;\r\n    return (\r\n      <RelativeStyled>\r\n        {isActive && (\r\n          <Wrapper position={position}>\r\n            <OutsideTriangle position={position} />\r\n            <InsideTriangle position={position} />\r\n            <Warning>{warning}</Warning>\r\n          </Wrapper>\r\n        )}\r\n        {children}\r\n      </RelativeStyled>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TooltipBase;\r\n"]}