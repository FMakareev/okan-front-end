035bf7c1442fe6ebf117c3d37fec3414
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FormRegistration = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _reactRouterDom = require("react-router-dom");

var _reactApollo = require("react-apollo");

var _reactNotificationSystemRedux = require("react-notification-system-redux");

var _reduxForm = require("redux-form");

var _withSentry = require("../../../../hocs/withSentry/withSentry");

var _Box = _interopRequireDefault(require("@lib/ui/Box/Box"));

var _TooltipBase = _interopRequireDefault(require("@lib/ui/TooltipBase/TooltipBase"));

var _FormButtonSubmit = _interopRequireDefault(require("@lib/ui/FormButtonSubmit/FormButtonSubmit"));

var _TextFieldWithTooltip = _interopRequireDefault(require("@lib/ui/TextFieldWithTooltip/TextFieldWithTooltip"));

var _TextFieldLastWrapper = require("@lib/ui/TextFieldLastWrapper/TextFieldLastWrapper");

var _TextFieldFirstWrapper = require("@lib/ui/TextFieldFirstWrapper/TextFieldFirstWrapper");

var _FormLogo = _interopRequireDefault(require("../FormLogo/FormLogo"));

var _FieldInputPassword = _interopRequireDefault(require("../FieldInputPassword/FieldInputPassword"));

var _FetchUserAuth = require("../FetchUserAuth/FetchUserAuth");

var _FormPropTypes = require("../../../../propTypes/Forms/FormPropTypes");

var _ActivateUserMutation = _interopRequireDefault(require("./ActivateUserMutation.graphql"));

var _CurrentUserItemQuery = _interopRequireDefault(require("./CurrentUserItemQuery.graphql"));

var _isEmail = _interopRequireDefault(require("../../../../utils/validation/isEmail"));

var _required = _interopRequireDefault(require("../../../../utils/validation/required"));

var _actionTypes = require("../../../../store/reducers/user/actionTypes");

/** View */

/** Components */

/** PropTypes */

/** GraphQL schema */

/** Validation */

/** Constatnts */
var validate = function validate(_ref) {
  var email = _ref.email,
      password = _ref.password,
      retryPas = _ref.retryPas;
  var errors = {};
  console.log('validate: ', email, password, retryPas);

  if (!email) {
    errors.email = 'Обязательно для заполнения';
  }

  if (!(0, _isEmail["default"])(errors.email)) {
    errors.email = (0, _isEmail["default"])(errors.email);
  }

  if (!password) {
    errors.password = 'Обязательно для заполнения';
  }

  if (!retryPas) {
    errors.retryPas = 'Обязательно для заполнения';
  }

  if (password !== undefined && password.length <= 7) {
    errors.password = 'Пароль должен состоять минимум из 8 символов';
  }

  if (password !== undefined && password.length >= 30) {
    errors.password = 'Пароль должен состоять не больше 30 символов';
  }

  if (password !== retryPas) {
    errors.retryPas = 'Пароли не совпадают';
  }

  return errors;
};

var notificationOpts = function notificationOpts() {
  return {
    success: {
      title: 'Пользователь успешно зарегистрирован',
      message: 'Пользователь успешно зарегистрирован',
      position: 'tr',
      autoDismiss: 2
    },
    error: {
      title: 'Пользователь не был зарегистрирован',
      message: 'Пользователь не был зарегистрирован',
      position: 'tr',
      autoDismiss: 2
    }
  };
};

var FormRegistration =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(FormRegistration, _Component);

  function FormRegistration(_props) {
    var _this;

    (0, _classCallCheck2["default"])(this, FormRegistration);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(FormRegistration).call(this, _props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getUser", function (email) {
      var _this$props = _this.props,
          client = _this$props.client,
          history = _this$props.history,
          setNotificationSuccess = _this$props.setNotificationSuccess,
          setNotificationError = _this$props.setNotificationError;
      return client.query({
        query: _CurrentUserItemQuery["default"],
        variables: {
          email: email
        }
      }).then(function (result) {
        if (result.errors || result.data.currentuseritem === null) {
          // TO DO change this
          throw result;
        } else {
          _this.setState(function () {
            return {
              apolloError: null,
              isLoading: false
            };
          });

          _this.setUser(result);

          history.push("/app/project-list");
          setNotificationSuccess(notificationOpts().success);
          return Promise.resolve(result);
        }
      })["catch"](function (_ref2) {
        var graphQLErrors = _ref2.graphQLErrors,
            message = _ref2.message,
            error = _ref2.error,
            networkError = _ref2.networkError,
            rest = (0, _objectWithoutProperties2["default"])(_ref2, ["graphQLErrors", "message", "error", "networkError"]);
        // console.log('graphQLErrors: ', graphQLErrors);
        // console.log('message: ', message);
        // console.log('networkError: ', networkError);
        // console.log('rest: ', rest);
        // console.log('error: ', error);
        setNotificationError(notificationOpts().error);

        _this.setState(function () {
          return {
            submitting: false,
            apolloError: 'Ошибка входа',
            isLoading: false
          };
        });
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setUser", function (props) {
      var currentuseritem = props.data.currentuseritem;
      var addUser = _this.props.addUser;
      addUser(currentuseritem);
      localStorage.setItem('user', JSON.stringify((0, _objectSpread2["default"])({}, currentuseritem)));
    });
    _this.state = _this.initialState;
    _this.submit = _this.submit.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(FormRegistration, [{
    key: "userAuth",
    value: function userAuth(value) {
      var _this2 = this;

      return (0, _FetchUserAuth.FetchUserAuth)(value).then(function (response) {
        if (response.status >= 400 || !document.cookie) {
          throw response;
        } else {
          return _this2.getUser(value.uname);
        }
      })["catch"](function (error) {
        var status = error.status;

        _this2.setState(function () {
          return {
            submitting: false,
            isLoading: false,
            apolloError: null
          };
        });

        (0, _withSentry.captureException)(error);

        if (status === 401 || status === 403) {
          throw new _reduxForm.SubmissionError({
            _error: 'Не верно введен логин или пароль'
          });
        } else {
          throw new _reduxForm.SubmissionError({
            _error: 'Пользователь не найден'
          });
        }
      });
    }
  }, {
    key: "submit",
    value: function submit(value) {
      var _this3 = this;

      var data = {
        variables: Object.assign({}, value)
      };
      console.log(123, value);
      this.setState(function (_ref3) {
        var submitting = _ref3.submitting,
            isLoading = _ref3.isLoading;
        return {
          submitting: !submitting,
          isLoading: !isLoading
        };
      });
      return this.props['@apollo/create'](data).then(function (response) {
        if (response.errors) {
          throw response;
        } else {
          _this3.userAuth({
            uname: value.email,
            ups: value.password
          });

          return Promise.resolve(response);
        }
      })["catch"](function (error) {
        console.log(error);

        _this3.props.setNotificationError(notificationOpts().error);

        _this3.setState(function () {
          return {
            submitting: false,
            apolloError: 'Ошибка авторизации пользователя',
            isLoading: false
          };
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          handleSubmit = _this$props2.handleSubmit,
          pristine = _this$props2.pristine,
          invalid = _this$props2.invalid,
          error = _this$props2.error;
      var _this$state = this.state,
          isLoading = _this$state.isLoading,
          apolloError = _this$state.apolloError,
          submitting = _this$state.submitting;
      console.log(pristine, submitting, invalid);
      return _react["default"].createElement(_reduxForm.Form, {
        onSubmit: handleSubmit(this.submit)
      }, _react["default"].createElement(_FormLogo["default"], null), _react["default"].createElement(_Box["default"], {
        mb: '100px'
      }, _react["default"].createElement(_TextFieldFirstWrapper.TextFieldFirstWrapper, null, _react["default"].createElement(_reduxForm.Field, {
        name: 'email',
        component: _TextFieldWithTooltip["default"],
        placeholder: 'Логин',
        type: "text",
        left: '40%'
      })), _react["default"].createElement(_reduxForm.Field, {
        name: 'password',
        placeholder: 'Пароль',
        variant: 'secondary',
        component: _FieldInputPassword["default"]
      }), _react["default"].createElement(_TextFieldLastWrapper.TextFieldLastWrapper, null, _react["default"].createElement(_reduxForm.Field, {
        name: 'retryPas',
        placeholder: 'Потвердите пароль',
        variant: 'secondary',
        component: _FieldInputPassword["default"]
      }))), _react["default"].createElement(_FormButtonSubmit["default"], {
        disabled: pristine || submitting || invalid,
        ml: 9,
        isLoading: isLoading,
        error: error || apolloError
      }, _react["default"].createElement(_TooltipBase["default"], {
        isActive: error,
        warning: error
      }, "\u0412\u043E\u0439\u0442\u0438")));
    }
  }, {
    key: "initialState",
    get: function get() {
      return {
        submitting: false,
        apolloError: null,
        isLoading: false
      };
    }
  }]);
  return FormRegistration;
}(_react.Component);

exports.FormRegistration = FormRegistration;
(0, _defineProperty2["default"])(FormRegistration, "propTypes", (0, _objectSpread2["default"])({}, _FormPropTypes.formPropTypes));
exports.FormRegistration = FormRegistration = (0, _reactRouterDom.withRouter)(FormRegistration);
exports.FormRegistration = FormRegistration = (0, _reactApollo.withApollo)(FormRegistration);
exports.FormRegistration = FormRegistration = (0, _reactApollo.graphql)(_ActivateUserMutation["default"], {
  name: '@apollo/create'
})(FormRegistration);
exports.FormRegistration = FormRegistration = (0, _reactRedux.connect)(function (state) {
  return {
    values: (0, _reduxForm.getFormValues)('FormRegistration')(state)
  };
}, function (dispatch) {
  return {
    addUser: function addUser(user) {
      return dispatch({
        type: _actionTypes.USER_ADD,
        user: user
      });
    },
    setNotificationSuccess: function setNotificationSuccess(message) {
      return dispatch((0, _reactNotificationSystemRedux.success)(message));
    },
    setNotificationError: function setNotificationError(message) {
      return dispatch((0, _reactNotificationSystemRedux.error)(message));
    }
  };
})(FormRegistration);
exports.FormRegistration = FormRegistration = (0, _reduxForm.reduxForm)({
  form: 'FormRegistration',
  validate: validate
})(FormRegistration);
var _default = FormRegistration; // validate={[required, isEmail]}

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,