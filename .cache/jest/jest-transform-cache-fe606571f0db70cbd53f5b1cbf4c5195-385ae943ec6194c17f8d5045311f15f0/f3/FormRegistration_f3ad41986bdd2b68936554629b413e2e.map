{"version":3,"sources":["FormRegistration.js"],"names":["validate","email","password","retryPas","errors","console","log","undefined","length","notificationOpts","success","title","message","position","autoDismiss","error","FormRegistration","props","client","history","setNotificationSuccess","setNotificationError","query","CurrentUserItemQuery","variables","then","result","data","currentuseritem","setState","apolloError","isLoading","setUser","push","Promise","resolve","graphQLErrors","networkError","rest","submitting","addUser","localStorage","setItem","JSON","stringify","state","initialState","submit","bind","value","response","status","document","cookie","getUser","uname","SubmissionError","_error","Object","assign","userAuth","ups","handleSubmit","pristine","invalid","TextFieldWithTooltip","FieldInputPassword","Component","formPropTypes","ActivateUserMutation","name","values","dispatch","user","type","USER_ADD","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { graphql, withApollo } from 'react-apollo';\r\nimport { success, error } from 'react-notification-system-redux';\r\nimport { Field, reduxForm, SubmissionError, Form, getFormValues } from 'redux-form';\r\nimport { captureException } from '../../../../hocs/withSentry/withSentry';\r\n\r\n/** View */\r\nimport Box from '@lib/ui/Box/Box';\r\nimport TooltipBase from '@lib/ui/TooltipBase/TooltipBase';\r\nimport FormButtonSubmit from '@lib/ui/FormButtonSubmit/FormButtonSubmit';\r\nimport TextFieldWithTooltip from '@lib/ui/TextFieldWithTooltip/TextFieldWithTooltip';\r\nimport { TextFieldLastWrapper } from '@lib/ui/TextFieldLastWrapper/TextFieldLastWrapper';\r\nimport { TextFieldFirstWrapper } from '@lib/ui/TextFieldFirstWrapper/TextFieldFirstWrapper';\r\n\r\n/** Components */\r\nimport FormLogo from '../FormLogo/FormLogo';\r\nimport FieldInputPassword from '../FieldInputPassword/FieldInputPassword';\r\nimport { FetchUserAuth } from '../FetchUserAuth/FetchUserAuth';\r\n\r\n/** PropTypes */\r\nimport { formPropTypes } from '../../../../propTypes/Forms/FormPropTypes';\r\n\r\n/** GraphQL schema */\r\nimport ActivateUserMutation from './ActivateUserMutation.graphql';\r\nimport CurrentUserItemQuery from './CurrentUserItemQuery.graphql';\r\n\r\n/** Validation */\r\nimport isEmail from '../../../../utils/validation/isEmail';\r\nimport required from '../../../../utils/validation/required';\r\n\r\n/** Constatnts */\r\nimport { USER_ADD } from '../../../../store/reducers/user/actionTypes';\r\n\r\nconst validate = ({ email, password, retryPas }) => {\r\n  const errors = {};\r\n  console.log('validate: ',email, password, retryPas);\r\n  if (!email) {\r\n    errors.email = 'Обязательно для заполнения';\r\n  }\r\n  if (!isEmail(errors.email)) {\r\n    errors.email = isEmail(errors.email);\r\n  }\r\n\r\n  if (!password) {\r\n    errors.password = 'Обязательно для заполнения';\r\n  }\r\n\r\n  if (!retryPas) {\r\n    errors.retryPas = 'Обязательно для заполнения';\r\n  }\r\n\r\n  if (password !== undefined && password.length <= 7) {\r\n    errors.password = 'Пароль должен состоять минимум из 8 символов';\r\n  }\r\n\r\n  if (password !== undefined && password.length >= 30) {\r\n    errors.password = 'Пароль должен состоять не больше 30 символов';\r\n  }\r\n\r\n  if (password !== retryPas) {\r\n    errors.retryPas = 'Пароли не совпадают';\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nconst notificationOpts = () => ({\r\n  success: {\r\n    title: 'Пользователь успешно зарегистрирован',\r\n    message: 'Пользователь успешно зарегистрирован',\r\n    position: 'tr',\r\n    autoDismiss: 2,\r\n  },\r\n  error: {\r\n    title: 'Пользователь не был зарегистрирован',\r\n    message: 'Пользователь не был зарегистрирован',\r\n    position: 'tr',\r\n    autoDismiss: 2,\r\n  },\r\n});\r\n\r\nexport class FormRegistration extends Component {\r\n  static propTypes = {\r\n    ...formPropTypes,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = this.initialState;\r\n\r\n    this.submit = this.submit.bind(this);\r\n  }\r\n\r\n  get initialState() {\r\n    return { submitting: false, apolloError: null, isLoading: false };\r\n  }\r\n\r\n  userAuth(value) {\r\n    return FetchUserAuth(value)\r\n      .then(response => {\r\n        if (response.status >= 400 || !document.cookie) {\r\n          throw response;\r\n        } else {\r\n          return this.getUser(value.uname);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        const { status } = error;\r\n        this.setState(() => ({ submitting: false, isLoading: false, apolloError: null }));\r\n        captureException(error);\r\n\r\n        if (status === 401 || status === 403) {\r\n          throw new SubmissionError({ _error: 'Не верно введен логин или пароль' });\r\n        } else {\r\n          throw new SubmissionError({ _error: 'Пользователь не найден' });\r\n        }\r\n      });\r\n  }\r\n\r\n  getUser = email => {\r\n    const { client, history, setNotificationSuccess, setNotificationError } = this.props;\r\n    return client\r\n      .query({ query: CurrentUserItemQuery, variables: { email: email } })\r\n      .then(result => {\r\n        if (result.errors || result.data.currentuseritem === null) {\r\n          // TO DO change this\r\n          throw result;\r\n        } else {\r\n          this.setState(() => ({ apolloError: null, isLoading: false }));\r\n          this.setUser(result);\r\n\r\n          history.push(`/app/project-list`);\r\n          setNotificationSuccess(notificationOpts().success);\r\n          return Promise.resolve(result);\r\n        }\r\n      })\r\n      .catch(({ graphQLErrors, message, error, networkError, ...rest }) => {\r\n        // console.log('graphQLErrors: ', graphQLErrors);\r\n        // console.log('message: ', message);\r\n        // console.log('networkError: ', networkError);\r\n        // console.log('rest: ', rest);\r\n        // console.log('error: ', error);\r\n\r\n        setNotificationError(notificationOpts().error);\r\n\r\n        this.setState(() => ({\r\n          submitting: false,\r\n          apolloError: 'Ошибка входа',\r\n          isLoading: false,\r\n        }));\r\n      });\r\n  };\r\n\r\n  setUser = props => {\r\n    const {\r\n      data: { currentuseritem },\r\n    } = props;\r\n\r\n    const { addUser } = this.props;\r\n\r\n    addUser(currentuseritem);\r\n\r\n    localStorage.setItem('user', JSON.stringify({ ...currentuseritem }));\r\n  };\r\n\r\n  submit(value) {\r\n    const data = { variables: Object.assign({}, value) };\r\n    console.log(123, value);\r\n\r\n    this.setState(({ submitting, isLoading }) => {\r\n      return { submitting: !submitting, isLoading: !isLoading };\r\n    });\r\n\r\n    return this.props['@apollo/create'](data)\r\n      .then(response => {\r\n        if (response.errors) {\r\n          throw response;\r\n        } else {\r\n          this.userAuth({\r\n            uname: value.email,\r\n            ups: value.password,\r\n          });\r\n          return Promise.resolve(response);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        this.props.setNotificationError(notificationOpts().error);\r\n        this.setState(() => ({\r\n          submitting: false,\r\n          apolloError: 'Ошибка авторизации пользователя',\r\n          isLoading: false,\r\n        }));\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { handleSubmit, pristine, invalid, error } = this.props;\r\n    const { isLoading, apolloError, submitting } = this.state;\r\n    console.log(pristine, submitting, invalid);\r\n\r\n    return (\r\n      <Form onSubmit={handleSubmit(this.submit)}>\r\n        <FormLogo />\r\n\r\n        <Box mb={'100px'}>\r\n          <TextFieldFirstWrapper>\r\n            <Field\r\n              name={'email'}\r\n              component={TextFieldWithTooltip}\r\n              placeholder={'Логин'}\r\n              type=\"text\"\r\n              left={'40%'}\r\n            />\r\n          </TextFieldFirstWrapper>\r\n\r\n          <Field\r\n            name={'password'}\r\n            placeholder={'Пароль'}\r\n            variant={'secondary'}\r\n            component={FieldInputPassword}\r\n          />\r\n\r\n          <TextFieldLastWrapper>\r\n            <Field\r\n              name={'retryPas'}\r\n              placeholder={'Потвердите пароль'}\r\n              variant={'secondary'}\r\n              component={FieldInputPassword}\r\n            />\r\n          </TextFieldLastWrapper>\r\n        </Box>\r\n        <FormButtonSubmit\r\n          disabled={pristine || submitting || invalid}\r\n          ml={9}\r\n          isLoading={isLoading}\r\n          error={error || apolloError}>\r\n          <TooltipBase isActive={error} warning={error}>\r\n            Войти\r\n          </TooltipBase>\r\n        </FormButtonSubmit>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nFormRegistration = withRouter(FormRegistration);\r\nFormRegistration = withApollo(FormRegistration);\r\n\r\nFormRegistration = graphql(ActivateUserMutation, {\r\n  name: '@apollo/create',\r\n})(FormRegistration);\r\n\r\nFormRegistration = connect(\r\n  state => ({\r\n    values: getFormValues('FormRegistration')(state),\r\n  }),\r\n  dispatch => ({\r\n    addUser: user => dispatch({ type: USER_ADD, user: user }),\r\n    setNotificationSuccess: message => dispatch(success(message)),\r\n    setNotificationError: message => dispatch(error(message)),\r\n  }),\r\n)(FormRegistration);\r\n\r\nFormRegistration = reduxForm({\r\n  form: 'FormRegistration',\r\n  validate,\r\n})(FormRegistration);\r\n\r\nexport default FormRegistration;\r\n\r\n// validate={[required, isEmail]}\r\n"]}