b3aaa4f6493124a1c77bbafab0851cc5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.userRemove = exports.userUpdate = exports.userInit = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _actionTypes = require("./actionTypes");

var _index = require("../../../apollo/index.client");

var _index2 = require("../../../apollo/index.server");

var _CurrentUserItemQuery = _interopRequireDefault(require("./CurrentUserItemQuery.graphql"));

var _resetUserToken = require("./resetUserToken");

/* global isBrowser */

/**
 * @desc метод инициализации пользователя в системе
 * */
var userInit = function userInit(state, request) {
  return function (dispatch) {
    var client = null;

    if (isBrowser) {
      client = (0, _index.client)();
    } else {
      client = (0, _index2.client)(request);
    }

    return new Promise(function (resolve, reject) {
      try {
        if (!state.user.initLoading && !state.user.isAuth) {
          dispatch({
            type: _actionTypes.USER_INIT_LOADING_START
          });
          client.query({
            query: _CurrentUserItemQuery["default"]
          }).then(function (response) {
            console.log('response:', response);
            var data = response.data;

            if (isBrowser) {
              localStorage.setItem('user', JSON.stringify(data.currentuseritem));
            }

            dispatch({
              type: _actionTypes.USER_INIT_LOADING_SUCCESS,
              user: (0, _objectSpread2["default"])({}, data.currentuseritem)
            });
            resolve(data.currentuseritem);
          })["catch"](function (error) {
            if (isBrowser) {
              localStorage.clear();
            }

            console.error('Error userInit: ', error);
            /** */

            dispatch({
              type: _actionTypes.USER_INIT_LOADING_ERROR,
              user: {
                error: _actionTypes.USER_NOT_AUTHORIZED
              }
            });
            resolve(error);
          });
        } else {
          resolve(true);
        }
      } catch (error) {
        console.error('Error userInit: ', error);
        dispatch({
          type: _actionTypes.USER_INIT_LOADING_ERROR,
          user: {
            error: _actionTypes.USER_NOT_AUTHORIZED
          }
        });
        resolve(error);
      }
    });
  };
};

exports.userInit = userInit;

var userUpdate = function userUpdate() {
  return function (dispatch) {
    var client = null;

    if (isBrowser) {
      client = _index.client;
    } else {
      client = _index2.client;
    }

    return new Promise(function (resolve, reject) {
      try {
        dispatch({
          type: _actionTypes.USER_UPDATE_LOADING_START,
          user: {
            loading: true
          }
        });
        client().query({
          query: _CurrentUserItemQuery["default"]
        }).then(function (response) {
          var data = response.data;

          if (isBrowser) {
            localStorage.setItem('user', JSON.stringify(data.currentuseritem));
          }

          dispatch({
            type: _actionTypes.USER_UPDATE_LOADING_SUCCESS,
            user: (0, _objectSpread2["default"])({}, data.currentuseritem)
          });
          resolve(data.currentuseritem);
        })["catch"](function (error) {
          console.log(error);

          if (isBrowser) {
            localStorage.clear();
          }

          dispatch({
            type: _actionTypes.USER_UPDATE_LOADING_ERROR,
            user: {
              error: error
            }
          });
          reject(error);
        });
      } catch (error) {
        reject(error);
      }
    });
  };
};

exports.userUpdate = userUpdate;

var userRemove = function userRemove() {
  return function (dispatch) {
    return new Promise(function (resolve, reject) {
      try {
        if (isBrowser) {
          // window.localStorage.clear();
          // const cookies = document.cookie.split(';');
          // for (let i = 0; i < cookies.length; i += 1) {
          //   const cookie = cookies[i];
          //   const eqPos = cookie.indexOf('=');
          //   const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
          //   document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT`;
          // }
          (0, _resetUserToken.resetUserToken)();
          dispatch(_actionTypes.USER_REMOVE);
          resolve(true);
        }
      } catch (error) {
        reject(error);
      }
    });
  };
};

exports.userRemove = userRemove;
var _default = {
  userInit: userInit,
  userUpdate: userUpdate,
  userRemove: userRemove
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,