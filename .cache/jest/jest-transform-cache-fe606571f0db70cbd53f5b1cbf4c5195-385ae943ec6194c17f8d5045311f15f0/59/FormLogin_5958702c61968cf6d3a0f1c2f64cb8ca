ae41508db1ee7c052bbad3ca68bcdd82
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FormLogin = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactApollo = require("react-apollo");

var _reactRouterDom = require("react-router-dom");

var _reduxForm = require("redux-form");

var _reactNotificationSystemRedux = require("react-notification-system-redux");

var _withSentry = require("../../../../hocs/withSentry/withSentry");

var _Box = _interopRequireDefault(require("@lib/ui/Box/Box"));

var _FormButtonSubmit = _interopRequireDefault(require("@lib/ui/FormButtonSubmit/FormButtonSubmit"));

var _TextFieldWithTooltip = _interopRequireDefault(require("@lib/ui/TextFieldWithTooltip/TextFieldWithTooltip"));

var _TextFieldFirstWrapper = require("@lib/ui/TextFieldFirstWrapper/TextFieldFirstWrapper");

var _TextFieldLastWrapper = require("@lib/ui/TextFieldLastWrapper/TextFieldLastWrapper");

var _withPreLoader = require("@lib/ui/withPreLoader/withPreLoader");

var _FormLogo = _interopRequireDefault(require("../FormLogo/FormLogo"));

var _FieldInputPassword = _interopRequireDefault(require("../FieldInputPassword/FieldInputPassword"));

var _FetchUserAuth = require("../FetchUserAuth/FetchUserAuth");

var _actionTypes = require("../../../../store/reducers/user/actionTypes");

var _UserEmailItemQuery = _interopRequireDefault(require("./UserEmailItemQuery.graphql"));

/** View */

/**Components */

/** constants */

/** query */
var validate = function validate(_ref) {
  var uname = _ref.uname,
      ups = _ref.ups;
  var errors = {};

  if (uname === undefined) {
    errors.uname = 'Обязательно для заполнения';
  }

  if (ups === undefined) {
    errors.ups = 'Обязательно для заполнения';
  }

  if (ups !== undefined && ups.length <= 8) {
    errors.ups = 'Пароль должен состоять минимум из 8 символов ';
  }

  if (ups !== undefined && ups.length >= 30) {
    errors.ups = 'Пароль должен состоять не больше 30 символов ';
  }

  return errors;
};

var notificationOpts = function notificationOpts() {
  return {
    success: {
      title: 'Вход выполнен',
      message: 'Вход выполнен',
      position: 'tr',
      autoDismiss: 2
    },
    error: {
      title: 'Вход не выполнен',
      message: 'Вход не выполнен',
      position: 'tr',
      autoDismiss: 2
    }
  };
};

var FormLogin =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(FormLogin, _Component);

  function FormLogin(_props) {
    var _this;

    (0, _classCallCheck2["default"])(this, FormLogin);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(FormLogin).call(this, _props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getUser", function (email) {
      var _this$props = _this.props,
          client = _this$props.client,
          history = _this$props.history,
          setNotificationSuccess = _this$props.setNotificationSuccess,
          setNotificationError = _this$props.setNotificationError;
      return client.query({
        query: _UserEmailItemQuery["default"],
        variables: {
          email: email
        }
      }).then(function (result) {
        if (result.errors || result.data.currentuseritem === null) {
          // TO DO change this
          throw result;
        } else {
          _this.setState(function () {
            return {
              apolloError: null,
              isLoading: false
            };
          });

          _this.setUser(result);

          setNotificationSuccess(notificationOpts().success);
          history.push("/app/profile");
          return Promise.resolve(result);
        }
      })["catch"](function (_ref2) {
        var graphQLErrors = _ref2.graphQLErrors,
            message = _ref2.message,
            error = _ref2.error,
            networkError = _ref2.networkError,
            rest = (0, _objectWithoutProperties2["default"])(_ref2, ["graphQLErrors", "message", "error", "networkError"]);
        setNotificationError(notificationOpts().error);
        (0, _withSentry.captureException)(error);

        _this.setState(function () {
          return {
            submitting: false,
            apolloError: 'Ошибка входа',
            isLoading: false
          };
        });
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setUser", function (props) {
      var currentuseritem = props.data.currentuseritem;
      var addUser = _this.props.addUser;
      addUser(currentuseritem);
      localStorage.setItem('user', JSON.stringify((0, _objectSpread2["default"])({}, currentuseritem)));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "mockSubmit", function (value) {
      _this.setState(function (_ref3) {
        var submitting = _ref3.submitting,
            isLoading = _ref3.isLoading;
        return {
          submitting: !submitting,
          isLoading: !isLoading
        };
      });

      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          _this.getUser(value.email);

          resolve(true);
        }, 2000);
      });
    });
    _this.state = _this.initialState;
    _this.submit = _this.submit.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(FormLogin, [{
    key: "submit",
    value: function submit(value) {
      var _this2 = this;

      this.props.preLoaderToggle();
      this.setState(function (_ref4) {
        var submitting = _ref4.submitting;
        return {
          submitting: !submitting
        };
      });
      return (0, _FetchUserAuth.FetchUserAuth)(value).then(function (response) {
        _this2.props.preLoaderToggle();

        if (response.status >= 400 || !document.cookie) {
          throw response;
        } else {
          return _this2.getUser(value.email);
        }
      })["catch"](function (error) {
        var status = error.status;

        _this2.props.preLoaderToggle();

        _this2.setState(function () {
          return {
            submitting: false,
            apolloError: null
          };
        });

        (0, _withSentry.captureException)(error);

        if (status === 401 || status === 403) {
          throw new _reduxForm.SubmissionError({
            _error: 'Не верно введен логин или пароль'
          });
        } else {
          throw new _reduxForm.SubmissionError({
            _error: 'Пользователь не найден'
          });
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          handleSubmit = _this$props2.handleSubmit,
          pristine = _this$props2.pristine,
          isLoading = _this$props2.isLoading,
          error = _this$props2.error;
      var apolloError = this.state.apolloError;
      return _react["default"].createElement(_reduxForm.Form, {
        onSubmit: handleSubmit(this.submit)
      }, _react["default"].createElement(_FormLogo["default"], null), _react["default"].createElement(_Box["default"], {
        mb: '100px'
      }, _react["default"].createElement(_TextFieldFirstWrapper.TextFieldFirstWrapper, null, _react["default"].createElement(_reduxForm.Field, {
        name: "uname",
        component: _TextFieldWithTooltip["default"],
        placeholder: 'Логин',
        type: "text",
        left: '45%' // validate={[required, isEmail]}

      })), _react["default"].createElement(_TextFieldLastWrapper.TextFieldLastWrapper, null, _react["default"].createElement(_reduxForm.Field, {
        name: 'ups',
        placeholder: 'Пароль' // TextFieldInput={TextFieldWithTooltip}
        ,
        component: _FieldInputPassword["default"]
      }))), _react["default"].createElement(_FormButtonSubmit["default"], {
        disabled: pristine,
        children: 'Войти',
        ml: 9,
        isLoading: isLoading,
        error: error || apolloError
      }));
    }
  }, {
    key: "initialState",
    get: function get() {
      return {
        submitting: false,
        apolloError: null
      };
    }
  }]);
  return FormLogin;
}(_react.Component);

exports.FormLogin = FormLogin;
(0, _defineProperty2["default"])(FormLogin, "propTypes", {
  addUser: _propTypes["default"].func,
  client: _propTypes["default"].object,
  error: _propTypes["default"].any,
  handleSubmit: _propTypes["default"].func,
  history: _propTypes["default"].object,
  isLoading: _propTypes["default"].bool,
  preLoaderToggle: _propTypes["default"].func,
  pristine: _propTypes["default"].any,
  setNotificationError: _propTypes["default"].func,
  setNotificationSuccess: _propTypes["default"].func
});
exports.FormLogin = FormLogin = (0, _reactRouterDom.withRouter)(FormLogin);
exports.FormLogin = FormLogin = (0, _reactApollo.withApollo)(FormLogin);
exports.FormLogin = FormLogin = (0, _withPreLoader.withPreLoader)()(FormLogin);
exports.FormLogin = FormLogin = (0, _reactRedux.connect)(null, function (dispatch) {
  return {
    addUser: function addUser(user) {
      return dispatch({
        type: _actionTypes.USER_ADD,
        user: user
      });
    },
    setNotificationSuccess: function setNotificationSuccess(message) {
      return dispatch((0, _reactNotificationSystemRedux.success)(message));
    },
    setNotificationError: function setNotificationError(message) {
      return dispatch((0, _reactNotificationSystemRedux.error)(message));
    }
  };
})(FormLogin);
exports.FormLogin = FormLogin = (0, _reduxForm.reduxForm)({
  form: 'FormLogin'
})(FormLogin);
var _default = FormLogin;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,