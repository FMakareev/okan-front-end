14ef0f534717b3aa13a18ed5baf32e68
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.CheckComponentAccessByRole = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var has = Object.prototype.hasOwnProperty;
/**
 * @desc компонент сравнивает переданную роль с ролью пользоватея и принимает решение если совпадали рендерит компонент иначе не рендерит
 * */

var CheckComponentAccessByRole = function CheckComponentAccessByRole(_ref) {
  var children = _ref.children,
      targetRole = _ref.targetRole,
      userRole = _ref.userRole;

  if (userRole && has.call(userRole, 'name')) {
    if (targetRole && Array.isArray(targetRole)) {
      if (targetRole.some(function (item) {
        return item === userRole.name;
      })) {
        return children;
      } else {// console.log(`Error CheckComponentAccessByRole: access denied`);
      }
    } else {
      // console.log(`Error CheckComponentAccessByRole: targetRole is undefined`);
      return children;
    }
  } else {// console.log(`Error CheckComponentAccessByRole: userRole not found.`);
  }

  return null;
};

exports.CheckComponentAccessByRole = CheckComponentAccessByRole;
CheckComponentAccessByRole.propTypes = {
  targetRole: _propTypes["default"].array,
  userRole: _propTypes["default"].shape({
    name: _propTypes["default"].string
  })
};
var _default = CheckComponentAccessByRole;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNoZWNrQ29tcG9uZW50QWNjZXNzQnlSb2xlLmpzIl0sIm5hbWVzIjpbImhhcyIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiQ2hlY2tDb21wb25lbnRBY2Nlc3NCeVJvbGUiLCJjaGlsZHJlbiIsInRhcmdldFJvbGUiLCJ1c2VyUm9sZSIsImNhbGwiLCJBcnJheSIsImlzQXJyYXkiLCJzb21lIiwiaXRlbSIsIm5hbWUiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhcnJheSIsInNoYXBlIiwic3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQSxJQUFNQSxHQUFHLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsY0FBN0I7QUFFQTs7OztBQUdPLElBQU1DLDBCQUEwQixHQUFHLFNBQTdCQSwwQkFBNkIsT0FBd0M7QUFBQSxNQUFyQ0MsUUFBcUMsUUFBckNBLFFBQXFDO0FBQUEsTUFBM0JDLFVBQTJCLFFBQTNCQSxVQUEyQjtBQUFBLE1BQWZDLFFBQWUsUUFBZkEsUUFBZTs7QUFDaEYsTUFBSUEsUUFBUSxJQUFJUCxHQUFHLENBQUNRLElBQUosQ0FBU0QsUUFBVCxFQUFtQixNQUFuQixDQUFoQixFQUE0QztBQUMxQyxRQUFJRCxVQUFVLElBQUlHLEtBQUssQ0FBQ0MsT0FBTixDQUFjSixVQUFkLENBQWxCLEVBQTZDO0FBQzNDLFVBQUlBLFVBQVUsQ0FBQ0ssSUFBWCxDQUFnQixVQUFBQyxJQUFJO0FBQUEsZUFBSUEsSUFBSSxLQUFLTCxRQUFRLENBQUNNLElBQXRCO0FBQUEsT0FBcEIsQ0FBSixFQUFxRDtBQUNuRCxlQUFPUixRQUFQO0FBQ0QsT0FGRCxNQUVPLENBQ0w7QUFDRDtBQUNGLEtBTkQsTUFNTztBQUNMO0FBQ0EsYUFBT0EsUUFBUDtBQUNEO0FBQ0YsR0FYRCxNQVdPLENBQ0w7QUFDRDs7QUFDRCxTQUFPLElBQVA7QUFDRCxDQWhCTTs7O0FBa0JQRCwwQkFBMEIsQ0FBQ1UsU0FBM0IsR0FBdUM7QUFDckNSLEVBQUFBLFVBQVUsRUFBRVMsc0JBQVVDLEtBRGU7QUFFckNULEVBQUFBLFFBQVEsRUFBRVEsc0JBQVVFLEtBQVYsQ0FBZ0I7QUFDeEJKLElBQUFBLElBQUksRUFBRUUsc0JBQVVHO0FBRFEsR0FBaEI7QUFGMkIsQ0FBdkM7ZUFPZWQsMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5cclxuY29uc3QgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbi8qKlxyXG4gKiBAZGVzYyDQutC+0LzQv9C+0L3QtdC90YIg0YHRgNCw0LLQvdC40LLQsNC10YIg0L/QtdGA0LXQtNCw0L3QvdGD0Y4g0YDQvtC70Ywg0YEg0YDQvtC70YzRjiDQv9C+0LvRjNC30L7QstCw0YLQtdGPINC4INC/0YDQuNC90LjQvNCw0LXRgiDRgNC10YjQtdC90LjQtSDQtdGB0LvQuCDRgdC+0LLQv9Cw0LTQsNC70Lgg0YDQtdC90LTQtdGA0LjRgiDQutC+0LzQv9C+0L3QtdC90YIg0LjQvdCw0YfQtSDQvdC1INGA0LXQvdC00LXRgNC40YJcclxuICogKi9cclxuZXhwb3J0IGNvbnN0IENoZWNrQ29tcG9uZW50QWNjZXNzQnlSb2xlID0gKHsgY2hpbGRyZW4sIHRhcmdldFJvbGUsIHVzZXJSb2xlIH0pID0+IHtcclxuICBpZiAodXNlclJvbGUgJiYgaGFzLmNhbGwodXNlclJvbGUsICduYW1lJykpIHtcclxuICAgIGlmICh0YXJnZXRSb2xlICYmIEFycmF5LmlzQXJyYXkodGFyZ2V0Um9sZSkpIHtcclxuICAgICAgaWYgKHRhcmdldFJvbGUuc29tZShpdGVtID0+IGl0ZW0gPT09IHVzZXJSb2xlLm5hbWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGBFcnJvciBDaGVja0NvbXBvbmVudEFjY2Vzc0J5Um9sZTogYWNjZXNzIGRlbmllZGApO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhgRXJyb3IgQ2hlY2tDb21wb25lbnRBY2Nlc3NCeVJvbGU6IHRhcmdldFJvbGUgaXMgdW5kZWZpbmVkYCk7XHJcbiAgICAgIHJldHVybiBjaGlsZHJlbjtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gY29uc29sZS5sb2coYEVycm9yIENoZWNrQ29tcG9uZW50QWNjZXNzQnlSb2xlOiB1c2VyUm9sZSBub3QgZm91bmQuYCk7XHJcbiAgfVxyXG4gIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuQ2hlY2tDb21wb25lbnRBY2Nlc3NCeVJvbGUucHJvcFR5cGVzID0ge1xyXG4gIHRhcmdldFJvbGU6IFByb3BUeXBlcy5hcnJheSxcclxuICB1c2VyUm9sZTogUHJvcFR5cGVzLnNoYXBlKHtcclxuICAgIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXHJcbiAgfSksXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDaGVja0NvbXBvbmVudEFjY2Vzc0J5Um9sZTtcclxuIl19