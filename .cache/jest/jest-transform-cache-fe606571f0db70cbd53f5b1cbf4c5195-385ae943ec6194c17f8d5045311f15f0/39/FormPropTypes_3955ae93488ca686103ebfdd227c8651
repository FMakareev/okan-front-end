1b4bc9087d3cb75b145ac5a8648808e3
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.fieldArrayPropTypes = exports.fieldPropTypes = exports.fieldArrayFieldsPropTypes = exports.fieldArrayMetaPropTypes = exports.fieldMetaPropTypes = exports.fieldInputPropTypes = exports.formPropTypes = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var any = _propTypes["default"].any,
    bool = _propTypes["default"].bool,
    func = _propTypes["default"].func,
    shape = _propTypes["default"].shape,
    string = _propTypes["default"].string,
    oneOfType = _propTypes["default"].oneOfType,
    object = _propTypes["default"].object,
    number = _propTypes["default"].number;
var formPropTypes = {
  // State:
  anyTouched: bool,
  // true if any of the fields have been marked as touched
  asyncValidating: oneOfType([bool, string]),
  // true if async validation is running, a string if a field triggered async validation
  dirty: bool,
  // true if any values are different from initialValues
  error: any,
  // form-wide error from '_error' key in validation result
  form: string,
  // the name of the form
  invalid: bool,
  // true if there are any validation errors
  initialized: bool,
  // true if the form has been initialized
  initialValues: object,
  // the initialValues object passed to reduxForm
  pristine: bool,
  // true if the values are the same as initialValues
  pure: bool,
  // if true, implements shouldComponentUpdate
  submitting: bool,
  // true if the form is in the process of being submitted
  submitFailed: bool,
  // true if the form was submitted and failed for any reason
  submitSucceeded: bool,
  // true if the form was successfully submitted
  valid: bool,
  // true if there are no validation errors
  warning: any,
  // form-wide warning from '_warning' key in validation result
  // Actions:
  array: shape({
    insert: func,
    // function to insert a value into an array field
    move: func,
    // function to move a value within an array field
    pop: func,
    // function to pop a value off of an array field
    push: func,
    // function to push a value onto an array field
    remove: func,
    // function to remove a value from an array field
    removeAll: func,
    // function to remove all the values from an array field
    shift: func,
    // function to shift a value out of an array field
    splice: func,
    // function to splice a value into an array field
    swap: func,
    // function to swap values in an array field
    unshift: func // function to unshift a value into an array field

  }),
  asyncValidate: func,
  // function to trigger async validation
  autofill: func,
  // action to set a value of a field and mark it as autofilled
  blur: func,
  // action to mark a field as blurred
  change: func,
  // action to change the value of a field
  clearAsyncError: func,
  // action to clear the async error of a field
  clearFields: func,
  // action to clean fields values for all fields
  clearSubmitErrors: func,
  // action to remove submitErrors and error
  destroy: func,
  // action to destroy the form's data in Redux
  dispatch: func,
  // the Redux dispatch action
  handleSubmit: func,
  // function to submit the form
  initialize: func,
  // action to initialize form data
  reset: func,
  // action to reset the form data to previously initialized values
  resetSection: func,
  // action to reset the form sections data to previously initialized values
  touch: func,
  // action to mark fields as touched
  submit: func,
  // action to trigger a submission of the specified form
  untouch: func,
  // action to mark fields as untouched
  // triggerSubmit
  triggerSubmit: bool,
  // if true, submits the form on componentWillReceiveProps
  clearSubmit: func // called before a triggered submit, by default clears triggerSubmit

};
exports.formPropTypes = formPropTypes;
var fieldInputPropTypes = {
  checked: bool,
  name: string,
  onBlur: func,
  onChange: func,
  onDragStart: func,
  onDrop: func,
  onFocus: func,
  value: any
};
exports.fieldInputPropTypes = fieldInputPropTypes;
var fieldMetaPropTypes = {
  active: bool,
  asyncValidating: bool,
  autofilled: bool,
  dirty: bool,
  dispatch: func,
  error: any,
  form: string,
  invalid: bool,
  pristine: bool,
  submitting: bool,
  submitFailed: bool,
  touched: bool,
  valid: bool,
  visited: bool,
  warning: string
};
exports.fieldMetaPropTypes = fieldMetaPropTypes;
var fieldArrayMetaPropTypes = {
  dirty: bool,
  error: any,
  form: string,
  invalid: bool,
  pristine: bool,
  submitFailed: bool,
  submitting: bool,
  valid: bool,
  warning: string
};
exports.fieldArrayMetaPropTypes = fieldArrayMetaPropTypes;
var fieldArrayFieldsPropTypes = {
  name: string,
  forEach: func,
  get: func,
  getAll: func,
  insert: func,
  length: number,
  map: func,
  move: func,
  pop: func,
  push: func,
  reduce: func,
  remove: func,
  removeAll: func,
  shift: func,
  swap: func,
  unshift: func
};
exports.fieldArrayFieldsPropTypes = fieldArrayFieldsPropTypes;
var fieldPropTypes = {
  input: shape(fieldInputPropTypes),
  meta: shape(fieldMetaPropTypes)
};
exports.fieldPropTypes = fieldPropTypes;
var fieldArrayPropTypes = {
  fields: shape(fieldArrayFieldsPropTypes),
  meta: shape(fieldArrayMetaPropTypes)
};
exports.fieldArrayPropTypes = fieldArrayPropTypes;
var _default = formPropTypes;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZvcm1Qcm9wVHlwZXMuanMiXSwibmFtZXMiOlsiYW55IiwiUHJvcFR5cGVzIiwiYm9vbCIsImZ1bmMiLCJzaGFwZSIsInN0cmluZyIsIm9uZU9mVHlwZSIsIm9iamVjdCIsIm51bWJlciIsImZvcm1Qcm9wVHlwZXMiLCJhbnlUb3VjaGVkIiwiYXN5bmNWYWxpZGF0aW5nIiwiZGlydHkiLCJlcnJvciIsImZvcm0iLCJpbnZhbGlkIiwiaW5pdGlhbGl6ZWQiLCJpbml0aWFsVmFsdWVzIiwicHJpc3RpbmUiLCJwdXJlIiwic3VibWl0dGluZyIsInN1Ym1pdEZhaWxlZCIsInN1Ym1pdFN1Y2NlZWRlZCIsInZhbGlkIiwid2FybmluZyIsImFycmF5IiwiaW5zZXJ0IiwibW92ZSIsInBvcCIsInB1c2giLCJyZW1vdmUiLCJyZW1vdmVBbGwiLCJzaGlmdCIsInNwbGljZSIsInN3YXAiLCJ1bnNoaWZ0IiwiYXN5bmNWYWxpZGF0ZSIsImF1dG9maWxsIiwiYmx1ciIsImNoYW5nZSIsImNsZWFyQXN5bmNFcnJvciIsImNsZWFyRmllbGRzIiwiY2xlYXJTdWJtaXRFcnJvcnMiLCJkZXN0cm95IiwiZGlzcGF0Y2giLCJoYW5kbGVTdWJtaXQiLCJpbml0aWFsaXplIiwicmVzZXQiLCJyZXNldFNlY3Rpb24iLCJ0b3VjaCIsInN1Ym1pdCIsInVudG91Y2giLCJ0cmlnZ2VyU3VibWl0IiwiY2xlYXJTdWJtaXQiLCJmaWVsZElucHV0UHJvcFR5cGVzIiwiY2hlY2tlZCIsIm5hbWUiLCJvbkJsdXIiLCJvbkNoYW5nZSIsIm9uRHJhZ1N0YXJ0Iiwib25Ecm9wIiwib25Gb2N1cyIsInZhbHVlIiwiZmllbGRNZXRhUHJvcFR5cGVzIiwiYWN0aXZlIiwiYXV0b2ZpbGxlZCIsInRvdWNoZWQiLCJ2aXNpdGVkIiwiZmllbGRBcnJheU1ldGFQcm9wVHlwZXMiLCJmaWVsZEFycmF5RmllbGRzUHJvcFR5cGVzIiwiZm9yRWFjaCIsImdldCIsImdldEFsbCIsImxlbmd0aCIsIm1hcCIsInJlZHVjZSIsImZpZWxkUHJvcFR5cGVzIiwiaW5wdXQiLCJtZXRhIiwiZmllbGRBcnJheVByb3BUeXBlcyIsImZpZWxkcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0lBRVFBLEcsR0FBOERDLHFCLENBQTlERCxHO0lBQUtFLEksR0FBeURELHFCLENBQXpEQyxJO0lBQU1DLEksR0FBbURGLHFCLENBQW5ERSxJO0lBQU1DLEssR0FBNkNILHFCLENBQTdDRyxLO0lBQU9DLE0sR0FBc0NKLHFCLENBQXRDSSxNO0lBQVFDLFMsR0FBOEJMLHFCLENBQTlCSyxTO0lBQVdDLE0sR0FBbUJOLHFCLENBQW5CTSxNO0lBQVFDLE0sR0FBV1AscUIsQ0FBWE8sTTtBQUVwRCxJQUFNQyxhQUFhLEdBQUc7QUFDM0I7QUFDQUMsRUFBQUEsVUFBVSxFQUFFUixJQUZlO0FBRVQ7QUFDbEJTLEVBQUFBLGVBQWUsRUFBRUwsU0FBUyxDQUFDLENBQUNKLElBQUQsRUFBT0csTUFBUCxDQUFELENBSEM7QUFHaUI7QUFDNUNPLEVBQUFBLEtBQUssRUFBRVYsSUFKb0I7QUFJZDtBQUNiVyxFQUFBQSxLQUFLLEVBQUViLEdBTG9CO0FBS2Y7QUFDWmMsRUFBQUEsSUFBSSxFQUFFVCxNQU5xQjtBQU1iO0FBQ2RVLEVBQUFBLE9BQU8sRUFBRWIsSUFQa0I7QUFPWjtBQUNmYyxFQUFBQSxXQUFXLEVBQUVkLElBUmM7QUFRUjtBQUNuQmUsRUFBQUEsYUFBYSxFQUFFVixNQVRZO0FBU0o7QUFDdkJXLEVBQUFBLFFBQVEsRUFBRWhCLElBVmlCO0FBVVg7QUFDaEJpQixFQUFBQSxJQUFJLEVBQUVqQixJQVhxQjtBQVdmO0FBQ1prQixFQUFBQSxVQUFVLEVBQUVsQixJQVplO0FBWVQ7QUFDbEJtQixFQUFBQSxZQUFZLEVBQUVuQixJQWJhO0FBYVA7QUFDcEJvQixFQUFBQSxlQUFlLEVBQUVwQixJQWRVO0FBY0o7QUFDdkJxQixFQUFBQSxLQUFLLEVBQUVyQixJQWZvQjtBQWVkO0FBQ2JzQixFQUFBQSxPQUFPLEVBQUV4QixHQWhCa0I7QUFn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QUEsSUFBSSxFQUFFL0IsSUFmaUM7QUFnQnZDZ0MsRUFBQUEsT0FBTyxFQUFFaEM7QUFoQjhCLENBQWxDOztBQW1CQSxJQUFNeUUsY0FBYyxHQUFHO0FBQzVCQyxFQUFBQSxLQUFLLEVBQUV6RSxLQUFLLENBQUNrRCxtQkFBRCxDQURnQjtBQUU1QndCLEVBQUFBLElBQUksRUFBRTFFLEtBQUssQ0FBQzJELGtCQUFEO0FBRmlCLENBQXZCOztBQUtBLElBQU1nQixtQkFBbUIsR0FBRztBQUNqQ0MsRUFBQUEsTUFBTSxFQUFFNUUsS0FBSyxDQUFDaUUseUJBQUQsQ0FEb0I7QUFFakNTLEVBQUFBLElBQUksRUFBRTFFLEtBQUssQ0FBQ2dFLHVCQUFEO0FBRnNCLENBQTVCOztlQUtRM0QsYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XHJcblxyXG5jb25zdCB7IGFueSwgYm9vbCwgZnVuYywgc2hhcGUsIHN0cmluZywgb25lT2ZUeXBlLCBvYmplY3QsIG51bWJlciB9ID0gUHJvcFR5cGVzO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZvcm1Qcm9wVHlwZXMgPSB7XHJcbiAgLy8gU3RhdGU6XHJcbiAgYW55VG91Y2hlZDogYm9vbCwgLy8gdHJ1ZSBpZiBhbnkgb2YgdGhlIGZpZWxkcyBoYXZlIGJlZW4gbWFya2VkIGFzIHRvdWNoZWRcclxuICBhc3luY1ZhbGlkYXRpbmc6IG9uZU9mVHlwZShbYm9vbCwgc3RyaW5nXSksIC8vIHRydWUgaWYgYXN5bmMgdmFsaWRhdGlvbiBpcyBydW5uaW5nLCBhIHN0cmluZyBpZiBhIGZpZWxkIHRyaWdnZXJlZCBhc3luYyB2YWxpZGF0aW9uXHJcbiAgZGlydHk6IGJvb2wsIC8vIHRydWUgaWYgYW55IHZhbHVlcyBhcmUgZGlmZmVyZW50IGZyb20gaW5pdGlhbFZhbHVlc1xyXG4gIGVycm9yOiBhbnksIC8vIGZvcm0td2lkZSBlcnJvciBmcm9tICdfZXJyb3InIGtleSBpbiB2YWxpZGF0aW9uIHJlc3VsdFxyXG4gIGZvcm06IHN0cmluZywgLy8gdGhlIG5hbWUgb2YgdGhlIGZvcm1cclxuICBpbnZhbGlkOiBib29sLCAvLyB0cnVlIGlmIHRoZXJlIGFyZSBhbnkgdmFsaWRhdGlvbiBlcnJvcnNcclxuICBpbml0aWFsaXplZDogYm9vbCwgLy8gdHJ1ZSBpZiB0aGUgZm9ybSBoYXMgYmVlbiBpbml0aWFsaXplZFxyXG4gIGluaXRpYWxWYWx1ZXM6IG9iamVjdCwgLy8gdGhlIGluaXRpYWxWYWx1ZXMgb2JqZWN0IHBhc3NlZCB0byByZWR1eEZvcm1cclxuICBwcmlzdGluZTogYm9vbCwgLy8gdHJ1ZSBpZiB0aGUgdmFsdWVzIGFyZSB0aGUgc2FtZSBhcyBpbml0aWFsVmFsdWVzXHJcbiAgcHVyZTogYm9vbCwgLy8gaWYgdHJ1ZSwgaW1wbGVtZW50cyBzaG91bGRDb21wb25lbnRVcGRhdGVcclxuICBzdWJtaXR0aW5nOiBib29sLCAvLyB0cnVlIGlmIHRoZSBmb3JtIGlzIGluIHRoZSBwcm9jZXNzIG9mIGJlaW5nIHN1Ym1pdHRlZFxyXG4gIHN1Ym1pdEZhaWxlZDogYm9vbCwgLy8gdHJ1ZSBpZiB0aGUgZm9ybSB3YXMgc3VibWl0dGVkIGFuZCBmYWlsZWQgZm9yIGFueSByZWFzb25cclxuICBzdWJtaXRTdWNjZWVkZWQ6IGJvb2wsIC8vIHRydWUgaWYgdGhlIGZvcm0gd2FzIHN1Y2Nlc3NmdWxseSBzdWJtaXR0ZWRcclxuICB2YWxpZDogYm9vbCwgLy8gdHJ1ZSBpZiB0aGVyZSBhcmUgbm8gdmFsaWRhdGlvbiBlcnJvcnNcclxuICB3YXJuaW5nOiBhbnksIC8vIGZvcm0td2lkZSB3YXJuaW5nIGZyb20gJ193YXJuaW5nJyBrZXkgaW4gdmFsaWRhdGlvbiByZXN1bHRcclxuICAvLyBBY3Rpb25zOlxyXG4gIGFycmF5OiBzaGFwZSh7XHJcbiAgICBpbnNlcnQ6IGZ1bmMsIC8vIGZ1bmN0aW9uIHRvIGluc2VydCBhIHZhbHVlIGludG8gYW4gYXJyYXkgZmllbGRcclxuICAgIG1vdmU6IGZ1bmMsIC8vIGZ1bmN0aW9uIHRvIG1vdmUgYSB2YWx1ZSB3aXRoaW4gYW4gYXJyYXkgZmllbGRcclxuICAgIHBvcDogZnVuYywgLy8gZnVuY3Rpb24gdG8gcG9wIGEgdmFsdWUgb2ZmIG9mIGFuIGFycmF5IGZpZWxkXHJcbiAgICBwdXNoOiBmdW5jLCAvLyBmdW5jdGlvbiB0byBwdXNoIGEgdmFsdWUgb250byBhbiBhcnJheSBmaWVsZFxyXG4gICAgcmVtb3ZlOiBmdW5jLCAvLyBmdW5jdGlvbiB0byByZW1vdmUgYSB2YWx1ZSBmcm9tIGFuIGFycmF5IGZpZWxkXHJcbiAgICByZW1vdmVBbGw6IGZ1bmMsIC8vIGZ1bmN0aW9uIHRvIHJlbW92ZSBhbGwgdGhlIHZhbHVlcyBmcm9tIGFuIGFycmF5IGZpZWxkXHJcbiAgICBzaGlmdDogZnVuYywgLy8gZnVuY3Rpb24gdG8gc2hpZnQgYSB2YWx1ZSBvdXQgb2YgYW4gYXJyYXkgZmllbGRcclxuICAgIHNwbGljZTogZnVuYywgLy8gZnVuY3Rpb24gdG8gc3BsaWNlIGEgdmFsdWUgaW50byBhbiBhcnJheSBmaWVsZFxyXG4gICAgc3dhcDogZnVuYywgLy8gZnVuY3Rpb24gdG8gc3dhcCB2YWx1ZXMgaW4gYW4gYXJyYXkgZmllbGRcclxuICAgIHVuc2hpZnQ6IGZ1bmMsIC8vIGZ1bmN0aW9uIHRvIHVuc2hpZnQgYSB2YWx1ZSBpbnRvIGFuIGFycmF5IGZpZWxkXHJcbiAgfSksXHJcbiAgYXN5bmNWYWxpZGF0ZTogZnVuYywgLy8gZnVuY3Rpb24gdG8gdHJpZ2dlciBhc3luYyB2YWxpZGF0aW9uXHJcbiAgYXV0b2ZpbGw6IGZ1bmMsIC8vIGFjdGlvbiB0byBzZXQgYSB2YWx1ZSBvZiBhIGZpZWxkIGFuZCBtYXJrIGl0IGFzIGF1dG9maWxsZWRcclxuICBibHVyOiBmdW5jLCAvLyBhY3Rpb24gdG8gbWFyayBhIGZpZWxkIGFzIGJsdXJyZWRcclxuICBjaGFuZ2U6IGZ1bmMsIC8vIGFjdGlvbiB0byBjaGFuZ2UgdGhlIHZhbHVlIG9mIGEgZmllbGRcclxuICBjbGVhckFzeW5jRXJyb3I6IGZ1bmMsIC8vIGFjdGlvbiB0byBjbGVhciB0aGUgYXN5bmMgZXJyb3Igb2YgYSBmaWVsZFxyXG4gIGNsZWFyRmllbGRzOiBmdW5jLCAvLyBhY3Rpb24gdG8gY2xlYW4gZmllbGRzIHZhbHVlcyBmb3IgYWxsIGZpZWxkc1xyXG4gIGNsZWFyU3VibWl0RXJyb3JzOiBmdW5jLCAvLyBhY3Rpb24gdG8gcmVtb3ZlIHN1Ym1pdEVycm9ycyBhbmQgZXJyb3JcclxuICBkZXN0cm95OiBmdW5jLCAvLyBhY3Rpb24gdG8gZGVzdHJveSB0aGUgZm9ybSdzIGRhdGEgaW4gUmVkdXhcclxuICBkaXNwYXRjaDogZnVuYywgLy8gdGhlIFJlZHV4IGRpc3BhdGNoIGFjdGlvblxyXG4gIGhhbmRsZVN1Ym1pdDogZnVuYywgLy8gZnVuY3Rpb24gdG8gc3VibWl0IHRoZSBmb3JtXHJcbiAgaW5pdGlhbGl6ZTogZnVuYywgLy8gYWN0aW9uIHRvIGluaXRpYWxpemUgZm9ybSBkYXRhXHJcbiAgcmVzZXQ6IGZ1bmMsIC8vIGFjdGlvbiB0byByZXNldCB0aGUgZm9ybSBkYXRhIHRvIHByZXZpb3VzbHkgaW5pdGlhbGl6ZWQgdmFsdWVzXHJcbiAgcmVzZXRTZWN0aW9uOiBmdW5jLCAvLyBhY3Rpb24gdG8gcmVzZXQgdGhlIGZvcm0gc2VjdGlvbnMgZGF0YSB0byBwcmV2aW91c2x5IGluaXRpYWxpemVkIHZhbHVlc1xyXG4gIHRvdWNoOiBmdW5jLCAvLyBhY3Rpb24gdG8gbWFyayBmaWVsZHMgYXMgdG91Y2hlZFxyXG4gIHN1Ym1pdDogZnVuYywgLy8gYWN0aW9uIHRvIHRyaWdnZXIgYSBzdWJtaXNzaW9uIG9mIHRoZSBzcGVjaWZpZWQgZm9ybVxyXG4gIHVudG91Y2g6IGZ1bmMsIC8vIGFjdGlvbiB0byBtYXJrIGZpZWxkcyBhcyB1bnRvdWNoZWRcclxuXHJcbiAgLy8gdHJpZ2dlclN1Ym1pdFxyXG4gIHRyaWdnZXJTdWJtaXQ6IGJvb2wsIC8vIGlmIHRydWUsIHN1Ym1pdHMgdGhlIGZvcm0gb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1xyXG4gIGNsZWFyU3VibWl0OiBmdW5jLCAvLyBjYWxsZWQgYmVmb3JlIGEgdHJpZ2dlcmVkIHN1Ym1pdCwgYnkgZGVmYXVsdCBjbGVhcnMgdHJpZ2dlclN1Ym1pdFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGZpZWxkSW5wdXRQcm9wVHlwZXMgPSB7XHJcbiAgY2hlY2tlZDogYm9vbCxcclxuICBuYW1lOiBzdHJpbmcsXHJcbiAgb25CbHVyOiBmdW5jLFxyXG4gIG9uQ2hhbmdlOiBmdW5jLFxyXG4gIG9uRHJhZ1N0YXJ0OiBmdW5jLFxyXG4gIG9uRHJvcDogZnVuYyxcclxuICBvbkZvY3VzOiBmdW5jLFxyXG4gIHZhbHVlOiBhbnksXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZmllbGRNZXRhUHJvcFR5cGVzID0ge1xyXG4gIGFjdGl2ZTogYm9vbCxcclxuICBhc3luY1ZhbGlkYXRpbmc6IGJvb2wsXHJcbiAgYXV0b2ZpbGxlZDogYm9vbCxcclxuICBkaXJ0eTogYm9vbCxcclxuICBkaXNwYXRjaDogZnVuYyxcclxuICBlcnJvcjogYW55LFxyXG4gIGZvcm06IHN0cmluZyxcclxuICBpbnZhbGlkOiBib29sLFxyXG4gIHByaXN0aW5lOiBib29sLFxyXG4gIHN1Ym1pdHRpbmc6IGJvb2wsXHJcbiAgc3VibWl0RmFpbGVkOiBib29sLFxyXG4gIHRvdWNoZWQ6IGJvb2wsXHJcbiAgdmFsaWQ6IGJvb2wsXHJcbiAgdmlzaXRlZDogYm9vbCxcclxuICB3YXJuaW5nOiBzdHJpbmcsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZmllbGRBcnJheU1ldGFQcm9wVHlwZXMgPSB7XHJcbiAgZGlydHk6IGJvb2wsXHJcbiAgZXJyb3I6IGFueSxcclxuICBmb3JtOiBzdHJpbmcsXHJcbiAgaW52YWxpZDogYm9vbCxcclxuICBwcmlzdGluZTogYm9vbCxcclxuICBzdWJtaXRGYWlsZWQ6IGJvb2wsXHJcbiAgc3VibWl0dGluZzogYm9vbCxcclxuICB2YWxpZDogYm9vbCxcclxuICB3YXJuaW5nOiBzdHJpbmcsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZmllbGRBcnJheUZpZWxkc1Byb3BUeXBlcyA9IHtcclxuICBuYW1lOiBzdHJpbmcsXHJcbiAgZm9yRWFjaDogZnVuYyxcclxuICBnZXQ6IGZ1bmMsXHJcbiAgZ2V0QWxsOiBmdW5jLFxyXG4gIGluc2VydDogZnVuYyxcclxuICBsZW5ndGg6IG51bWJlcixcclxuICBtYXA6IGZ1bmMsXHJcbiAgbW92ZTogZnVuYyxcclxuICBwb3A6IGZ1bmMsXHJcbiAgcHVzaDogZnVuYyxcclxuICByZWR1Y2U6IGZ1bmMsXHJcbiAgcmVtb3ZlOiBmdW5jLFxyXG4gIHJlbW92ZUFsbDogZnVuYyxcclxuICBzaGlmdDogZnVuYyxcclxuICBzd2FwOiBmdW5jLFxyXG4gIHVuc2hpZnQ6IGZ1bmMsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZmllbGRQcm9wVHlwZXMgPSB7XHJcbiAgaW5wdXQ6IHNoYXBlKGZpZWxkSW5wdXRQcm9wVHlwZXMpLFxyXG4gIG1ldGE6IHNoYXBlKGZpZWxkTWV0YVByb3BUeXBlcyksXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZmllbGRBcnJheVByb3BUeXBlcyA9IHtcclxuICBmaWVsZHM6IHNoYXBlKGZpZWxkQXJyYXlGaWVsZHNQcm9wVHlwZXMpLFxyXG4gIG1ldGE6IHNoYXBlKGZpZWxkQXJyYXlNZXRhUHJvcFR5cGVzKSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZvcm1Qcm9wVHlwZXM7XHJcbiJdfQ==