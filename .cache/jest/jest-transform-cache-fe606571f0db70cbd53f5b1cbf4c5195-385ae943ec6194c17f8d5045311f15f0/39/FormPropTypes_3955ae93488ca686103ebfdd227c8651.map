{"version":3,"sources":["FormPropTypes.js"],"names":["any","PropTypes","bool","func","shape","string","oneOfType","object","number","formPropTypes","anyTouched","asyncValidating","dirty","error","form","invalid","initialized","initialValues","pristine","pure","submitting","submitFailed","submitSucceeded","valid","warning","array","insert","move","pop","push","remove","removeAll","shift","splice","swap","unshift","asyncValidate","autofill","blur","change","clearAsyncError","clearFields","clearSubmitErrors","destroy","dispatch","handleSubmit","initialize","reset","resetSection","touch","submit","untouch","triggerSubmit","clearSubmit","fieldInputPropTypes","checked","name","onBlur","onChange","onDragStart","onDrop","onFocus","value","fieldMetaPropTypes","active","autofilled","touched","visited","fieldArrayMetaPropTypes","fieldArrayFieldsPropTypes","forEach","get","getAll","length","map","reduce","fieldPropTypes","input","meta","fieldArrayPropTypes","fields"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst { any, bool, func, shape, string, oneOfType, object, number } = PropTypes;\r\n\r\nexport const formPropTypes = {\r\n  // State:\r\n  anyTouched: bool, // true if any of the fields have been marked as touched\r\n  asyncValidating: oneOfType([bool, string]), // true if async validation is running, a string if a field triggered async validation\r\n  dirty: bool, // true if any values are different from initialValues\r\n  error: any, // form-wide error from '_error' key in validation result\r\n  form: string, // the name of the form\r\n  invalid: bool, // true if there are any validation errors\r\n  initialized: bool, // true if the form has been initialized\r\n  initialValues: object, // the initialValues object passed to reduxForm\r\n  pristine: bool, // true if the values are the same as initialValues\r\n  pure: bool, // if true, implements shouldComponentUpdate\r\n  submitting: bool, // true if the form is in the process of being submitted\r\n  submitFailed: bool, // true if the form was submitted and failed for any reason\r\n  submitSucceeded: bool, // true if the form was successfully submitted\r\n  valid: bool, // true if there are no validation errors\r\n  warning: any, // form-wide warning from '_warning' key in validation result\r\n  // Actions:\r\n  array: shape({\r\n    insert: func, // function to insert a value into an array field\r\n    move: func, // function to move a value within an array field\r\n    pop: func, // function to pop a value off of an array field\r\n    push: func, // function to push a value onto an array field\r\n    remove: func, // function to remove a value from an array field\r\n    removeAll: func, // function to remove all the values from an array field\r\n    shift: func, // function to shift a value out of an array field\r\n    splice: func, // function to splice a value into an array field\r\n    swap: func, // function to swap values in an array field\r\n    unshift: func, // function to unshift a value into an array field\r\n  }),\r\n  asyncValidate: func, // function to trigger async validation\r\n  autofill: func, // action to set a value of a field and mark it as autofilled\r\n  blur: func, // action to mark a field as blurred\r\n  change: func, // action to change the value of a field\r\n  clearAsyncError: func, // action to clear the async error of a field\r\n  clearFields: func, // action to clean fields values for all fields\r\n  clearSubmitErrors: func, // action to remove submitErrors and error\r\n  destroy: func, // action to destroy the form's data in Redux\r\n  dispatch: func, // the Redux dispatch action\r\n  handleSubmit: func, // function to submit the form\r\n  initialize: func, // action to initialize form data\r\n  reset: func, // action to reset the form data to previously initialized values\r\n  resetSection: func, // action to reset the form sections data to previously initialized values\r\n  touch: func, // action to mark fields as touched\r\n  submit: func, // action to trigger a submission of the specified form\r\n  untouch: func, // action to mark fields as untouched\r\n\r\n  // triggerSubmit\r\n  triggerSubmit: bool, // if true, submits the form on componentWillReceiveProps\r\n  clearSubmit: func, // called before a triggered submit, by default clears triggerSubmit\r\n};\r\n\r\nexport const fieldInputPropTypes = {\r\n  checked: bool,\r\n  name: string,\r\n  onBlur: func,\r\n  onChange: func,\r\n  onDragStart: func,\r\n  onDrop: func,\r\n  onFocus: func,\r\n  value: any,\r\n};\r\n\r\nexport const fieldMetaPropTypes = {\r\n  active: bool,\r\n  asyncValidating: bool,\r\n  autofilled: bool,\r\n  dirty: bool,\r\n  dispatch: func,\r\n  error: any,\r\n  form: string,\r\n  invalid: bool,\r\n  pristine: bool,\r\n  submitting: bool,\r\n  submitFailed: bool,\r\n  touched: bool,\r\n  valid: bool,\r\n  visited: bool,\r\n  warning: string,\r\n};\r\n\r\nexport const fieldArrayMetaPropTypes = {\r\n  dirty: bool,\r\n  error: any,\r\n  form: string,\r\n  invalid: bool,\r\n  pristine: bool,\r\n  submitFailed: bool,\r\n  submitting: bool,\r\n  valid: bool,\r\n  warning: string,\r\n};\r\n\r\nexport const fieldArrayFieldsPropTypes = {\r\n  name: string,\r\n  forEach: func,\r\n  get: func,\r\n  getAll: func,\r\n  insert: func,\r\n  length: number,\r\n  map: func,\r\n  move: func,\r\n  pop: func,\r\n  push: func,\r\n  reduce: func,\r\n  remove: func,\r\n  removeAll: func,\r\n  shift: func,\r\n  swap: func,\r\n  unshift: func,\r\n};\r\n\r\nexport const fieldPropTypes = {\r\n  input: shape(fieldInputPropTypes),\r\n  meta: shape(fieldMetaPropTypes),\r\n};\r\n\r\nexport const fieldArrayPropTypes = {\r\n  fields: shape(fieldArrayFieldsPropTypes),\r\n  meta: shape(fieldArrayMetaPropTypes),\r\n};\r\n\r\nexport default formPropTypes;\r\n"]}