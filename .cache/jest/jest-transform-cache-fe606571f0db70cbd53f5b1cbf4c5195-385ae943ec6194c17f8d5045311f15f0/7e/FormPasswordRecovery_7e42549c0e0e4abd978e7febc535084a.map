{"version":3,"sources":["FormPasswordRecovery.js"],"names":["validate","password","newpassword","confirmnewpassword","errors","undefined","length","notificationOpts","success","title","message","position","autoDismiss","error","FormPasswordRecovery","props","state","initialState","submit","bind","value","data","variables","Object","assign","setState","isLoading","submitting","then","response","reset","setNotificationSuccess","history","push","Promise","resolve","setNotificationError","apolloError","handleSubmit","pristine","invalid","FieldInputPassword","Component","formPropTypes","UserPasswordRecoveryMutation","name","dispatch","form"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AAGA;;AACA;;AAGA;;AAGA;;AACA;;AACA;;AAfA;;AAKA;;AAIA;;AAGA;AAKA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,OAAmD;AAAA,MAAhDC,QAAgD,QAAhDA,QAAgD;AAAA,MAAtCC,WAAsC,QAAtCA,WAAsC;AAAA,MAAzBC,kBAAyB,QAAzBA,kBAAyB;AAClE,MAAMC,MAAM,GAAG,EAAf;;AAEA,MAAI,CAACH,QAAL,EAAe;AACbG,IAAAA,MAAM,CAACH,QAAP,GAAkB,4BAAlB;AACD;;AAED,MAAI,CAACC,WAAL,EAAkB;AAChBE,IAAAA,MAAM,CAACF,WAAP,GAAqB,4BAArB;AACD;;AAED,MAAI,CAACC,kBAAL,EAAyB;AACvBC,IAAAA,MAAM,CAACD,kBAAP,GAA4B,4BAA5B;AACD;;AAED,MAAID,WAAW,KAAKG,SAAhB,IAA6BH,WAAW,CAACI,MAAZ,IAAsB,CAAvD,EAA0D;AACxDF,IAAAA,MAAM,CAACF,WAAP,GAAqB,8CAArB;AACD;;AAED,MAAIA,WAAW,KAAKG,SAAhB,IAA6BH,WAAW,CAACI,MAAZ,IAAsB,EAAvD,EAA2D;AACzDF,IAAAA,MAAM,CAACF,WAAP,GAAqB,8CAArB;AACD;;AAED,MAAID,QAAQ,KAAKC,WAAjB,EAA8B;AAC5BE,IAAAA,MAAM,CAACF,WAAP,GAAqB,kDAArB;AACD;;AAED,MAAIC,kBAAkB,KAAKD,WAA3B,EAAwC;AACtCE,IAAAA,MAAM,CAACD,kBAAP,GAA4B,qBAA5B;AACD;;AACD,SAAOC,MAAP;AACD,CA/BD;;AAiCA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAO;AAC9BC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE,wBADA;AAEPC,MAAAA,OAAO,EAAE,wBAFF;AAGPC,MAAAA,QAAQ,EAAE,IAHH;AAIPC,MAAAA,WAAW,EAAE;AAJN,KADqB;AAO9BC,IAAAA,KAAK,EAAE;AACLJ,MAAAA,KAAK,EAAE,mBADF;AAELC,MAAAA,OAAO,EAAE,mBAFJ;AAGLC,MAAAA,QAAQ,EAAE,IAHL;AAILC,MAAAA,WAAW,EAAE;AAJR;AAPuB,GAAP;AAAA,CAAzB;;IAeME,oB;;;;;AAKJ,gCAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,gIAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa,MAAKC,YAAlB;AAEA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYC,IAAZ,gDAAd;AALiB;AAMlB;;;;2BAMMC,K,EAAO;AAAA;;AACZ,UAAMC,IAAI,GAAG;AAAEC,QAAAA,SAAS,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB;AAAb,OAAb;AAEA,WAAKK,QAAL,CAAc;AAAA,eAAO;AAAEC,UAAAA,SAAS,EAAE,IAAb;AAAmBC,UAAAA,UAAU,EAAE;AAA/B,SAAP;AAAA,OAAd;AAEA,aAAO,KAAKZ,KAAL,CAAW,gBAAX,EAA6BM,IAA7B,EACJO,IADI,CACC,UAAAC,QAAQ,EAAI;AAChB,YAAIA,QAAQ,CAACzB,MAAb,EAAqB;AACnB,gBAAMyB,QAAN;AACD,SAFD,MAEO;AACL,UAAA,MAAI,CAACd,KAAL,CAAWe,KAAX;;AACA,UAAA,MAAI,CAACf,KAAL,CAAWgB,sBAAX,CAAkCxB,gBAAgB,GAAGC,OAArD;;AACA,UAAA,MAAI,CAACO,KAAL,CAAWiB,OAAX,CAAmBC,IAAnB;;AACA,iBAAOC,OAAO,CAACC,OAAR,CAAgBN,QAAhB,CAAP;AACD;AACF,OAVI,WAWE,UAAChB,KAAD,EAAW;AAAA,YACRT,MADQ,GACYS,KADZ,CACRT,MADQ;AAAA,YACAM,OADA,GACYG,KADZ,CACAH,OADA;;AAEhB,QAAA,MAAI,CAACK,KAAL,CAAWqB,oBAAX,CAAgC7B,gBAAgB,GAAGM,KAAnD;;AACA,0CAAiBA,KAAjB;;AACA,QAAA,MAAI,CAACY,QAAL,CAAc;AAAA,iBAAO;AACnBE,YAAAA,UAAU,EAAE,KADO;AAEnBU,YAAAA,WAAW,EAAE,qBAFM;AAGnBX,YAAAA,SAAS,EAAE;AAHQ,WAAP;AAAA,SAAd;AAKD,OApBI,CAAP;AAqBD;;;6BAEQ;AAAA,wBAC4C,KAAKX,KADjD;AAAA,UACCuB,YADD,eACCA,YADD;AAAA,UACeC,QADf,eACeA,QADf;AAAA,UACyBC,OADzB,eACyBA,OADzB;AAAA,UACkC3B,KADlC,eACkCA,KADlC;AAAA,wBAEwC,KAAKG,KAF7C;AAAA,UAECU,SAFD,eAECA,SAFD;AAAA,UAEYW,WAFZ,eAEYA,WAFZ;AAAA,UAEyBV,UAFzB,eAEyBA,UAFzB;AAIP,aACE,gCAAC,eAAD;AAAM,QAAA,QAAQ,EAAEW,YAAY,CAAC,KAAKpB,MAAN;AAA5B,SACE,gCAAC,oBAAD,OADF,EAGE,gCAAC,eAAD;AAAK,QAAA,EAAE,EAAE;AAAT,SACE,gCAAC,4CAAD,QACE,gCAAC,gBAAD;AAAO,QAAA,IAAI,EAAE,UAAb;AAAyB,QAAA,WAAW,EAAE,eAAtC;AAAuD,QAAA,SAAS,EAAEuB;AAAlE,QADF,CADF,EAKE,gCAAC,gBAAD;AACE,QAAA,IAAI,EAAE,aADR;AAEE,QAAA,WAAW,EAAE,cAFf;AAGE,QAAA,OAAO,EAAE,WAHX;AAIE,QAAA,SAAS,EAAEA;AAJb,QALF,EAYE,gCAAC,0CAAD,QACE,gCAAC,gBAAD;AACE,QAAA,IAAI,EAAE,oBADR;AAEE,QAAA,WAAW,EAAE,yBAFf;AAGE,QAAA,SAAS,EAAEA;AAHb,QADF,CAZF,CAHF,EAwBE,gCAAC,4BAAD;AACE,QAAA,QAAQ,EAAEF,QAAQ,IAAIZ,UAAZ,IAA0Ba,OADtC;AAEE,QAAA,EAAE,EAAE,CAFN;AAGE,QAAA,SAAS,EAAEd,SAHb;AAIE,QAAA,KAAK,EAAEb,KAAK,IAAIwB;AAJlB,SAKE,gCAAC,uBAAD;AAAa,QAAA,QAAQ,EAAExB,KAAvB;AAA8B,QAAA,OAAO,EAAEA;AAAvC,2FALF,CAxBF,CADF;AAoCD;;;wBAxEkB;AACjB,aAAO;AAAEc,QAAAA,UAAU,EAAE,KAAd;AAAqBU,QAAAA,WAAW,EAAE,IAAlC;AAAwCX,QAAAA,SAAS,EAAE;AAAnD,OAAP;AACD;;;EAfgCgB,gB;;iCAA7B5B,oB,kDAEC6B,4B;AAsFP7B,oBAAoB,GAAG,gCAAWA,oBAAX,CAAvB;AAEAA,oBAAoB,GAAG,0BAAQ8B,wCAAR,EAAsC;AAC3DC,EAAAA,IAAI,EAAE;AADqD,CAAtC,EAEpB/B,oBAFoB,CAAvB;AAIAA,oBAAoB,GAAG,yBACrB,IADqB,EAErB,UAAAgC,QAAQ;AAAA,SAAK;AACXf,IAAAA,sBAAsB,EAAE,gCAAArB,OAAO;AAAA,aAAIoC,QAAQ,CAAC,2CAAQpC,OAAR,CAAD,CAAZ;AAAA,KADpB;AAEX0B,IAAAA,oBAAoB,EAAE,8BAAA1B,OAAO;AAAA,aAAIoC,QAAQ,CAAC,yCAAMpC,OAAN,CAAD,CAAZ;AAAA;AAFlB,GAAL;AAAA,CAFa,EAMrBI,oBANqB,CAAvB;AAQAA,oBAAoB,GAAG,0BAAU;AAC/BiC,EAAAA,IAAI,EAAE,sBADyB;AAE/B/C,EAAAA,QAAQ,EAARA;AAF+B,CAAV,EAGpBc,oBAHoB,CAAvB;eAKeA,oB","sourcesContent":["import React, { Component } from 'react';\r\nimport { Field, reduxForm, Form } from 'redux-form';\r\nimport { graphql } from 'react-apollo';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { success, error } from 'react-notification-system-redux';\r\nimport { captureException } from '../../../../hocs/withSentry/withSentry';\r\n\r\n/** View */\r\nimport Box from '@lib/ui/Box/Box';\r\nimport TooltipBase from '@lib/ui/TooltipBase/TooltipBase';\r\nimport FormButtonSubmit from '@lib/ui/FormButtonSubmit/FormButtonSubmit';\r\n\r\n/** Components */\r\nimport FieldInputPassword from '../FieldInputPassword/FieldInputPassword';\r\nimport FormLogo from '../FormLogo/FormLogo';\r\n\r\n/** PropTypes */\r\nimport { formPropTypes } from '../../../../propTypes/Forms/FormPropTypes';\r\n\r\n/** GraphQl schema */\r\nimport UserPasswordRecoveryMutation from './UserPasswordRecoveryMutation.graphql';\r\nimport { TextFieldLastWrapper } from '@lib/ui/TextFieldLastWrapper/TextFieldLastWrapper';\r\nimport { TextFieldFirstWrapper } from '@lib/ui/TextFieldFirstWrapper/TextFieldFirstWrapper';\r\n\r\nconst validate = ({ password, newpassword, confirmnewpassword }) => {\r\n  const errors = {};\r\n\r\n  if (!password) {\r\n    errors.password = 'Обязательно для заполнения';\r\n  }\r\n\r\n  if (!newpassword) {\r\n    errors.newpassword = 'Обязательно для заполнения';\r\n  }\r\n\r\n  if (!confirmnewpassword) {\r\n    errors.confirmnewpassword = 'Обязательно для заполнения';\r\n  }\r\n\r\n  if (newpassword !== undefined && newpassword.length <= 7) {\r\n    errors.newpassword = 'Пароль должен состоять минимум из 8 символов';\r\n  }\r\n\r\n  if (newpassword !== undefined && newpassword.length >= 30) {\r\n    errors.newpassword = 'Пароль должен состоять не больше 30 символов';\r\n  }\r\n\r\n  if (password === newpassword) {\r\n    errors.newpassword = 'Старый пароль и новый пароль не должны совпадать';\r\n  }\r\n\r\n  if (confirmnewpassword !== newpassword) {\r\n    errors.confirmnewpassword = 'Пароли не совпадают';\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst notificationOpts = () => ({\r\n  success: {\r\n    title: 'Пароль успешно изменён',\r\n    message: 'Пароль успешно изменён',\r\n    position: 'tr',\r\n    autoDismiss: 2,\r\n  },\r\n  error: {\r\n    title: 'Пароль не изменён',\r\n    message: 'Пароль не изменён',\r\n    position: 'tr',\r\n    autoDismiss: 2,\r\n  },\r\n});\r\n\r\nclass FormPasswordRecovery extends Component {\r\n  static propTypes = {\r\n    ...formPropTypes,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = this.initialState;\r\n\r\n    this.submit = this.submit.bind(this);\r\n  }\r\n\r\n  get initialState() {\r\n    return { submitting: false, apolloError: null, isLoading: false };\r\n  }\r\n\r\n  submit(value) {\r\n    const data = { variables: Object.assign({}, value) };\r\n\r\n    this.setState(() => ({ isLoading: true, submitting: true }));\r\n\r\n    return this.props['@apollo/update'](data)\r\n      .then(response => {\r\n        if (response.errors) {\r\n          throw response;\r\n        } else {\r\n          this.props.reset();\r\n          this.props.setNotificationSuccess(notificationOpts().success);\r\n          this.props.history.push(`/app/profile`);\r\n          return Promise.resolve(response);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        const { errors, message } = error;\r\n        this.props.setNotificationError(notificationOpts().error);\r\n        captureException(error);\r\n        this.setState(() => ({\r\n          submitting: false,\r\n          apolloError: 'Ошибка смена пароля',\r\n          isLoading: false,\r\n        }));\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { handleSubmit, pristine, invalid, error } = this.props;\r\n    const { isLoading, apolloError, submitting } = this.state;\r\n\r\n    return (\r\n      <Form onSubmit={handleSubmit(this.submit)}>\r\n        <FormLogo />\r\n\r\n        <Box mb={'100px'}>\r\n          <TextFieldFirstWrapper>\r\n            <Field name={'password'} placeholder={'Старый пароль'} component={FieldInputPassword} />\r\n          </TextFieldFirstWrapper>\r\n\r\n          <Field\r\n            name={'newpassword'}\r\n            placeholder={'Новый пароль'}\r\n            variant={'secondary'}\r\n            component={FieldInputPassword}\r\n          />\r\n\r\n          <TextFieldLastWrapper>\r\n            <Field\r\n              name={'confirmnewpassword'}\r\n              placeholder={'Потвердите новый пароль'}\r\n              component={FieldInputPassword}\r\n            />\r\n          </TextFieldLastWrapper>\r\n        </Box>\r\n\r\n        <FormButtonSubmit\r\n          disabled={pristine || submitting || invalid}\r\n          ml={9}\r\n          isLoading={isLoading}\r\n          error={error || apolloError}>\r\n          <TooltipBase isActive={error} warning={error}>\r\n            Сменить пароль\r\n          </TooltipBase>\r\n        </FormButtonSubmit>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nFormPasswordRecovery = withRouter(FormPasswordRecovery);\r\n\r\nFormPasswordRecovery = graphql(UserPasswordRecoveryMutation, {\r\n  name: '@apollo/update',\r\n})(FormPasswordRecovery);\r\n\r\nFormPasswordRecovery = connect(\r\n  null,\r\n  dispatch => ({\r\n    setNotificationSuccess: message => dispatch(success(message)),\r\n    setNotificationError: message => dispatch(error(message)),\r\n  }),\r\n)(FormPasswordRecovery);\r\n\r\nFormPasswordRecovery = reduxForm({\r\n  form: 'FormPasswordRecovery',\r\n  validate,\r\n})(FormPasswordRecovery);\r\n\r\nexport default FormPasswordRecovery;\r\n"]}