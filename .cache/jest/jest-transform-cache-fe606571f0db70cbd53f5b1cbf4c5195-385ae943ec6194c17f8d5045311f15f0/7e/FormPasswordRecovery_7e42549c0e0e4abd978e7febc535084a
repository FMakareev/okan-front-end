d3eec6b5d54a88d30bcfc06d6308a40a
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reduxForm = require("redux-form");

var _reactApollo = require("react-apollo");

var _reactRouterDom = require("react-router-dom");

var _reactRedux = require("react-redux");

var _reactNotificationSystemRedux = require("react-notification-system-redux");

var _withSentry = require("../../../../hocs/withSentry/withSentry");

var _Box = _interopRequireDefault(require("@lib/ui/Box/Box"));

var _TooltipBase = _interopRequireDefault(require("@lib/ui/TooltipBase/TooltipBase"));

var _FormButtonSubmit = _interopRequireDefault(require("@lib/ui/FormButtonSubmit/FormButtonSubmit"));

var _FieldInputPassword = _interopRequireDefault(require("../FieldInputPassword/FieldInputPassword"));

var _FormLogo = _interopRequireDefault(require("../FormLogo/FormLogo"));

var _FormPropTypes = require("../../../../propTypes/Forms/FormPropTypes");

var _UserPasswordRecoveryMutation = _interopRequireDefault(require("./UserPasswordRecoveryMutation.graphql"));

var _TextFieldLastWrapper = require("@lib/ui/TextFieldLastWrapper/TextFieldLastWrapper");

var _TextFieldFirstWrapper = require("@lib/ui/TextFieldFirstWrapper/TextFieldFirstWrapper");

/** View */

/** Components */

/** PropTypes */

/** GraphQl schema */
var validate = function validate(_ref) {
  var password = _ref.password,
      newpassword = _ref.newpassword,
      confirmnewpassword = _ref.confirmnewpassword;
  var errors = {};

  if (!password) {
    errors.password = 'Обязательно для заполнения';
  }

  if (!newpassword) {
    errors.newpassword = 'Обязательно для заполнения';
  }

  if (!confirmnewpassword) {
    errors.confirmnewpassword = 'Обязательно для заполнения';
  }

  if (newpassword !== undefined && newpassword.length <= 7) {
    errors.newpassword = 'Пароль должен состоять минимум из 8 символов';
  }

  if (newpassword !== undefined && newpassword.length >= 30) {
    errors.newpassword = 'Пароль должен состоять не больше 30 символов';
  }

  if (password === newpassword) {
    errors.newpassword = 'Старый пароль и новый пароль не должны совпадать';
  }

  if (confirmnewpassword !== newpassword) {
    errors.confirmnewpassword = 'Пароли не совпадают';
  }

  return errors;
};

var notificationOpts = function notificationOpts() {
  return {
    success: {
      title: 'Пароль успешно изменён',
      message: 'Пароль успешно изменён',
      position: 'tr',
      autoDismiss: 2
    },
    error: {
      title: 'Пароль не изменён',
      message: 'Пароль не изменён',
      position: 'tr',
      autoDismiss: 2
    }
  };
};

var FormPasswordRecovery =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(FormPasswordRecovery, _Component);

  function FormPasswordRecovery(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, FormPasswordRecovery);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(FormPasswordRecovery).call(this, props));
    _this.state = _this.initialState;
    _this.submit = _this.submit.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(FormPasswordRecovery, [{
    key: "submit",
    value: function submit(value) {
      var _this2 = this;

      var data = {
        variables: Object.assign({}, value)
      };
      this.setState(function () {
        return {
          isLoading: true,
          submitting: true
        };
      });
      return this.props['@apollo/update'](data).then(function (response) {
        if (response.errors) {
          throw response;
        } else {
          _this2.props.reset();

          _this2.props.setNotificationSuccess(notificationOpts().success);

          _this2.props.history.push("/app/profile");

          return Promise.resolve(response);
        }
      })["catch"](function (error) {
        var errors = error.errors,
            message = error.message;

        _this2.props.setNotificationError(notificationOpts().error);

        (0, _withSentry.captureException)(error);

        _this2.setState(function () {
          return {
            submitting: false,
            apolloError: 'Ошибка смена пароля',
            isLoading: false
          };
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          handleSubmit = _this$props.handleSubmit,
          pristine = _this$props.pristine,
          invalid = _this$props.invalid,
          error = _this$props.error;
      var _this$state = this.state,
          isLoading = _this$state.isLoading,
          apolloError = _this$state.apolloError,
          submitting = _this$state.submitting;
      return _react["default"].createElement(_reduxForm.Form, {
        onSubmit: handleSubmit(this.submit)
      }, _react["default"].createElement(_FormLogo["default"], null), _react["default"].createElement(_Box["default"], {
        mb: '100px'
      }, _react["default"].createElement(_TextFieldFirstWrapper.TextFieldFirstWrapper, null, _react["default"].createElement(_reduxForm.Field, {
        name: 'password',
        placeholder: 'Старый пароль',
        component: _FieldInputPassword["default"]
      })), _react["default"].createElement(_reduxForm.Field, {
        name: 'newpassword',
        placeholder: 'Новый пароль',
        variant: 'secondary',
        component: _FieldInputPassword["default"]
      }), _react["default"].createElement(_TextFieldLastWrapper.TextFieldLastWrapper, null, _react["default"].createElement(_reduxForm.Field, {
        name: 'confirmnewpassword',
        placeholder: 'Потвердите новый пароль',
        component: _FieldInputPassword["default"]
      }))), _react["default"].createElement(_FormButtonSubmit["default"], {
        disabled: pristine || submitting || invalid,
        ml: 9,
        isLoading: isLoading,
        error: error || apolloError
      }, _react["default"].createElement(_TooltipBase["default"], {
        isActive: error,
        warning: error
      }, "\u0421\u043C\u0435\u043D\u0438\u0442\u044C \u043F\u0430\u0440\u043E\u043B\u044C")));
    }
  }, {
    key: "initialState",
    get: function get() {
      return {
        submitting: false,
        apolloError: null,
        isLoading: false
      };
    }
  }]);
  return FormPasswordRecovery;
}(_react.Component);

(0, _defineProperty2["default"])(FormPasswordRecovery, "propTypes", (0, _objectSpread2["default"])({}, _FormPropTypes.formPropTypes));
FormPasswordRecovery = (0, _reactRouterDom.withRouter)(FormPasswordRecovery);
FormPasswordRecovery = (0, _reactApollo.graphql)(_UserPasswordRecoveryMutation["default"], {
  name: '@apollo/update'
})(FormPasswordRecovery);
FormPasswordRecovery = (0, _reactRedux.connect)(null, function (dispatch) {
  return {
    setNotificationSuccess: function setNotificationSuccess(message) {
      return dispatch((0, _reactNotificationSystemRedux.success)(message));
    },
    setNotificationError: function setNotificationError(message) {
      return dispatch((0, _reactNotificationSystemRedux.error)(message));
    }
  };
})(FormPasswordRecovery);
FormPasswordRecovery = (0, _reduxForm.reduxForm)({
  form: 'FormPasswordRecovery',
  validate: validate
})(FormPasswordRecovery);
var _default = FormPasswordRecovery;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,