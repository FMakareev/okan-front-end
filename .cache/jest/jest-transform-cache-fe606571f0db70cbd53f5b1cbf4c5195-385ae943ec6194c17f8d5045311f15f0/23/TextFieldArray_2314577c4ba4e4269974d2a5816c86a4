b9baf58383776fbe763e695dcd93aea5
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.TextFieldArray = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _gridStyled = require("grid-styled");

var _reactSelect = require("react-select");

var _SvgAdd = require("../Icons/SvgAdd");

var _SvgDelete = require("../Icons/SvgDelete");

var _ButtonBase = _interopRequireDefault(require("../ButtonBase/ButtonBase"));

var _Text = _interopRequireDefault(require("../Text/Text"));

var _Flex = _interopRequireDefault(require("../Flex/Flex"));

var _SelectBase = require("@lib/ui/SelectBase/SelectBase");

var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));

/** Image */

/** view */
var FlexStyled =
/*#__PURE__*/
(0, _styledComponents["default"])(_Flex["default"]).withConfig({
  componentId: "sc-19425i0-0"
})(["border-top:1px solid #00649c;border-radius:0px;"]);
var NewSelectStyles = (0, _objectSpread2["default"])({}, _SelectBase.SelectStyles, {
  control: function control(style, props) {
    return (0, _objectSpread2["default"])({}, style, {
      width: '100%',
      padding: '0 0 0 10px',
      border: 'none',
      borderRadius: 0,
      cursor: 'pointer',
      ':hover': {
        border: 'none',
        boxShadow: 'none'
      }
    }, props.isFocused ? {
      border: 'none',
      boxShadow: 'none'
    } : {}, props.menuIsOpen ? {
      borderRadius: '0',
      border: 'none'
    } : {});
  },
  menu: function menu(style) {
    return (0, _objectSpread2["default"])({}, style, {
      margin: 0,
      borderRadius: '5px'
    });
  }
});

var ControlComponent = function ControlComponent(props) {
  return _react["default"].createElement(FlexStyled, {
    py: 2,
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '100%'
  }, _react["default"].createElement(_SvgAdd.SvgAdd, null), _react["default"].createElement(_reactSelect.components.Control, props));
};
/**
 * Компонент инпута c доабвлением еще инпутов (Text Field Array)
 * @example ./TextFieldArray.example.md
 */


var TextFieldArray =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2["default"])(TextFieldArray, _Component);

  function TextFieldArray(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, TextFieldArray);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TextFieldArray).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onDelete", function (value) {
      try {
        var input = _this.props.input;
        input.onChange(_this.compareOptions(input.value, [value]));
      } catch (error) {
        console.error('Error onDelete: ', error);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onChange", function (value) {
      var _this$props = _this.props,
          input = _this$props.input,
          valueKey = _this$props.valueKey;
      input.onChange([].concat((0, _toConsumableArray2["default"])(input.value), [value[valueKey]]));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "compareOptions", function () {
      var options1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var valueKey = arguments.length > 2 ? arguments[2] : undefined;

      try {
        if (Array.isArray(options1) && Array.isArray(options2)) {
          return options1.filter(function (item) {
            var result = options2.find(function (child) {
              if (valueKey && typeof valueKey === 'string') {
                return item[valueKey] === child;
              } else {
                return item === child;
              }
            });

            if (result) {
              return false;
            } else {
              return true;
            }
          });
        }

        return [];
      } catch (error) {
        console.error(error);
        return [];
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getOptionName", function (options, id) {
      try {
        var result = options && Array.isArray(options) && options.find(function (item) {
          return item.id === id;
        });

        if (result) {
          return result.name;
        } else {
          return id;
        }
      } catch (error) {
        console.log(error);
        return id;
      }
    });
    _this.state = _this.initialState;
    return _this;
  }

  (0, _createClass2["default"])(TextFieldArray, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (!(0, _fastDeepEqual["default"])(nextProps.options, this.props.options) || !(0, _fastDeepEqual["default"])(nextProps.input.value, this.props.input.value)) {
        var options = nextProps.options,
            valueKey = nextProps.valueKey,
            input = nextProps.input;

        if (input.value && options) {
          this.setState(function () {
            return {
              selectedOption: options && options.filter(function (optionItem) {
                return input.value.find(function (valueItem) {
                  return valueItem === optionItem[valueKey];
                });
              })
            };
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          options = _this$props2.options,
          value = _this$props2.input.value,
          valueKey = _this$props2.valueKey;
      return _react["default"].createElement(_gridStyled.Box, {
        width: '100%'
      }, value && Array.isArray(value) && value.map(function (item, index) {
        return _react["default"].createElement(FlexStyled, {
          py: 3,
          key: "FlexStyled-".concat(index),
          width: '100%',
          alignItems: 'center'
        }, _react["default"].createElement(_ButtonBase["default"], {
          onClick: function onClick() {
            return _this2.onDelete(item);
          },
          type: 'button',
          variant: 'empty'
        }, _react["default"].createElement(_SvgDelete.SvgDelete, null)), _react["default"].createElement(_Text["default"], {
          textAlign: 'center',
          width: '100%',
          fontSize: 6,
          lineHeight: 8,
          fontFamily: 'primary300',
          color: 'color3'
        }, _this2.getOptionName(options, item)));
      }), _react["default"].createElement(_SelectBase.SelectBase, (0, _extends2["default"])({
        placeholder: 'Добавить нового согласующего'
      }, this.props, {
        onChange: this.onChange,
        options: this.compareOptions(options, value, valueKey),
        styles: NewSelectStyles,
        components: {
          Control: ControlComponent
        }
      })));
    }
  }, {
    key: "initialState",
    get: function get() {
      if (this.props.input.value.length) {
        var _this$props3 = this.props,
            options = _this$props3.options,
            valueKey = _this$props3.valueKey,
            input = _this$props3.input;
        return {
          selectedOption: options && options.filter(function (optionItem) {
            return input.value.find(function (valueItem) {
              return valueItem === optionItem[valueKey];
            });
          })
        };
      }

      return {
        selectedOption: []
      };
    }
  }]);
  return TextFieldArray;
}(_react.Component);

exports.TextFieldArray = TextFieldArray;
var _default = TextFieldArray;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,